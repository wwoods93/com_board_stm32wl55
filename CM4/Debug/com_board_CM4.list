
com_board_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000751c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007738  08007738  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007740  08007740  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000014  0800775c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800775c  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022436  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e10  00000000  00000000  000424b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002258  00000000  00000000  000472c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a81  00000000  00000000  00049520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002132d  00000000  00000000  0004afa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025524  00000000  00000000  0006c2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc256  00000000  00000000  000917f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091bc  00000000  00000000  0015da48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00166c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000014 	.word	0x20000014
 8000154:	00000000 	.word	0x00000000
 8000158:	0800763c 	.word	0x0800763c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000018 	.word	0x20000018
 8000174:	0800763c 	.word	0x0800763c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b970 	b.w	8000470 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	460f      	mov	r7, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d965      	bls.n	800028a <__udivmoddi4+0xe2>
 80001be:	fab2 f382 	clz	r3, r2
 80001c2:	b143      	cbz	r3, 80001d6 <__udivmoddi4+0x2e>
 80001c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001c8:	f1c3 0220 	rsb	r2, r3, #32
 80001cc:	409f      	lsls	r7, r3
 80001ce:	fa20 f202 	lsr.w	r2, r0, r2
 80001d2:	4317      	orrs	r7, r2
 80001d4:	409c      	lsls	r4, r3
 80001d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001da:	fa1f f58c 	uxth.w	r5, ip
 80001de:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e2:	0c22      	lsrs	r2, r4, #16
 80001e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001ec:	fb01 f005 	mul.w	r0, r1, r5
 80001f0:	4290      	cmp	r0, r2
 80001f2:	d90a      	bls.n	800020a <__udivmoddi4+0x62>
 80001f4:	eb1c 0202 	adds.w	r2, ip, r2
 80001f8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80001fc:	f080 811b 	bcs.w	8000436 <__udivmoddi4+0x28e>
 8000200:	4290      	cmp	r0, r2
 8000202:	f240 8118 	bls.w	8000436 <__udivmoddi4+0x28e>
 8000206:	3902      	subs	r1, #2
 8000208:	4462      	add	r2, ip
 800020a:	1a12      	subs	r2, r2, r0
 800020c:	b2a4      	uxth	r4, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021a:	fb00 f505 	mul.w	r5, r0, r5
 800021e:	42a5      	cmp	r5, r4
 8000220:	d90a      	bls.n	8000238 <__udivmoddi4+0x90>
 8000222:	eb1c 0404 	adds.w	r4, ip, r4
 8000226:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800022a:	f080 8106 	bcs.w	800043a <__udivmoddi4+0x292>
 800022e:	42a5      	cmp	r5, r4
 8000230:	f240 8103 	bls.w	800043a <__udivmoddi4+0x292>
 8000234:	4464      	add	r4, ip
 8000236:	3802      	subs	r0, #2
 8000238:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023c:	1b64      	subs	r4, r4, r5
 800023e:	2100      	movs	r1, #0
 8000240:	b11e      	cbz	r6, 800024a <__udivmoddi4+0xa2>
 8000242:	40dc      	lsrs	r4, r3
 8000244:	2300      	movs	r3, #0
 8000246:	e9c6 4300 	strd	r4, r3, [r6]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d908      	bls.n	8000264 <__udivmoddi4+0xbc>
 8000252:	2e00      	cmp	r6, #0
 8000254:	f000 80ec 	beq.w	8000430 <__udivmoddi4+0x288>
 8000258:	2100      	movs	r1, #0
 800025a:	e9c6 0500 	strd	r0, r5, [r6]
 800025e:	4608      	mov	r0, r1
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	fab3 f183 	clz	r1, r3
 8000268:	2900      	cmp	r1, #0
 800026a:	d149      	bne.n	8000300 <__udivmoddi4+0x158>
 800026c:	42ab      	cmp	r3, r5
 800026e:	d302      	bcc.n	8000276 <__udivmoddi4+0xce>
 8000270:	4282      	cmp	r2, r0
 8000272:	f200 80f7 	bhi.w	8000464 <__udivmoddi4+0x2bc>
 8000276:	1a84      	subs	r4, r0, r2
 8000278:	eb65 0203 	sbc.w	r2, r5, r3
 800027c:	2001      	movs	r0, #1
 800027e:	4617      	mov	r7, r2
 8000280:	2e00      	cmp	r6, #0
 8000282:	d0e2      	beq.n	800024a <__udivmoddi4+0xa2>
 8000284:	e9c6 4700 	strd	r4, r7, [r6]
 8000288:	e7df      	b.n	800024a <__udivmoddi4+0xa2>
 800028a:	b902      	cbnz	r2, 800028e <__udivmoddi4+0xe6>
 800028c:	deff      	udf	#255	; 0xff
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	2b00      	cmp	r3, #0
 8000294:	f040 808f 	bne.w	80003b6 <__udivmoddi4+0x20e>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029e:	fa1f fe8c 	uxth.w	lr, ip
 80002a2:	2101      	movs	r1, #1
 80002a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002a8:	fb07 2015 	mls	r0, r7, r5, r2
 80002ac:	0c22      	lsrs	r2, r4, #16
 80002ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b2:	fb0e f005 	mul.w	r0, lr, r5
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x124>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x122>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 80ca 	bhi.w	800045e <__udivmoddi4+0x2b6>
 80002ca:	4645      	mov	r5, r8
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d4:	fb07 2210 	mls	r2, r7, r0, r2
 80002d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x14e>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x14c>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 80ba 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002f4:	4610      	mov	r0, r2
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002fe:	e79f      	b.n	8000240 <__udivmoddi4+0x98>
 8000300:	f1c1 0720 	rsb	r7, r1, #32
 8000304:	408b      	lsls	r3, r1
 8000306:	fa22 fc07 	lsr.w	ip, r2, r7
 800030a:	ea4c 0c03 	orr.w	ip, ip, r3
 800030e:	fa05 f401 	lsl.w	r4, r5, r1
 8000312:	fa20 f307 	lsr.w	r3, r0, r7
 8000316:	40fd      	lsrs	r5, r7
 8000318:	4323      	orrs	r3, r4
 800031a:	fa00 f901 	lsl.w	r9, r0, r1
 800031e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	fbb5 f8f0 	udiv	r8, r5, r0
 800032a:	0c1c      	lsrs	r4, r3, #16
 800032c:	fb00 5518 	mls	r5, r0, r8, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	d90b      	bls.n	8000358 <__udivmoddi4+0x1b0>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000348:	f080 8087 	bcs.w	800045a <__udivmoddi4+0x2b2>
 800034c:	42a5      	cmp	r5, r4
 800034e:	f240 8084 	bls.w	800045a <__udivmoddi4+0x2b2>
 8000352:	f1a8 0802 	sub.w	r8, r8, #2
 8000356:	4464      	add	r4, ip
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	b29d      	uxth	r5, r3
 800035c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000360:	fb00 4413 	mls	r4, r0, r3, r4
 8000364:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000368:	fb03 fe0e 	mul.w	lr, r3, lr
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x1da>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000378:	d26b      	bcs.n	8000452 <__udivmoddi4+0x2aa>
 800037a:	45a6      	cmp	lr, r4
 800037c:	d969      	bls.n	8000452 <__udivmoddi4+0x2aa>
 800037e:	3b02      	subs	r3, #2
 8000380:	4464      	add	r4, ip
 8000382:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000386:	fba0 8302 	umull	r8, r3, r0, r2
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	429c      	cmp	r4, r3
 8000390:	46c6      	mov	lr, r8
 8000392:	461d      	mov	r5, r3
 8000394:	d355      	bcc.n	8000442 <__udivmoddi4+0x29a>
 8000396:	d052      	beq.n	800043e <__udivmoddi4+0x296>
 8000398:	b156      	cbz	r6, 80003b0 <__udivmoddi4+0x208>
 800039a:	ebb9 030e 	subs.w	r3, r9, lr
 800039e:	eb64 0405 	sbc.w	r4, r4, r5
 80003a2:	fa04 f707 	lsl.w	r7, r4, r7
 80003a6:	40cb      	lsrs	r3, r1
 80003a8:	40cc      	lsrs	r4, r1
 80003aa:	431f      	orrs	r7, r3
 80003ac:	e9c6 7400 	strd	r7, r4, [r6]
 80003b0:	2100      	movs	r1, #0
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	f1c3 0120 	rsb	r1, r3, #32
 80003ba:	fa02 fc03 	lsl.w	ip, r2, r3
 80003be:	fa20 f201 	lsr.w	r2, r0, r1
 80003c2:	fa25 f101 	lsr.w	r1, r5, r1
 80003c6:	409d      	lsls	r5, r3
 80003c8:	432a      	orrs	r2, r5
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d6:	fb07 1510 	mls	r5, r7, r0, r1
 80003da:	0c11      	lsrs	r1, r2, #16
 80003dc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e0:	fb00 f50e 	mul.w	r5, r0, lr
 80003e4:	428d      	cmp	r5, r1
 80003e6:	fa04 f403 	lsl.w	r4, r4, r3
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x256>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f4:	d22f      	bcs.n	8000456 <__udivmoddi4+0x2ae>
 80003f6:	428d      	cmp	r5, r1
 80003f8:	d92d      	bls.n	8000456 <__udivmoddi4+0x2ae>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	1b49      	subs	r1, r1, r5
 8000400:	b292      	uxth	r2, r2
 8000402:	fbb1 f5f7 	udiv	r5, r1, r7
 8000406:	fb07 1115 	mls	r1, r7, r5, r1
 800040a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800040e:	fb05 f10e 	mul.w	r1, r5, lr
 8000412:	4291      	cmp	r1, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x280>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800041e:	d216      	bcs.n	800044e <__udivmoddi4+0x2a6>
 8000420:	4291      	cmp	r1, r2
 8000422:	d914      	bls.n	800044e <__udivmoddi4+0x2a6>
 8000424:	3d02      	subs	r5, #2
 8000426:	4462      	add	r2, ip
 8000428:	1a52      	subs	r2, r2, r1
 800042a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800042e:	e739      	b.n	80002a4 <__udivmoddi4+0xfc>
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e709      	b.n	800024a <__udivmoddi4+0xa2>
 8000436:	4639      	mov	r1, r7
 8000438:	e6e7      	b.n	800020a <__udivmoddi4+0x62>
 800043a:	4610      	mov	r0, r2
 800043c:	e6fc      	b.n	8000238 <__udivmoddi4+0x90>
 800043e:	45c1      	cmp	r9, r8
 8000440:	d2aa      	bcs.n	8000398 <__udivmoddi4+0x1f0>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 050c 	sbc.w	r5, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a4      	b.n	8000398 <__udivmoddi4+0x1f0>
 800044e:	4645      	mov	r5, r8
 8000450:	e7ea      	b.n	8000428 <__udivmoddi4+0x280>
 8000452:	4603      	mov	r3, r0
 8000454:	e795      	b.n	8000382 <__udivmoddi4+0x1da>
 8000456:	4640      	mov	r0, r8
 8000458:	e7d1      	b.n	80003fe <__udivmoddi4+0x256>
 800045a:	46d0      	mov	r8, sl
 800045c:	e77c      	b.n	8000358 <__udivmoddi4+0x1b0>
 800045e:	3d02      	subs	r5, #2
 8000460:	4462      	add	r2, ip
 8000462:	e733      	b.n	80002cc <__udivmoddi4+0x124>
 8000464:	4608      	mov	r0, r1
 8000466:	e70b      	b.n	8000280 <__udivmoddi4+0xd8>
 8000468:	4464      	add	r4, ip
 800046a:	3802      	subs	r0, #2
 800046c:	e743      	b.n	80002f6 <__udivmoddi4+0x14e>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4013      	ands	r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a4:	68fb      	ldr	r3, [r7, #12]
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> RCC_LSCO
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff ffdb 	bl	8000480 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	2002      	movs	r0, #2
 80004cc:	f7ff ffd8 	bl	8000480 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d0:	2004      	movs	r0, #4
 80004d2:	f7ff ffd5 	bl	8000480 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004d6:	2304      	movs	r3, #4
 80004d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004da:	2302      	movs	r3, #2
 80004dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f001 facf 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fc:	2302      	movs	r3, #2
 80004fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f001 fabe 	bl	8001a94 <HAL_GPIO_Init>

}
 8000518:	bf00      	nop
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <LL_AHB2_GRP1_EnableClock>:
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <MX_I2C1_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_I2C1_Init+0x74>)
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <MX_I2C1_Init+0x7c>)
 800058e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000592:	2220      	movs	r2, #32
 8000594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005bc:	f001 fbe2 	bl	8001d84 <HAL_I2C_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005c6:	f000 fb25 	bl	8000c14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005ce:	f003 f844 	bl	800365a <HAL_I2CEx_ConfigAnalogFilter>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d8:	f000 fb1c 	bl	8000c14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005dc:	2100      	movs	r1, #0
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005e0:	f003 f885 	bl	80036ee <HAL_I2CEx_ConfigDigitalFilter>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ea:	f000 fb13 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000030 	.word	0x20000030
 80005f8:	40005400 	.word	0x40005400
 80005fc:	00707cbb 	.word	0x00707cbb

08000600 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_I2C2_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_I2C2_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707DBD;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_I2C2_Init+0x74>)
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <MX_I2C2_Init+0x7c>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 34;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_I2C2_Init+0x74>)
 8000612:	2222      	movs	r2, #34	; 0x22
 8000614:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_I2C2_Init+0x74>)
 8000618:	2201      	movs	r2, #1
 800061a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_I2C2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_I2C2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C2_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <MX_I2C2_Init+0x74>)
 800063c:	f001 fba2 	bl	8001d84 <HAL_I2C_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000646:	f000 fae5 	bl	8000c14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800064a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_I2C2_Init+0x74>)
 8000650:	f003 f803 	bl	800365a <HAL_I2CEx_ConfigAnalogFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800065a:	f000 fadb 	bl	8000c14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800065e:	2100      	movs	r1, #0
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_I2C2_Init+0x74>)
 8000662:	f003 f844 	bl	80036ee <HAL_I2CEx_ConfigDigitalFilter>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800066c:	f000 fad2 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000b4 	.word	0x200000b4
 8000678:	40005800 	.word	0x40005800
 800067c:	00707dbd 	.word	0x00707dbd

08000680 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C3_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707DBD;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C3_Init+0x74>)
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <MX_I2C3_Init+0x7c>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 36;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000692:	2224      	movs	r2, #36	; 0x24
 8000694:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000698:	2201      	movs	r2, #1
 800069a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C3_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006bc:	f001 fb62 	bl	8001d84 <HAL_I2C_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006c6:	f000 faa5 	bl	8000c14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006d0:	f002 ffc3 	bl	800365a <HAL_I2CEx_ConfigAnalogFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 fa9b 	bl	8000c14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006e2:	f003 f804 	bl	80036ee <HAL_I2CEx_ConfigDigitalFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 fa92 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000138 	.word	0x20000138
 80006f8:	40005c00 	.word	0x40005c00
 80006fc:	00707dbd 	.word	0x00707dbd

08000700 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	; 0x58
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2238      	movs	r2, #56	; 0x38
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f006 ff5f 	bl	80075e4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a66      	ldr	r2, [pc, #408]	; (80008c4 <HAL_I2C_MspInit+0x1c4>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d137      	bne.n	80007a0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000734:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000738:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4618      	mov	r0, r3
 8000740:	f004 fb36 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800074a:	f000 fa63 	bl	8000c14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff fee6 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000758:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075a:	2312      	movs	r3, #18
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000766:	2304      	movs	r3, #4
 8000768:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800076e:	4619      	mov	r1, r3
 8000770:	4855      	ldr	r0, [pc, #340]	; (80008c8 <HAL_I2C_MspInit+0x1c8>)
 8000772:	f001 f98f 	bl	8001a94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000776:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800077a:	f7ff fee9 	bl	8000550 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	201e      	movs	r0, #30
 8000784:	f000 ffc7 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000788:	201e      	movs	r0, #30
 800078a:	f000 ffde 	bl	800174a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	201f      	movs	r0, #31
 8000794:	f000 ffbf 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000798:	201f      	movs	r0, #31
 800079a:	f000 ffd6 	bl	800174a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800079e:	e08c      	b.n	80008ba <HAL_I2C_MspInit+0x1ba>
  else if(i2cHandle->Instance==I2C2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a49      	ldr	r2, [pc, #292]	; (80008cc <HAL_I2C_MspInit+0x1cc>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d138      	bne.n	800081c <HAL_I2C_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007ae:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4618      	mov	r0, r3
 80007ba:	f004 faf9 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 80007c4:	f000 fa26 	bl	8000c14 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fea9 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80007ce:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d4:	2312      	movs	r3, #18
 80007d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007e0:	2304      	movs	r3, #4
 80007e2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f001 f951 	bl	8001a94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007f2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80007f6:	f7ff feab 	bl	8000550 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2020      	movs	r0, #32
 8000800:	f000 ff89 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000804:	2020      	movs	r0, #32
 8000806:	f000 ffa0 	bl	800174a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2021      	movs	r0, #33	; 0x21
 8000810:	f000 ff81 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000814:	2021      	movs	r0, #33	; 0x21
 8000816:	f000 ff98 	bl	800174a <HAL_NVIC_EnableIRQ>
}
 800081a:	e04e      	b.n	80008ba <HAL_I2C_MspInit+0x1ba>
  else if(i2cHandle->Instance==I2C3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <HAL_I2C_MspInit+0x1d0>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d149      	bne.n	80008ba <HAL_I2C_MspInit+0x1ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800082c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4618      	mov	r0, r3
 8000838:	f004 faba 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_I2C_MspInit+0x146>
      Error_Handler();
 8000842:	f000 f9e7 	bl	8000c14 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fe6a 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	2004      	movs	r0, #4
 800084e:	f7ff fe67 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000852:	2310      	movs	r3, #16
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000862:	2304      	movs	r3, #4
 8000864:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800086a:	4619      	mov	r1, r3
 800086c:	4816      	ldr	r0, [pc, #88]	; (80008c8 <HAL_I2C_MspInit+0x1c8>)
 800086e:	f001 f911 	bl	8001a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000872:	2301      	movs	r3, #1
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000876:	2312      	movs	r3, #18
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000882:	2304      	movs	r3, #4
 8000884:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800088a:	4619      	mov	r1, r3
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <HAL_I2C_MspInit+0x1d4>)
 800088e:	f001 f901 	bl	8001a94 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000892:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000896:	f7ff fe5b 	bl	8000550 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2102      	movs	r1, #2
 800089e:	2030      	movs	r0, #48	; 0x30
 80008a0:	f000 ff39 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80008a4:	2030      	movs	r0, #48	; 0x30
 80008a6:	f000 ff50 	bl	800174a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 2, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	2031      	movs	r0, #49	; 0x31
 80008b0:	f000 ff31 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80008b4:	2031      	movs	r0, #49	; 0x31
 80008b6:	f000 ff48 	bl	800174a <HAL_NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3758      	adds	r7, #88	; 0x58
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40005400 	.word	0x40005400
 80008c8:	48000400 	.word	0x48000400
 80008cc:	40005800 	.word	0x40005800
 80008d0:	40005c00 	.word	0x40005c00
 80008d4:	48000800 	.word	0x48000800

080008d8 <I2C1_EV_IRQHandler>:

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

void I2C1_EV_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <I2C1_EV_IRQHandler+0x10>)
 80008de:	f001 fc95 	bl	800220c <HAL_I2C_EV_IRQHandler>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000030 	.word	0x20000030

080008ec <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi1);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <SPI1_IRQHandler+0x10>)
 80008f2:	f004 ffdd 	bl	80058b0 <HAL_SPI_IRQHandler>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000023c 	.word	0x2000023c

08000900 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <I2C1_ER_IRQHandler+0x10>)
 8000906:	f001 fc9b 	bl	8002240 <HAL_I2C_ER_IRQHandler>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000030 	.word	0x20000030

08000914 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c2);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <I2C2_EV_IRQHandler+0x10>)
 800091a:	f001 fc77 	bl	800220c <HAL_I2C_EV_IRQHandler>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000b4 	.word	0x200000b4

08000928 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c2);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <I2C2_ER_IRQHandler+0x10>)
 800092e:	f001 fc87 	bl	8002240 <HAL_I2C_ER_IRQHandler>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000b4 	.word	0x200000b4

0800093c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi2);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <SPI2_IRQHandler+0x10>)
 8000942:	f004 ffb5 	bl	80058b0 <HAL_SPI_IRQHandler>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200002c8 	.word	0x200002c8

08000950 <I2C3_EV_IRQHandler>:

void I2C3_EV_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <I2C3_EV_IRQHandler+0x10>)
 8000956:	f001 fc59 	bl	800220c <HAL_I2C_EV_IRQHandler>
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000138 	.word	0x20000138

08000964 <I2C3_ER_IRQHandler>:

void I2C3_ER_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c3);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <I2C3_ER_IRQHandler+0x10>)
 800096a:	f001 fc69 	bl	8002240 <HAL_I2C_ER_IRQHandler>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000138 	.word	0x20000138

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 fd88 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f87c 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f7ff fd94 	bl	80004b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000988:	f7ff fdfa 	bl	8000580 <MX_I2C1_Init>
  MX_I2C2_Init();
 800098c:	f7ff fe38 	bl	8000600 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000990:	f7ff fe76 	bl	8000680 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000994:	f000 fa82 	bl	8000e9c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000998:	f000 fc1c 	bl	80011d4 <MX_TIM2_Init>
//  MX_LoRaWAN_Init();
  MX_RTC_Init();
 800099c:	f000 f980 	bl	8000ca0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80009a0:	f000 fcb2 	bl	8001308 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80009a4:	f000 fab2 	bl	8000f0c <MX_SPI2_Init>


  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f002 ffad 	bl	8003908 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MASTER_TX_COMPLETE_CB_ID, hal_callback_i2c_controller_tx_complete);
 80009ae:	4a24      	ldr	r2, [pc, #144]	; (8000a40 <main+0xc8>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	4824      	ldr	r0, [pc, #144]	; (8000a44 <main+0xcc>)
 80009b4:	f001 fab2 	bl	8001f1c <HAL_I2C_RegisterCallback>
	HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MASTER_RX_COMPLETE_CB_ID, hal_callback_i2c_controller_rx_complete);
 80009b8:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <main+0xd0>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	4821      	ldr	r0, [pc, #132]	; (8000a44 <main+0xcc>)
 80009be:	f001 faad 	bl	8001f1c <HAL_I2C_RegisterCallback>
	HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_SLAVE_RX_COMPLETE_CB_ID, hal_callback_i2c_peripheral_rx_complete);
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <main+0xd4>)
 80009c4:	2103      	movs	r1, #3
 80009c6:	481f      	ldr	r0, [pc, #124]	; (8000a44 <main+0xcc>)
 80009c8:	f001 faa8 	bl	8001f1c <HAL_I2C_RegisterCallback>
	HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_LISTEN_COMPLETE_CB_ID, hal_callback_i2c_listen_complete);
 80009cc:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <main+0xd8>)
 80009ce:	2104      	movs	r1, #4
 80009d0:	481c      	ldr	r0, [pc, #112]	; (8000a44 <main+0xcc>)
 80009d2:	f001 faa3 	bl	8001f1c <HAL_I2C_RegisterCallback>


	HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_TX_RX_COMPLETE_CB_ID, hal_callback_spi_controller_tx_rx_complete);
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <main+0xdc>)
 80009d8:	2102      	movs	r1, #2
 80009da:	481f      	ldr	r0, [pc, #124]	; (8000a58 <main+0xe0>)
 80009dc:	f004 fec2 	bl	8005764 <HAL_SPI_RegisterCallback>
	HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_ERROR_CB_ID, hal_callback_spi_controller_error);
 80009e0:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <main+0xe4>)
 80009e2:	2106      	movs	r1, #6
 80009e4:	481c      	ldr	r0, [pc, #112]	; (8000a58 <main+0xe0>)
 80009e6:	f004 febd 	bl	8005764 <HAL_SPI_RegisterCallback>



	HAL_TIM_Base_Start(&htim2);
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <main+0xe8>)
 80009ec:	f005 f918 	bl	8005c20 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2104      	movs	r1, #4
 80009f4:	481b      	ldr	r0, [pc, #108]	; (8000a64 <main+0xec>)
 80009f6:	f001 f9ad 	bl	8001d54 <HAL_GPIO_WritePin>
	{
		//
		//	  i2c_rx_data[0] = 0x00;
		//	  i2c_rx_data[1] = 0x00;

		if (get_timer_2_count() - count > I2C_SEND_INTERVAL_US)
 80009fa:	f000 f89f 	bl	8000b3c <get_timer_2_count>
 80009fe:	4602      	mov	r2, r0
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <main+0xf0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <main+0xf4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d90a      	bls.n	8000a22 <main+0xaa>
		{
			  HAL_I2C_Master_Transmit_IT(&hi2c1, (0x14 << 1), i2c_tx_data, 5);
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <main+0xf8>)
 8000a10:	2128      	movs	r1, #40	; 0x28
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <main+0xcc>)
 8000a14:	f001 fb1a 	bl	800204c <HAL_I2C_Master_Transmit_IT>

	//	  			  count = get_timer_2_count();

			  count = get_timer_2_count();
 8000a18:	f000 f890 	bl	8000b3c <get_timer_2_count>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <main+0xf0>)
 8000a20:	6013      	str	r3, [r2, #0]
//			{
//				count = get_timer_2_count();
//			}
		}

		if (sent == 1U)
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <main+0xfc>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d1e7      	bne.n	80009fa <main+0x82>
		{
			HAL_I2C_Master_Receive_IT(&hi2c1, (0x14 << 1), i2c_rx_data, RX_SIZE);
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <main+0x100>)
 8000a2e:	2128      	movs	r1, #40	; 0x28
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <main+0xcc>)
 8000a32:	f001 fb7b 	bl	800212c <HAL_I2C_Master_Receive_IT>
			sent = 0U;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <main+0xfc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
		if (get_timer_2_count() - count > I2C_SEND_INTERVAL_US)
 8000a3c:	e7dd      	b.n	80009fa <main+0x82>
 8000a3e:	bf00      	nop
 8000a40:	08000b55 	.word	0x08000b55
 8000a44:	20000030 	.word	0x20000030
 8000a48:	08000b71 	.word	0x08000b71
 8000a4c:	08000b85 	.word	0x08000b85
 8000a50:	08000bad 	.word	0x08000bad
 8000a54:	08000bd5 	.word	0x08000bd5
 8000a58:	200002c8 	.word	0x200002c8
 8000a5c:	08000bf5 	.word	0x08000bf5
 8000a60:	20000358 	.word	0x20000358
 8000a64:	48000400 	.word	0x48000400
 8000a68:	200001f8 	.word	0x200001f8
 8000a6c:	0007a120 	.word	0x0007a120
 8000a70:	20000004 	.word	0x20000004
 8000a74:	20000202 	.word	0x20000202
 8000a78:	200001fc 	.word	0x200001fc

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09a      	sub	sp, #104	; 0x68
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2248      	movs	r2, #72	; 0x48
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f006 fdaa 	bl	80075e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <SystemClock_Config+0xbc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <SystemClock_Config+0xbc>)
 8000aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <SystemClock_Config+0xbc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000abe:	2309      	movs	r3, #9
 8000ac0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000ac2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 f9eb 	bl	8003eb8 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000ae8:	f000 f894 	bl	8000c14 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000aec:	236f      	movs	r3, #111	; 0x6f
 8000aee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000af0:	2302      	movs	r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 fd55 	bl	80045bc <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b18:	f000 f87c 	bl	8000c14 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000b22:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b26:	f003 fe8b 	bl	8004840 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f004 fa5a 	bl	8004fe4 <HAL_RCCEx_EnableLSCO>
}
 8000b30:	bf00      	nop
 8000b32:	3768      	adds	r7, #104	; 0x68
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58000400 	.word	0x58000400

08000b3c <get_timer_2_count>:

/* USER CODE BEGIN 4 */

uint32_t get_timer_2_count()
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <get_timer_2_count+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000358 	.word	0x20000358

08000b54 <hal_callback_i2c_controller_tx_complete>:

void hal_callback_i2c_controller_tx_complete(I2C_HandleTypeDef *hi2c)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	sent = 1U;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <hal_callback_i2c_controller_tx_complete+0x18>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]

//	timeout_count = 0U;
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000202 	.word	0x20000202

08000b70 <hal_callback_i2c_controller_rx_complete>:

void hal_callback_i2c_controller_rx_complete(I2C_HandleTypeDef *hi2c)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
//	for (uint8_t index = 0; 0 < RX_SIZE; ++index)
//	{
//		rx_bytes[index] = i2c_rx_data[index];
//	}
//	received = 1U;
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <hal_callback_i2c_peripheral_rx_complete>:

void hal_callback_i2c_peripheral_rx_complete(I2C_HandleTypeDef *hi2c)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	for (uint8_t index = 0; 0 < RX_SIZE; ++index)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
	{
		rx_bytes[index] = i2c_rx_data[index];
 8000b90:	7bfa      	ldrb	r2, [r7, #15]
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	4903      	ldr	r1, [pc, #12]	; (8000ba4 <hal_callback_i2c_peripheral_rx_complete+0x20>)
 8000b96:	5c89      	ldrb	r1, [r1, r2]
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <hal_callback_i2c_peripheral_rx_complete+0x24>)
 8000b9a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t index = 0; 0 < RX_SIZE; ++index)
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
		rx_bytes[index] = i2c_rx_data[index];
 8000ba2:	e7f5      	b.n	8000b90 <hal_callback_i2c_peripheral_rx_complete+0xc>
 8000ba4:	200001fc 	.word	0x200001fc
 8000ba8:	20000200 	.word	0x20000200

08000bac <hal_callback_i2c_listen_complete>:
	}
//	received = 1U;
}

void hal_callback_i2c_listen_complete(I2C_HandleTypeDef *hi2c)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	for (uint8_t index = 0; 0 < RX_SIZE; ++index)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
	{
		rx_bytes[index] = i2c_rx_data[index];
 8000bb8:	7bfa      	ldrb	r2, [r7, #15]
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	4903      	ldr	r1, [pc, #12]	; (8000bcc <hal_callback_i2c_listen_complete+0x20>)
 8000bbe:	5c89      	ldrb	r1, [r1, r2]
 8000bc0:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <hal_callback_i2c_listen_complete+0x24>)
 8000bc2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t index = 0; 0 < RX_SIZE; ++index)
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
		rx_bytes[index] = i2c_rx_data[index];
 8000bca:	e7f5      	b.n	8000bb8 <hal_callback_i2c_listen_complete+0xc>
 8000bcc:	200001fc 	.word	0x200001fc
 8000bd0:	20000200 	.word	0x20000200

08000bd4 <hal_callback_spi_controller_tx_rx_complete>:
	}
}

void hal_callback_spi_controller_tx_rx_complete(SPI_HandleTypeDef *hspi)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2104      	movs	r1, #4
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <hal_callback_spi_controller_tx_rx_complete+0x1c>)
 8000be2:	f001 f8b7 	bl	8001d54 <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	48000400 	.word	0x48000400

08000bf4 <hal_callback_spi_controller_error>:

void hal_callback_spi_controller_error(SPI_HandleTypeDef *hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <hal_callback_spi_controller_error+0x1c>)
 8000c02:	f001 f8a7 	bl	8001d54 <HAL_GPIO_WritePin>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	48000400 	.word	0x48000400

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>

08000c1e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <LL_AHB2_GRP1_EnableClock>:
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <LL_APB1_GRP1_EnableClock>:
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
	...

08000ca0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cba:	4a2e      	ldr	r2, [pc, #184]	; (8000d74 <MX_RTC_Init+0xd4>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cc6:	227f      	movs	r2, #127	; 0x7f
 8000cc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000ccc:	22ff      	movs	r2, #255	; 0xff
 8000cce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ce2:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cf6:	481e      	ldr	r0, [pc, #120]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000cf8:	f004 f98c 	bl	8005014 <HAL_RTC_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000d02:	f7ff ff87 	bl	8000c14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000d22:	f004 f9f9 	bl	8005118 <HAL_RTC_SetTime>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_RTC_Init+0x90>
  {
    Error_Handler();
 8000d2c:	f7ff ff72 	bl	8000c14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d30:	2301      	movs	r3, #1
 8000d32:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d34:	2301      	movs	r3, #1
 8000d36:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	2201      	movs	r2, #1
 8000d44:	4619      	mov	r1, r3
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000d48:	f004 fa82 	bl	8005250 <HAL_RTC_SetDate>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000d52:	f7ff ff5f 	bl	8000c14 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_RTC_Init+0xd0>)
 8000d58:	f004 fbb8 	bl	80054cc <HAL_RTCEx_SetRefClock>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000d62:	f7ff ff57 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000204 	.word	0x20000204
 8000d74:	40002800 	.word	0x40002800

08000d78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b096      	sub	sp, #88	; 0x58
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2238      	movs	r2, #56	; 0x38
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 fc23 	bl	80075e4 <memset>
  if(rtcHandle->Instance==RTC)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_RTC_MspInit+0x90>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d12a      	bne.n	8000dfe <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8000dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db2:	643b      	str	r3, [r7, #64]	; 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 fff9 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8000dc4:	f7ff ff26 	bl	8000c14 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dc8:	f7ff ff29 	bl	8000c1e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000dcc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000dd0:	f7ff ff4d 	bl	8000c6e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f7ff ff32 	bl	8000c3e <LL_AHB2_GRP1_EnableClock>
    /**RTC GPIO Configuration
    PA10     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dde:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC;
 8000dec:	2300      	movs	r3, #0
 8000dee:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f000 fe4b 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3758      	adds	r7, #88	; 0x58
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40002800 	.word	0x40002800

08000e0c <LL_AHB2_GRP1_EnableClock>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <LL_APB1_GRP1_EnableClock>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e60:	68fb      	ldr	r3, [r7, #12]
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e90:	68fb      	ldr	r3, [r7, #12]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <MX_SPI1_Init+0x6c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000eb4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ef2:	f004 fb2d 	bl	8005550 <HAL_SPI_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000efc:	f7ff fe8a 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000023c 	.word	0x2000023c
 8000f08:	40013000 	.word	0x40013000

08000f0c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <MX_SPI2_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_SPI2_Init+0x74>)
 8000f6c:	f004 faf0 	bl	8005550 <HAL_SPI_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f76:	f7ff fe4d 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200002c8 	.word	0x200002c8
 8000f84:	40003800 	.word	0x40003800

08000f88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a30      	ldr	r2, [pc, #192]	; (8001068 <HAL_SPI_MspInit+0xe0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d134      	bne.n	8001014 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000faa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000fae:	f7ff ff5d 	bl	8000e6c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff ff2a 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f7ff ff27 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    PA11     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB2     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f000 fd59 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_2;
 8000fe2:	232c      	movs	r3, #44	; 0x2c
 8000fe4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481b      	ldr	r0, [pc, #108]	; (800106c <HAL_SPI_MspInit+0xe4>)
 8000ffe:	f000 fd49 	bl	8001a94 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2022      	movs	r0, #34	; 0x22
 8001008:	f000 fb85 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800100c:	2022      	movs	r0, #34	; 0x22
 800100e:	f000 fb9c 	bl	800174a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001012:	e024      	b.n	800105e <HAL_SPI_MspInit+0xd6>
  else if(spiHandle->Instance==SPI2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_SPI_MspInit+0xe8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d11f      	bne.n	800105e <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800101e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001022:	f7ff ff0b 	bl	8000e3c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff fef0 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 800102c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001030:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103e:	2305      	movs	r3, #5
 8001040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4619      	mov	r1, r3
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <HAL_SPI_MspInit+0xe4>)
 800104a:	f000 fd23 	bl	8001a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2023      	movs	r0, #35	; 0x23
 8001054:	f000 fb5f 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001058:	2023      	movs	r0, #35	; 0x23
 800105a:	f000 fb76 	bl	800174a <HAL_NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40013000 	.word	0x40013000
 800106c:	48000400 	.word	0x48000400
 8001070:	40003800 	.word	0x40003800

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	f06f 000b 	mvn.w	r0, #11
 8001080:	f000 fb49 	bl	8001716 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2101      	movs	r1, #1
 8001088:	f06f 000a 	mvn.w	r0, #10
 800108c:	f000 fb43 	bl	8001716 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2101      	movs	r1, #1
 8001094:	f06f 0009 	mvn.w	r0, #9
 8001098:	f000 fb3d 	bl	8001716 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 4, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2104      	movs	r1, #4
 80010a0:	f06f 0003 	mvn.w	r0, #3
 80010a4:	f000 fb37 	bl	8001716 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 5, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2105      	movs	r1, #5
 80010ac:	f06f 0001 	mvn.w	r0, #1
 80010b0:	f000 fb31 	bl	8001716 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	2004      	movs	r0, #4
 80010ba:	f000 fb2c 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80010be:	2004      	movs	r0, #4
 80010c0:	f000 fb43 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 3, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2103      	movs	r1, #3
 80010c8:	2005      	movs	r0, #5
 80010ca:	f000 fb24 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010ce:	2005      	movs	r0, #5
 80010d0:	f000 fb3b 	bl	800174a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 fa11 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}

08001126 <FLASH_IRQHandler>:

/**
  * @brief This function handles FLASH (CFI) global Interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800112a:	f000 fbf3 	bl	8001914 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}

08001132 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
	...

08001140 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <USART1_IRQHandler+0x10>)
 8001146:	f005 f91f 	bl	8006388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000414 	.word	0x20000414

08001154 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX Occupied Interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <IPCC_C1_RX_IRQHandler+0x10>)
 800115a:	f002 fb61 	bl	8003820 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001bc 	.word	0x200001bc

08001168 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX Free Interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <IPCC_C1_TX_IRQHandler+0x10>)
 800116e:	f002 fb09 	bl	8003784 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001bc 	.word	0x200001bc

0800117c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_GetTick+0x24>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800118e:	f000 f87f 	bl	8001290 <TIMER_IF_GetTimerValue>
 8001192:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000354 	.word	0x20000354

080011a4 <LL_APB1_GRP1_EnableClock>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_TIM2_Init+0x98>)
 80011f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM2_Init+0x98>)
 80011fc:	221f      	movs	r2, #31
 80011fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM2_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM2_Init+0x98>)
 8001208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800120c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_TIM2_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_TIM2_Init+0x98>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <MX_TIM2_Init+0x98>)
 800121c:	f004 fc9c 	bl	8005b58 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001226:	f7ff fcf5 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM2_Init+0x98>)
 8001238:	f004 fd36 	bl	8005ca8 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001242:	f7ff fce7 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM2_Init+0x98>)
 8001254:	f004 ffa4 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800125e:	f7ff fcd9 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000358 	.word	0x20000358

08001270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d102      	bne.n	8001288 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001282:	2001      	movs	r0, #1
 8001284:	f7ff ff8e 	bl	80011a4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <TIMER_IF_GetTimerValue>:
  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
}

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 800129a:	687b      	ldr	r3, [r7, #4]
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <LL_AHB2_GRP1_EnableClock>:
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4013      	ands	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <LL_APB2_GRP1_EnableClock>:
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80012de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4013      	ands	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_USART1_UART_Init+0x90>)
 800130e:	4a23      	ldr	r2, [pc, #140]	; (800139c <MX_USART1_UART_Init+0x94>)
 8001310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_USART1_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_USART1_UART_Init+0x90>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_USART1_UART_Init+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_USART1_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001352:	f004 ffc8 	bl	80062e6 <HAL_UART_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800135c:	f7ff fc5a 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001364:	f006 f876 	bl	8007454 <HAL_UARTEx_SetTxFifoThreshold>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800136e:	f7ff fc51 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001376:	f006 f8ab 	bl	80074d0 <HAL_UARTEx_SetRxFifoThreshold>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001380:	f7ff fc48 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_USART1_UART_Init+0x90>)
 8001386:	f006 f82d 	bl	80073e4 <HAL_UARTEx_DisableFifoMode>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001390:	f7ff fc40 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000414 	.word	0x20000414
 800139c:	40013800 	.word	0x40013800

080013a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b096      	sub	sp, #88	; 0x58
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2238      	movs	r2, #56	; 0x38
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f006 f90f 	bl	80075e4 <memset>
  if(uartHandle->Instance==USART1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_UART_MspInit+0x94>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d12d      	bne.n	800142c <HAL_UART_MspInit+0x8c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013d4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80013d8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fce6 	bl	8004db0 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ea:	f7ff fc13 	bl	8000c14 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013f2:	f7ff ff70 	bl	80012d6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2002      	movs	r0, #2
 80013f8:	f7ff ff55 	bl	80012a6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800140c:	2307      	movs	r3, #7
 800140e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001414:	4619      	mov	r1, r3
 8001416:	4808      	ldr	r0, [pc, #32]	; (8001438 <HAL_UART_MspInit+0x98>)
 8001418:	f000 fb3c 	bl	8001a94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2103      	movs	r1, #3
 8001420:	2024      	movs	r0, #36	; 0x24
 8001422:	f000 f978 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001426:	2024      	movs	r0, #36	; 0x24
 8001428:	f000 f98f 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800142c:	bf00      	nop
 800142e:	3758      	adds	r7, #88	; 0x58
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40013800 	.word	0x40013800
 8001438:	48000400 	.word	0x48000400

0800143c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800143e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001440:	f7ff f818 	bl	8000474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	; (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800146a:	f006 f8c3 	bl	80075f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146e:	f7ff fa83 	bl	8000978 <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   r0, =_estack
 8001474:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001480:	08007748 	.word	0x08007748
  ldr r2, =_sbss
 8001484:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001488:	200004c4 	.word	0x200004c4

0800148c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f930 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014a0:	f003 faa8 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_Init+0x3c>)
 80014a8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f810 	bl	80014d0 <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fdda 	bl	8001074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <HAL_InitTick+0x6c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d024      	beq.n	800152e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014e4:	f003 fa86 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_InitTick+0x6c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f932 	bl	8001766 <HAL_SYSTICK_Config>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10f      	bne.n	8001528 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b0f      	cmp	r3, #15
 800150c:	d809      	bhi.n	8001522 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150e:	2200      	movs	r2, #0
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001516:	f000 f8fe 	bl	8001716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_InitTick+0x70>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e007      	b.n	8001532 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e004      	b.n	8001532 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e001      	b.n	8001532 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000010 	.word	0x20000010
 8001540:	2000000c 	.word	0x2000000c

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000010 	.word	0x20000010
 8001564:	200004a8 	.word	0x200004a8

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4906      	ldr	r1, [pc, #24]	; (8001600 <__NVIC_EnableIRQ+0x34>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e0:	f7ff ff90 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff2d 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff44 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff92 	bl	8001658 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff61 	bl	8001604 <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff37 	bl	80015cc <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa4 	bl	80016bc <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e04f      	b.n	8001830 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e040      	b.n	8001830 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 020e 	bic.w	r2, r2, #14
 80017bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f003 021c 	and.w	r2, r3, #28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00c      	beq.n	800181e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001812:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800181c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d005      	beq.n	800185e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2204      	movs	r2, #4
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e047      	b.n	80018ee <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 020e 	bic.w	r2, r2, #14
 800186c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f003 021c 	and.w	r2, r3, #28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00c      	beq.n	80018ce <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
    }
  }
  return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
	...

08001914 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191e:	607b      	str	r3, [r7, #4]
  error = (FLASH->C2SR & FLASH_FLAG_SR_ERRORS);

  /* Clear Current operation */
  CLEAR_BIT(FLASH->C2CR, pFlash.ProcedureOnGoing);
#else
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001920:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001928:	4013      	ands	r3, r2
 800192a:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800192c:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	43db      	mvns	r3, r3
 8001936:	493f      	ldr	r1, [pc, #252]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 8001938:	4013      	ands	r3, r2
 800193a:	614b      	str	r3, [r1, #20]
#endif

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_FLASH_IRQHandler+0x128>)
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	e008      	b.n	8001962 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_MASSERASE | FLASH_TYPEERASE_PAGES)) != 0U)
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0306 	and.w	r3, r3, #6
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased (0 for mass erase) */
    param = pFlash.Page;
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d022      	beq.n	80019ae <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 8001972:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_FLASH_IRQHandler+0x7a>
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001988:	492a      	ldr	r1, [pc, #168]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 800198a:	4313      	orrs	r3, r2
 800198c:	618b      	str	r3, [r1, #24]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_FLASH_IRQHandler+0x8e>
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80019a0:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f852 	bl	8001a52 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d124      	bne.n	8001a04 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 80019bc:	2201      	movs	r2, #1
 80019be:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d117      	bne.n	80019f8 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019d0:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	3301      	adds	r3, #1
 80019e0:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019e2:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f83b 	bl	8001a64 <FLASH_PageErase>
 80019ee:	e006      	b.n	80019fe <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	e002      	b.n	80019fe <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f81e 	bl	8001a40 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <HAL_FLASH_IRQHandler+0x116>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR | FLASH_IT_ECCC);
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 8001a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_FLASH_IRQHandler+0x120>)
 8001a1e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a22:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_FLASH_IRQHandler+0x124>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	58004000 	.word	0x58004000
 8001a38:	200004ac 	.word	0x200004ac
 8001a3c:	00040001 	.word	0x00040001

08001a40 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <FLASH_PageErase+0x2c>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <FLASH_PageErase+0x2c>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6153      	str	r3, [r2, #20]
#endif
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	58004000 	.word	0x58004000

08001a94 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa2:	e140      	b.n	8001d26 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8132 	beq.w	8001d20 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d005      	beq.n	8001ad4 <HAL_GPIO_Init+0x40>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d130      	bne.n	8001b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 0201 	and.w	r2, r3, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d017      	beq.n	8001b72 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d123      	bne.n	8001bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3208      	adds	r2, #8
 8001bc0:	6939      	ldr	r1, [r7, #16]
 8001bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0203 	and.w	r2, r3, #3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 808c 	beq.w	8001d20 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c08:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_GPIO_Init+0x2b0>)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	2207      	movs	r2, #7
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c32:	d00d      	beq.n	8001c50 <HAL_GPIO_Init+0x1bc>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a44      	ldr	r2, [pc, #272]	; (8001d48 <HAL_GPIO_Init+0x2b4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x1b8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <HAL_GPIO_Init+0x2b8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_GPIO_Init+0x1b4>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x1be>
 8001c48:	2307      	movs	r3, #7
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x1be>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x1be>
 8001c50:	2300      	movs	r3, #0
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c62:	4938      	ldr	r1, [pc, #224]	; (8001d44 <HAL_GPIO_Init+0x2b0>)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c70:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c94:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cbe:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cca:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001cea:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <HAL_GPIO_Init+0x2bc>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f47f aeb7 	bne.w	8001aa4 <HAL_GPIO_Init+0x10>
  }
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	48000800 	.word	0x48000800
 8001d50:	58000800 	.word	0x58000800

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
 8001d60:	4613      	mov	r3, r2
 8001d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0a7      	b.n	8001ee6 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12c      	bne.n	8001dfc <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a50      	ldr	r2, [pc, #320]	; (8001ef0 <HAL_I2C_Init+0x16c>)
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <HAL_I2C_Init+0x170>)
 8001db4:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4f      	ldr	r2, [pc, #316]	; (8001ef8 <HAL_I2C_Init+0x174>)
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_I2C_Init+0x178>)
 8001dc0:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_I2C_Init+0x17c>)
 8001dc6:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a4e      	ldr	r2, [pc, #312]	; (8001f04 <HAL_I2C_Init+0x180>)
 8001dcc:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <HAL_I2C_Init+0x184>)
 8001dd2:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_I2C_Init+0x188>)
 8001dd8:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <HAL_I2C_Init+0x18c>)
 8001dde:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_I2C_Init+0x190>)
 8001de4:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a49      	ldr	r2, [pc, #292]	; (8001f18 <HAL_I2C_Init+0x194>)
 8001df2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	; 0x24
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	e006      	b.n	8001e58 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d104      	bne.n	8001e6a <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69d9      	ldr	r1, [r3, #28]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	080022f7 	.word	0x080022f7
 8001ef4:	08002309 	.word	0x08002309
 8001ef8:	0800231b 	.word	0x0800231b
 8001efc:	0800232d 	.word	0x0800232d
 8001f00:	08002359 	.word	0x08002359
 8001f04:	0800236b 	.word	0x0800236b
 8001f08:	0800237d 	.word	0x0800237d
 8001f0c:	0800238f 	.word	0x0800238f
 8001f10:	080023a1 	.word	0x080023a1
 8001f14:	0800233f 	.word	0x0800233f
 8001f18:	08000701 	.word	0x08000701

08001f1c <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	460b      	mov	r3, r1
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <HAL_I2C_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e07e      	b.n	8002042 <HAL_I2C_RegisterCallback+0x126>
  }

  if (HAL_I2C_STATE_READY == hi2c->State)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d151      	bne.n	8001ff4 <HAL_I2C_RegisterCallback+0xd8>
  {
    switch (CallbackID)
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	2b0a      	cmp	r3, #10
 8001f54:	d845      	bhi.n	8001fe2 <HAL_I2C_RegisterCallback+0xc6>
 8001f56:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <HAL_I2C_RegisterCallback+0x40>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001f89 	.word	0x08001f89
 8001f60:	08001f91 	.word	0x08001f91
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	08001fa1 	.word	0x08001fa1
 8001f6c:	08001fa9 	.word	0x08001fa9
 8001f70:	08001fb1 	.word	0x08001fb1
 8001f74:	08001fb9 	.word	0x08001fb9
 8001f78:	08001fc1 	.word	0x08001fc1
 8001f7c:	08001fc9 	.word	0x08001fc9
 8001f80:	08001fd1 	.word	0x08001fd1
 8001f84:	08001fd9 	.word	0x08001fd9
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8001f8e:	e057      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8001f96:	e053      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8001f9e:	e04f      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8001fa6:	e04b      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8001fae:	e047      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8001fb6:	e043      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8001fbe:	e03f      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8001fc6:	e03b      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8001fce:	e037      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8001fd6:	e033      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8001fe0:	e02e      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
        break;
 8001ff2:	e025      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d117      	bne.n	8002030 <HAL_I2C_RegisterCallback+0x114>
  {
    switch (CallbackID)
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	2b09      	cmp	r3, #9
 8002004:	d002      	beq.n	800200c <HAL_I2C_RegisterCallback+0xf0>
 8002006:	2b0a      	cmp	r3, #10
 8002008:	d004      	beq.n	8002014 <HAL_I2C_RegisterCallback+0xf8>
 800200a:	e008      	b.n	800201e <HAL_I2C_RegisterCallback+0x102>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8002012:	e015      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800201c:	e010      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
        break;
 800202e:	e007      	b.n	8002040 <HAL_I2C_RegisterCallback+0x124>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	460b      	mov	r3, r1
 800205a:	817b      	strh	r3, [r7, #10]
 800205c:	4613      	mov	r3, r2
 800205e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b20      	cmp	r3, #32
 800206a:	d153      	bne.n	8002114 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207a:	d101      	bne.n	8002080 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
 800207e:	e04a      	b.n	8002116 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_I2C_Master_Transmit_IT+0x42>
 800208a:	2302      	movs	r3, #2
 800208c:	e043      	b.n	8002116 <HAL_I2C_Master_Transmit_IT+0xca>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2221      	movs	r2, #33	; 0x21
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2210      	movs	r2, #16
 80020a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	893a      	ldrh	r2, [r7, #8]
 80020b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_I2C_Master_Transmit_IT+0xd4>)
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a18      	ldr	r2, [pc, #96]	; (8002124 <HAL_I2C_Master_Transmit_IT+0xd8>)
 80020c2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2bff      	cmp	r3, #255	; 0xff
 80020cc:	d906      	bls.n	80020dc <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	22ff      	movs	r2, #255	; 0xff
 80020d2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80020d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e007      	b.n	80020ec <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	8979      	ldrh	r1, [r7, #10]
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_I2C_Master_Transmit_IT+0xdc>)
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f001 f9b6 	bl	800346c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002108:	2101      	movs	r1, #1
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f001 f9de 	bl	80034cc <I2C_Enable_IRQ>

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	ffff0000 	.word	0xffff0000
 8002124:	080023b3 	.word	0x080023b3
 8002128:	80002000 	.word	0x80002000

0800212c <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	461a      	mov	r2, r3
 8002138:	460b      	mov	r3, r1
 800213a:	817b      	strh	r3, [r7, #10]
 800213c:	4613      	mov	r3, r2
 800213e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b20      	cmp	r3, #32
 800214a:	d153      	bne.n	80021f4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800215a:	d101      	bne.n	8002160 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
 800215e:	e04a      	b.n	80021f6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_I2C_Master_Receive_IT+0x42>
 800216a:	2302      	movs	r3, #2
 800216c:	e043      	b.n	80021f6 <HAL_I2C_Master_Receive_IT+0xca>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2222      	movs	r2, #34	; 0x22
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2210      	movs	r2, #16
 8002182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	893a      	ldrh	r2, [r7, #8]
 8002196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_I2C_Master_Receive_IT+0xd4>)
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_I2C_Master_Receive_IT+0xd8>)
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d906      	bls.n	80021bc <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80021b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e007      	b.n	80021cc <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	8979      	ldrh	r1, [r7, #10]
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_I2C_Master_Receive_IT+0xdc>)
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f001 f946 	bl	800346c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021e8:	2102      	movs	r1, #2
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f001 f96e 	bl	80034cc <I2C_Enable_IRQ>

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	ffff0000 	.word	0xffff0000
 8002204:	080023b3 	.word	0x080023b3
 8002208:	80002400 	.word	0x80002400

0800220c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
  }
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00f      	beq.n	8002282 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002280:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00f      	beq.n	80022ac <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f043 0208 	orr.w	r2, r3, #8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00f      	beq.n	80022d6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f043 0202 	orr.w	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022d4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 030b 	and.w	r3, r3, #11
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 ff85 	bl	80031f8 <I2C_ITError>
  }
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	70fb      	strb	r3, [r7, #3]
 800234a:	4613      	mov	r3, r2
 800234c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af02      	add	r7, sp, #8
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <I2C_Master_ISR_IT+0x1e>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e108      	b.n	80025e2 <I2C_Master_ISR_IT+0x230>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d012      	beq.n	8002408 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fff2 	bl	80033ea <I2C_Flush_TXDR>
 8002406:	e0d9      	b.n	80025bc <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d022      	beq.n	8002458 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01d      	beq.n	8002458 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0304 	bic.w	r3, r3, #4
 8002422:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002456:	e0b1      	b.n	80025bc <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01d      	beq.n	800249e <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002468:	2b00      	cmp	r3, #0
 800246a:	d018      	beq.n	800249e <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800249c:	e08e      	b.n	80025bc <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05c      	beq.n	8002562 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d057      	beq.n	8002562 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d040      	beq.n	800253e <I2C_Master_ISR_IT+0x18c>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d13c      	bne.n	800253e <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2bff      	cmp	r3, #255	; 0xff
 80024da:	d90e      	bls.n	80024fa <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	22ff      	movs	r2, #255	; 0xff
 80024e0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	8a79      	ldrh	r1, [r7, #18]
 80024ea:	2300      	movs	r3, #0
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 ffba 	bl	800346c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f8:	e032      	b.n	8002560 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800250c:	d00b      	beq.n	8002526 <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002518:	8a79      	ldrh	r1, [r7, #18]
 800251a:	2000      	movs	r0, #0
 800251c:	9000      	str	r0, [sp, #0]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 ffa4 	bl	800346c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002524:	e01c      	b.n	8002560 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	b2da      	uxtb	r2, r3
 800252c:	8a79      	ldrh	r1, [r7, #18]
 800252e:	2300      	movs	r3, #0
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 ff98 	bl	800346c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800253c:	e010      	b.n	8002560 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800254c:	d003      	beq.n	8002556 <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fb88 	bl	8002c64 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002554:	e032      	b.n	80025bc <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fe4d 	bl	80031f8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800255e:	e02d      	b.n	80025bc <I2C_Master_ISR_IT+0x20a>
 8002560:	e02c      	b.n	80025bc <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d027      	beq.n	80025bc <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002572:	2b00      	cmp	r3, #0
 8002574:	d022      	beq.n	80025bc <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d119      	bne.n	80025b4 <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800258e:	d015      	beq.n	80025bc <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002598:	d108      	bne.n	80025ac <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e007      	b.n	80025bc <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fb59 	bl	8002c64 <I2C_ITMasterSeqCplt>
 80025b2:	e003      	b.n	80025bc <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fe1e 	bl	80031f8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fbe4 	bl	8002da0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <I2C_Slave_ISR_IT+0x24>
 800260a:	2302      	movs	r3, #2
 800260c:	e0e1      	b.n	80027d2 <I2C_Slave_ISR_IT+0x1e8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800262a:	6939      	ldr	r1, [r7, #16]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 fc83 	bl	8002f38 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d04b      	beq.n	80026d4 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002642:	2b00      	cmp	r3, #0
 8002644:	d046      	beq.n	80026d4 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d128      	bne.n	80026a2 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b28      	cmp	r3, #40	; 0x28
 800265a:	d108      	bne.n	800266e <I2C_Slave_ISR_IT+0x84>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002662:	d104      	bne.n	800266e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002664:	6939      	ldr	r1, [r7, #16]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fd70 	bl	800314c <I2C_ITListenCplt>
 800266c:	e031      	b.n	80026d2 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b29      	cmp	r3, #41	; 0x29
 8002678:	d10e      	bne.n	8002698 <I2C_Slave_ISR_IT+0xae>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002680:	d00a      	beq.n	8002698 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2210      	movs	r2, #16
 8002688:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fead 	bl	80033ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fb26 	bl	8002ce2 <I2C_ITSlaveSeqCplt>
 8002696:	e01c      	b.n	80026d2 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80026a0:	e08f      	b.n	80027c2 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2210      	movs	r2, #16
 80026a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f043 0204 	orr.w	r2, r3, #4
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <I2C_Slave_ISR_IT+0xda>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c2:	d17e      	bne.n	80027c2 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	4619      	mov	r1, r3
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fd94 	bl	80031f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80026d0:	e077      	b.n	80027c2 <I2C_Slave_ISR_IT+0x1d8>
 80026d2:	e076      	b.n	80027c2 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02f      	beq.n	800273e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d02a      	beq.n	800273e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d018      	beq.n	8002724 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d14b      	bne.n	80027c6 <I2C_Slave_ISR_IT+0x1dc>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002734:	d047      	beq.n	80027c6 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fad3 	bl	8002ce2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800273c:	e043      	b.n	80027c6 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002752:	6939      	ldr	r1, [r7, #16]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fa01 	bl	8002b5c <I2C_ITAddrCplt>
 800275a:	e035      	b.n	80027c8 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d030      	beq.n	80027c8 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02b      	beq.n	80027c8 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d018      	beq.n	80027ac <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
 80027aa:	e00d      	b.n	80027c8 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b2:	d002      	beq.n	80027ba <I2C_Slave_ISR_IT+0x1d0>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fa91 	bl	8002ce2 <I2C_ITSlaveSeqCplt>
 80027c0:	e002      	b.n	80027c8 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80027c6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b088      	sub	sp, #32
 80027de:	af02      	add	r7, sp, #8
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <I2C_Master_ISR_DMA+0x1a>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e0d9      	b.n	80029a8 <I2C_Master_ISR_DMA+0x1ce>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800280c:	2b00      	cmp	r3, #0
 800280e:	d011      	beq.n	8002834 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2210      	movs	r2, #16
 8002816:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002824:	2120      	movs	r1, #32
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fe50 	bl	80034cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fddc 	bl	80033ea <I2C_Flush_TXDR>
 8002832:	e0b4      	b.n	800299e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b00      	cmp	r3, #0
 800283c:	d071      	beq.n	8002922 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002844:	2b00      	cmp	r3, #0
 8002846:	d06c      	beq.n	8002922 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002856:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04e      	beq.n	8002900 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2bff      	cmp	r3, #255	; 0xff
 8002878:	d906      	bls.n	8002888 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	22ff      	movs	r2, #255	; 0xff
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e010      	b.n	80028aa <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800289a:	d003      	beq.n	80028a4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e002      	b.n	80028aa <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80028a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	8a79      	ldrh	r1, [r7, #18]
 80028b2:	2300      	movs	r3, #0
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fdd7 	bl	800346c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b22      	cmp	r3, #34	; 0x22
 80028da:	d108      	bne.n	80028ee <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80028ec:	e057      	b.n	800299e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80028fe:	e04e      	b.n	800299e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800290e:	d003      	beq.n	8002918 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f9a7 	bl	8002c64 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002916:	e042      	b.n	800299e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fc6c 	bl	80031f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002920:	e03d      	b.n	800299e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d028      	beq.n	800297e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002932:	2b00      	cmp	r3, #0
 8002934:	d023      	beq.n	800297e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d119      	bne.n	8002974 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800294e:	d025      	beq.n	800299c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002958:	d108      	bne.n	800296c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002968:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800296a:	e017      	b.n	800299c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f979 	bl	8002c64 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002972:	e013      	b.n	800299c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fc3e 	bl	80031f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800297c:	e00e      	b.n	800299c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa03 	bl	8002da0 <I2C_ITMasterCplt>
 800299a:	e000      	b.n	800299e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800299c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <I2C_Slave_ISR_DMA+0x24>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e0bf      	b.n	8002b54 <I2C_Slave_ISR_DMA+0x1a4>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 faa0 	bl	8002f38 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8095 	beq.w	8002b2e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 808f 	beq.w	8002b2e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d07d      	beq.n	8002b20 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00c      	beq.n	8002a46 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002a64:	2301      	movs	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d128      	bne.n	8002ac0 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b28      	cmp	r3, #40	; 0x28
 8002a78:	d108      	bne.n	8002a8c <I2C_Slave_ISR_DMA+0xdc>
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a80:	d104      	bne.n	8002a8c <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fb61 	bl	800314c <I2C_ITListenCplt>
 8002a8a:	e048      	b.n	8002b1e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b29      	cmp	r3, #41	; 0x29
 8002a96:	d10e      	bne.n	8002ab6 <I2C_Slave_ISR_DMA+0x106>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a9e:	d00a      	beq.n	8002ab6 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fc9e 	bl	80033ea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f917 	bl	8002ce2 <I2C_ITSlaveSeqCplt>
 8002ab4:	e033      	b.n	8002b1e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2210      	movs	r2, #16
 8002abc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002abe:	e034      	b.n	8002b2a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <I2C_Slave_ISR_DMA+0x13a>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae8:	d11f      	bne.n	8002b2a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b21      	cmp	r3, #33	; 0x21
 8002aee:	d002      	beq.n	8002af6 <I2C_Slave_ISR_DMA+0x146>
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b29      	cmp	r3, #41	; 0x29
 8002af4:	d103      	bne.n	8002afe <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2221      	movs	r2, #33	; 0x21
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
 8002afc:	e008      	b.n	8002b10 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b22      	cmp	r3, #34	; 0x22
 8002b02:	d002      	beq.n	8002b0a <I2C_Slave_ISR_DMA+0x15a>
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b2a      	cmp	r3, #42	; 0x2a
 8002b08:	d102      	bne.n	8002b10 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2222      	movs	r2, #34	; 0x22
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	4619      	mov	r1, r3
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fb6e 	bl	80031f8 <I2C_ITError>
      if (treatdmanack == 1U)
 8002b1c:	e005      	b.n	8002b2a <I2C_Slave_ISR_DMA+0x17a>
 8002b1e:	e004      	b.n	8002b2a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2210      	movs	r2, #16
 8002b26:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b28:	e00f      	b.n	8002b4a <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8002b2a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b2c:	e00d      	b.n	8002b4a <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f809 	bl	8002b5c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b72:	2b28      	cmp	r3, #40	; 0x28
 8002b74:	d16a      	bne.n	8002c4c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b94:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002bb0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d138      	bne.n	8002c2c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	09db      	lsrs	r3, r3, #7
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	89bb      	ldrh	r3, [r7, #12]
 8002bc2:	4053      	eors	r3, r2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	f003 0306 	and.w	r3, r3, #6
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11c      	bne.n	8002c08 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d13b      	bne.n	8002c5c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2208      	movs	r2, #8
 8002bf0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfe:	89ba      	ldrh	r2, [r7, #12]
 8002c00:	7bf9      	ldrb	r1, [r7, #15]
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c06:	e029      	b.n	8002c5c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002c08:	893b      	ldrh	r3, [r7, #8]
 8002c0a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fcc5 	bl	80035a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c22:	89ba      	ldrh	r2, [r7, #12]
 8002c24:	7bf9      	ldrb	r1, [r7, #15]
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
}
 8002c2a:	e017      	b.n	8002c5c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fcb5 	bl	80035a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c42:	89ba      	ldrh	r2, [r7, #12]
 8002c44:	7bf9      	ldrb	r1, [r7, #15]
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
}
 8002c4a:	e007      	b.n	8002c5c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2208      	movs	r2, #8
 8002c52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b21      	cmp	r3, #33	; 0x21
 8002c7e:	d116      	bne.n	8002cae <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2211      	movs	r2, #17
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c94:	2101      	movs	r1, #1
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fc82 	bl	80035a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cac:	e015      	b.n	8002cda <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2212      	movs	r2, #18
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fc6b 	bl	80035a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e00c      	b.n	8002d30 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b29      	cmp	r3, #41	; 0x29
 8002d3a:	d113      	bne.n	8002d64 <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2228      	movs	r2, #40	; 0x28
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2221      	movs	r2, #33	; 0x21
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fc27 	bl	80035a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d62:	e018      	b.n	8002d96 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d6e:	d112      	bne.n	8002d96 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2228      	movs	r2, #40	; 0x28
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2222      	movs	r2, #34	; 0x22
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d7e:	2102      	movs	r1, #2
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fc0d 	bl	80035a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2220      	movs	r2, #32
 8002db4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b21      	cmp	r3, #33	; 0x21
 8002dc0:	d107      	bne.n	8002dd2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fbeb 	bl	80035a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2211      	movs	r2, #17
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd0:	e00c      	b.n	8002dec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b22      	cmp	r3, #34	; 0x22
 8002ddc:	d106      	bne.n	8002dec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dde:	2102      	movs	r1, #2
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fbdd 	bl	80035a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2212      	movs	r2, #18
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <I2C_ITMasterCplt+0x190>)
 8002df8:	400b      	ands	r3, r1
 8002dfa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <I2C_ITMasterCplt+0x194>)
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2210      	movs	r2, #16
 8002e18:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b60      	cmp	r3, #96	; 0x60
 8002e30:	d10a      	bne.n	8002e48 <I2C_ITMasterCplt+0xa8>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002e46:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 face 	bl	80033ea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b60      	cmp	r3, #96	; 0x60
 8002e5e:	d002      	beq.n	8002e66 <I2C_ITMasterCplt+0xc6>
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9c3 	bl	80031f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e72:	e058      	b.n	8002f26 <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b21      	cmp	r3, #33	; 0x21
 8002e7e:	d126      	bne.n	8002ece <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d10c      	bne.n	8002eb4 <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
}
 8002eb2:	e038      	b.n	8002f26 <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
}
 8002ecc:	e02b      	b.n	8002f26 <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b22      	cmp	r3, #34	; 0x22
 8002ed8:	d125      	bne.n	8002f26 <I2C_ITMasterCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d10c      	bne.n	8002f0e <I2C_ITMasterCplt+0x16e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
}
 8002f0c:	e00b      	b.n	8002f26 <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	fe00e800 	.word	0xfe00e800
 8002f34:	ffff0000 	.word	0xffff0000

08002f38 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f54:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b21      	cmp	r3, #33	; 0x21
 8002f62:	d002      	beq.n	8002f6a <I2C_ITSlaveCplt+0x32>
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b29      	cmp	r3, #41	; 0x29
 8002f68:	d108      	bne.n	8002f7c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f6a:	f248 0101 	movw	r1, #32769	; 0x8001
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fb16 	bl	80035a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2221      	movs	r2, #33	; 0x21
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
 8002f7a:	e00d      	b.n	8002f98 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	d002      	beq.n	8002f88 <I2C_ITSlaveCplt+0x50>
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b2a      	cmp	r3, #42	; 0x2a
 8002f86:	d107      	bne.n	8002f98 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f88:	f248 0102 	movw	r1, #32770	; 0x8002
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fb07 	bl	80035a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2222      	movs	r2, #34	; 0x22
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b64      	ldr	r3, [pc, #400]	; (8003144 <I2C_ITSlaveCplt+0x20c>)
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fa16 	bl	80033ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fd6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01f      	beq.n	8003020 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fee:	e017      	b.n	8003020 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003008:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	b29a      	uxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d020      	beq.n	800306c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f043 0204 	orr.w	r2, r3, #4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8aa 	bl	80031f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b28      	cmp	r3, #40	; 0x28
 80030ae:	d144      	bne.n	800313a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f84a 	bl	800314c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030b8:	e03f      	b.n	800313a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030c2:	d015      	beq.n	80030f0 <I2C_ITSlaveCplt+0x1b8>
    I2C_ITSlaveSeqCplt(hi2c);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fe0c 	bl	8002ce2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <I2C_ITSlaveCplt+0x210>)
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
}
 80030ee:	e024      	b.n	800313a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b22      	cmp	r3, #34	; 0x22
 80030fa:	d10f      	bne.n	800311c <I2C_ITSlaveCplt+0x1e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
}
 800311a:	e00e      	b.n	800313a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	fe00e800 	.word	0xfe00e800
 8003148:	ffff0000 	.word	0xffff0000

0800314c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <I2C_ITListenCplt+0xa8>)
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d022      	beq.n	80031c8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031c8:	f248 0103 	movw	r1, #32771	; 0x8003
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9e7 	bl	80035a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2210      	movs	r2, #16
 80031d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	ffff0000 	.word	0xffff0000

080031f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a5d      	ldr	r2, [pc, #372]	; (800338c <I2C_ITError+0x194>)
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b28      	cmp	r3, #40	; 0x28
 800322e:	d005      	beq.n	800323c <I2C_ITError+0x44>
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b29      	cmp	r3, #41	; 0x29
 8003234:	d002      	beq.n	800323c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b2a      	cmp	r3, #42	; 0x2a
 800323a:	d10b      	bne.n	8003254 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800323c:	2103      	movs	r1, #3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f9ae 	bl	80035a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2228      	movs	r2, #40	; 0x28
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a50      	ldr	r2, [pc, #320]	; (8003390 <I2C_ITError+0x198>)
 8003250:	635a      	str	r2, [r3, #52]	; 0x34
 8003252:	e011      	b.n	8003278 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003254:	f248 0103 	movw	r1, #32771	; 0x8003
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f9a1 	bl	80035a0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b60      	cmp	r3, #96	; 0x60
 8003268:	d003      	beq.n	8003272 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	2b00      	cmp	r3, #0
 8003284:	d039      	beq.n	80032fa <I2C_ITError+0x102>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b11      	cmp	r3, #17
 800328a:	d002      	beq.n	8003292 <I2C_ITError+0x9a>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b21      	cmp	r3, #33	; 0x21
 8003290:	d133      	bne.n	80032fa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032a0:	d107      	bne.n	80032b2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fb1e 	bl	80018f8 <HAL_DMA_GetState>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d017      	beq.n	80032f2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	4a33      	ldr	r2, [pc, #204]	; (8003394 <I2C_ITError+0x19c>)
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe faaf 	bl	800183a <HAL_DMA_Abort_IT>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d04d      	beq.n	800337e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032ec:	4610      	mov	r0, r2
 80032ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032f0:	e045      	b.n	800337e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f850 	bl	8003398 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032f8:	e041      	b.n	800337e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d039      	beq.n	8003376 <I2C_ITError+0x17e>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b12      	cmp	r3, #18
 8003306:	d002      	beq.n	800330e <I2C_ITError+0x116>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b22      	cmp	r3, #34	; 0x22
 800330c:	d133      	bne.n	8003376 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331c:	d107      	bne.n	800332e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fae0 	bl	80018f8 <HAL_DMA_GetState>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d017      	beq.n	800336e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <I2C_ITError+0x19c>)
 8003344:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fa71 	bl	800183a <HAL_DMA_Abort_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d011      	beq.n	8003382 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003368:	4610      	mov	r0, r2
 800336a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800336c:	e009      	b.n	8003382 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f812 	bl	8003398 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003374:	e005      	b.n	8003382 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f80e 	bl	8003398 <I2C_TreatErrorCallback>
  }
}
 800337c:	e002      	b.n	8003384 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003382:	bf00      	nop
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	ffff0000 	.word	0xffff0000
 8003390:	080025eb 	.word	0x080025eb
 8003394:	08003431 	.word	0x08003431

08003398 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b60      	cmp	r3, #96	; 0x60
 80033aa:	d10f      	bne.n	80033cc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033ca:	e00a      	b.n	80033e2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d103      	bne.n	8003408 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2200      	movs	r2, #0
 8003406:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d007      	beq.n	8003426 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	619a      	str	r2, [r3, #24]
  }
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	2200      	movs	r2, #0
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	2200      	movs	r2, #0
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff ff9a 	bl	8003398 <I2C_TreatErrorCallback>
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	4613      	mov	r3, r2
 800347c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003484:	7a7b      	ldrb	r3, [r7, #9]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	4313      	orrs	r3, r2
 8003496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800349a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	0d5b      	lsrs	r3, r3, #21
 80034a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <I2C_TransferConfig+0x5c>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	43db      	mvns	r3, r3
 80034b0:	ea02 0103 	and.w	r1, r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	03ff63ff 	.word	0x03ff63ff

080034cc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	4a2d      	ldr	r2, [pc, #180]	; (8003598 <I2C_Enable_IRQ+0xcc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80034ea:	4a2c      	ldr	r2, [pc, #176]	; (800359c <I2C_Enable_IRQ+0xd0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d11d      	bne.n	800352c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da03      	bge.n	8003500 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80034fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	2b10      	cmp	r3, #16
 8003504:	d103      	bne.n	800350e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800350c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	2b20      	cmp	r3, #32
 8003512:	d103      	bne.n	800351c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800351a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800351c:	887b      	ldrh	r3, [r7, #2]
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d12c      	bne.n	800357c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003528:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800352a:	e027      	b.n	800357c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800352c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	da03      	bge.n	800353c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800353a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800354c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800355e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	2b10      	cmp	r3, #16
 8003564:	d103      	bne.n	800356e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800356c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	2b20      	cmp	r3, #32
 8003572:	d103      	bne.n	800357c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f043 0320 	orr.w	r3, r3, #32
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6819      	ldr	r1, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	080027db 	.word	0x080027db
 800359c:	080029b1 	.word	0x080029b1

080035a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00f      	beq.n	80035da <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80035c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035ce:	2b28      	cmp	r3, #40	; 0x28
 80035d0:	d003      	beq.n	80035da <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80035d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00f      	beq.n	8003604 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80035ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035f8:	2b28      	cmp	r3, #40	; 0x28
 80035fa:	d003      	beq.n	8003604 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003602:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da03      	bge.n	8003614 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003612:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	2b10      	cmp	r3, #16
 8003618:	d103      	bne.n	8003622 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003620:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	2b20      	cmp	r3, #32
 8003626:	d103      	bne.n	8003630 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f043 0320 	orr.w	r3, r3, #32
 800362e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d103      	bne.n	800363e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800363c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43da      	mvns	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b20      	cmp	r3, #32
 800366e:	d138      	bne.n	80036e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800367a:	2302      	movs	r3, #2
 800367c:	e032      	b.n	80036e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2224      	movs	r2, #36	; 0x24
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b20      	cmp	r3, #32
 8003702:	d139      	bne.n	8003778 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800370e:	2302      	movs	r3, #2
 8003710:	e033      	b.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2224      	movs	r2, #36	; 0x24
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003740:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003778:	2302      	movs	r3, #2
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM0PLUS)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003790:	4b22      	ldr	r3, [pc, #136]	; (800381c <HAL_IPCC_TX_IRQHandler+0x98>)
 8003792:	60fb      	str	r3, [r7, #12]
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	43db      	mvns	r3, r3
 800379a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800379e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	43db      	mvns	r3, r3
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4013      	ands	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80037ae:	e02c      	b.n	800380a <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3310      	adds	r3, #16
 80037b8:	2201      	movs	r2, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01c      	beq.n	8003804 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	3306      	adds	r3, #6
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	3306      	adds	r3, #6
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	6939      	ldr	r1, [r7, #16]
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4013      	ands	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	3301      	adds	r3, #1
 8003808:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1cf      	bne.n	80037b0 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	58000c00 	.word	0x58000c00

08003820 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM0PLUS)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800382c:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_IPCC_RX_IRQHandler+0x90>)
 800382e:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_IPCC_RX_IRQHandler+0x94>)
 8003832:	613b      	str	r3, [r7, #16]
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	43db      	mvns	r3, r3
 800383a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383e:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	4013      	ands	r3, r2
 8003848:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800384a:	e029      	b.n	80038a0 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	2201      	movs	r2, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01a      	beq.n	800389a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	431a      	orrs	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	69b9      	ldr	r1, [r7, #24]
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	4013      	ands	r3, r2
 8003898:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3301      	adds	r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1d2      	bne.n	800384c <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 80038a6:	bf00      	nop
 80038a8:	bf00      	nop
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	58000c00 	.word	0x58000c00
 80038b4:	58000c10 	.word	0x58000c10

080038b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	58000400 	.word	0x58000400

080038d4 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <LL_PWR_EnableBootC2+0x18>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a03      	ldr	r2, [pc, #12]	; (80038ec <LL_PWR_EnableBootC2+0x18>)
 80038de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e2:	60d3      	str	r3, [r2, #12]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	58000400 	.word	0x58000400

080038f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <HAL_PWREx_GetVoltageRange+0x14>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	58000400 	.word	0x58000400

08003908 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8003910:	f7ff ffe0 	bl	80038d4 <LL_PWR_EnableBootC2>
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <LL_PWR_IsEnabledBkUpAccess>:
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d101      	bne.n	8003932 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	58000400 	.word	0x58000400

08003940 <LL_RCC_HSE_EnableTcxo>:
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <LL_RCC_HSE_DisableTcxo>:
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398a:	d101      	bne.n	8003990 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <LL_RCC_HSE_Enable>:
{
 800399a:	b480      	push	{r7}
 800399c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_HSE_Disable>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <LL_RCC_HSE_IsReady>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e4:	d101      	bne.n	80039ea <LL_RCC_HSE_IsReady+0x18>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <LL_RCC_HSE_IsReady+0x1a>
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <LL_RCC_HSI_Enable>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80039f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <LL_RCC_HSI_Disable>:
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <LL_RCC_HSI_IsReady>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3e:	d101      	bne.n	8003a44 <LL_RCC_HSI_IsReady+0x18>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <LL_RCC_HSI_IsReady+0x1a>
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <LL_RCC_HSI_SetCalibTrimming>:
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	061b      	lsls	r3, r3, #24
 8003a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <LL_RCC_LSE_IsReady>:
{
 8003a76:	b480      	push	{r7}
 8003a78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d101      	bne.n	8003a8e <LL_RCC_LSE_IsReady+0x18>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <LL_RCC_LSE_IsReady+0x1a>
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <LL_RCC_LSI_Enable>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <LL_RCC_LSI_Disable>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_LSI_IsReady>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d101      	bne.n	8003af0 <LL_RCC_LSI_IsReady+0x18>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_RCC_LSI_IsReady+0x1a>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <LL_RCC_MSI_Enable>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <LL_RCC_MSI_Disable>:
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	6013      	str	r3, [r2, #0]
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_MSI_IsReady>:
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d101      	bne.n	8003b48 <LL_RCC_MSI_IsReady+0x16>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <LL_RCC_MSI_IsReady+0x18>
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d101      	bne.n	8003b68 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <LL_RCC_MSI_GetRange>:
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_SetSysClkSource>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_GetSysClkSource>:
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_SetAHBPrescaler>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <LL_C2_RCC_SetAHBPrescaler>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <LL_RCC_SetAHB3Prescaler>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c64:	f023 020f 	bic.w	r2, r3, #15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <LL_RCC_SetAPB1Prescaler>:
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <LL_RCC_SetAPB2Prescaler>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <LL_RCC_GetAHBPrescaler>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <LL_RCC_GetAHB3Prescaler>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <LL_RCC_GetAPB1Prescaler>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_GetAPB2Prescaler>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <LL_RCC_ConfigMCO>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d82:	6013      	str	r3, [r2, #0]
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d9e:	d101      	bne.n	8003da4 <LL_RCC_PLL_IsReady+0x18>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <LL_RCC_PLL_IsReady+0x1a>
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1a:	d101      	bne.n	8003e20 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e3e:	d101      	bne.n	8003e44 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d101      	bne.n	8003e68 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e84:	d101      	bne.n	8003e8a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ea6:	d101      	bne.n	8003eac <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e36f      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eca:	f7ff fe90 	bl	8003bee <LL_RCC_GetSysClkSource>
 8003ece:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed0:	f7ff ff8f 	bl	8003df2 <LL_RCC_PLL_GetMainSource>
 8003ed4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80c4 	beq.w	800406c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x3e>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2b0c      	cmp	r3, #12
 8003eee:	d176      	bne.n	8003fde <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d173      	bne.n	8003fde <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e353      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_OscConfig+0x68>
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1e:	e006      	b.n	8003f2e <HAL_RCC_OscConfig+0x76>
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d222      	bcs.n	8003f78 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fd94 	bl	8004a64 <RCC_SetFlashLatencyFromMSIRange>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e331      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fe15 	bl	8003ba0 <LL_RCC_MSI_SetCalibTrimming>
 8003f76:	e021      	b.n	8003fbc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f82:	f043 0308 	orr.w	r3, r3, #8
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fdfc 	bl	8003ba0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fd59 	bl	8004a64 <RCC_SetFlashLatencyFromMSIRange>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e2f6      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fbc:	f000 fd1a 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4aa7      	ldr	r2, [pc, #668]	; (8004260 <HAL_RCC_OscConfig+0x3a8>)
 8003fc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003fc6:	4ba7      	ldr	r3, [pc, #668]	; (8004264 <HAL_RCC_OscConfig+0x3ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd fa80 	bl	80014d0 <HAL_InitTick>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d047      	beq.n	800406a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	e2e5      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d02c      	beq.n	8004040 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fe6:	f7ff fd88 	bl	8003afa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fea:	f7fd f8c7 	bl	800117c <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff2:	f7fd f8c3 	bl	800117c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e2d2      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004004:	f7ff fd95 	bl	8003b32 <LL_RCC_MSI_IsReady>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f1      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004018:	f043 0308 	orr.w	r3, r3, #8
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fdb1 	bl	8003ba0 <LL_RCC_MSI_SetCalibTrimming>
 800403e:	e015      	b.n	800406c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004040:	f7ff fd69 	bl	8003b16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004044:	f7fd f89a 	bl	800117c <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800404c:	f7fd f896 	bl	800117c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e2a5      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800405e:	f7ff fd68 	bl	8003b32 <LL_RCC_MSI_IsReady>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f1      	bne.n	800404c <HAL_RCC_OscConfig+0x194>
 8004068:	e000      	b.n	800406c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800406a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d058      	beq.n	800412a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b08      	cmp	r3, #8
 800407c:	d005      	beq.n	800408a <HAL_RCC_OscConfig+0x1d2>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d108      	bne.n	8004096 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d105      	bne.n	8004096 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d14b      	bne.n	800412a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e289      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d102      	bne.n	80040bc <HAL_RCC_OscConfig+0x204>
 80040b6:	f7ff fc70 	bl	800399a <LL_RCC_HSE_Enable>
 80040ba:	e00d      	b.n	80040d8 <HAL_RCC_OscConfig+0x220>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80040c4:	d104      	bne.n	80040d0 <HAL_RCC_OscConfig+0x218>
 80040c6:	f7ff fc3b 	bl	8003940 <LL_RCC_HSE_EnableTcxo>
 80040ca:	f7ff fc66 	bl	800399a <LL_RCC_HSE_Enable>
 80040ce:	e003      	b.n	80040d8 <HAL_RCC_OscConfig+0x220>
 80040d0:	f7ff fc71 	bl	80039b6 <LL_RCC_HSE_Disable>
 80040d4:	f7ff fc42 	bl	800395c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d012      	beq.n	8004106 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fd f84c 	bl	800117c <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fd f848 	bl	800117c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e257      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80040fa:	f7ff fc6a 	bl	80039d2 <LL_RCC_HSE_IsReady>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f1      	beq.n	80040e8 <HAL_RCC_OscConfig+0x230>
 8004104:	e011      	b.n	800412a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004106:	f7fd f839 	bl	800117c <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410e:	f7fd f835 	bl	800117c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b64      	cmp	r3, #100	; 0x64
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e244      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004120:	f7ff fc57 	bl	80039d2 <LL_RCC_HSE_IsReady>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f1      	bne.n	800410e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d046      	beq.n	80041c4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x290>
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d10e      	bne.n	8004160 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d10b      	bne.n	8004160 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e22a      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fc78 	bl	8003a4e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800415e:	e031      	b.n	80041c4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d019      	beq.n	800419c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004168:	f7ff fc44 	bl	80039f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd f806 	bl	800117c <HAL_GetTick>
 8004170:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004174:	f7fd f802 	bl	800117c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e211      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004186:	f7ff fc51 	bl	8003a2c <LL_RCC_HSI_IsReady>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f1      	beq.n	8004174 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fc5a 	bl	8003a4e <LL_RCC_HSI_SetCalibTrimming>
 800419a:	e013      	b.n	80041c4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419c:	f7ff fc38 	bl	8003a10 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fc ffec 	bl	800117c <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a8:	f7fc ffe8 	bl	800117c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1f7      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80041ba:	f7ff fc37 	bl	8003a2c <LL_RCC_HSI_IsReady>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f1      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d06e      	beq.n	80042ae <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d056      	beq.n	8004286 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d031      	beq.n	8004254 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e1d0      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d013      	beq.n	800423a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004212:	f7ff fc51 	bl	8003ab8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004216:	f7fc ffb1 	bl	800117c <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421e:	f7fc ffad 	bl	800117c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b11      	cmp	r3, #17
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1bc      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004230:	f7ff fc52 	bl	8003ad8 <LL_RCC_LSI_IsReady>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f1      	bne.n	800421e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004242:	f023 0210 	bic.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004254:	f7ff fc20 	bl	8003a98 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004258:	f7fc ff90 	bl	800117c <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800425e:	e00c      	b.n	800427a <HAL_RCC_OscConfig+0x3c2>
 8004260:	20000000 	.word	0x20000000
 8004264:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004268:	f7fc ff88 	bl	800117c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b11      	cmp	r3, #17
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e197      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800427a:	f7ff fc2d 	bl	8003ad8 <LL_RCC_LSI_IsReady>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f1      	beq.n	8004268 <HAL_RCC_OscConfig+0x3b0>
 8004284:	e013      	b.n	80042ae <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004286:	f7ff fc17 	bl	8003ab8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7fc ff77 	bl	800117c <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004292:	f7fc ff73 	bl	800117c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b11      	cmp	r3, #17
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e182      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80042a4:	f7ff fc18 	bl	8003ad8 <LL_RCC_LSI_IsReady>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f1      	bne.n	8004292 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80d8 	beq.w	800446c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80042bc:	f7ff fb2e 	bl	800391c <LL_PWR_IsEnabledBkUpAccess>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d113      	bne.n	80042ee <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80042c6:	f7ff faf7 	bl	80038b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ca:	f7fc ff57 	bl	800117c <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d2:	f7fc ff53 	bl	800117c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e162      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80042e4:	f7ff fb1a 	bl	800391c <LL_PWR_IsEnabledBkUpAccess>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f1      	beq.n	80042d2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07b      	beq.n	80043ee <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b85      	cmp	r3, #133	; 0x85
 80042fc:	d003      	beq.n	8004306 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d109      	bne.n	800431a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004312:	f043 0304 	orr.w	r3, r3, #4
 8004316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fc ff2f 	bl	800117c <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004334:	e00a      	b.n	800434c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fc ff21 	bl	800117c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e12e      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800434c:	f7ff fb93 	bl	8003a76 <LL_RCC_LSE_IsReady>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ef      	beq.n	8004336 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b81      	cmp	r3, #129	; 0x81
 800435c:	d003      	beq.n	8004366 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b85      	cmp	r3, #133	; 0x85
 8004364:	d121      	bne.n	80043aa <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fc ff09 	bl	800117c <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800436c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fc fefb 	bl	800117c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e108      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ec      	beq.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80043a8:	e060      	b.n	800446c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fc fee7 	bl	800117c <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fc fed9 	bl	800117c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e0e6      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ec      	bne.n	80043c6 <HAL_RCC_OscConfig+0x50e>
 80043ec:	e03e      	b.n	800446c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ee:	f7fc fec5 	bl	800117c <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fc feb7 	bl	800117c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0c4      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ec      	bne.n	800440a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7fc fea4 	bl	800117c <HAL_GetTick>
 8004434:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fc fe96 	bl	800117c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0a3      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004462:	f7ff fb08 	bl	8003a76 <LL_RCC_LSE_IsReady>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ef      	bne.n	800444c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8099 	beq.w	80045a8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d06c      	beq.n	8004556 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	2b02      	cmp	r3, #2
 8004482:	d14b      	bne.n	800451c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004484:	f7ff fc74 	bl	8003d70 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fc fe78 	bl	800117c <HAL_GetTick>
 800448c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fc fe74 	bl	800117c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b0a      	cmp	r3, #10
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e083      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80044a2:	f7ff fc73 	bl	8003d8c <LL_RCC_PLL_IsReady>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f1      	bne.n	8004490 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <HAL_RCC_OscConfig+0x6fc>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044be:	4311      	orrs	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c4:	0212      	lsls	r2, r2, #8
 80044c6:	4311      	orrs	r1, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044cc:	4311      	orrs	r1, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044d8:	430a      	orrs	r2, r1
 80044da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044de:	4313      	orrs	r3, r2
 80044e0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e2:	f7ff fc37 	bl	8003d54 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f6:	f7fc fe41 	bl	800117c <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fe:	f7fc fe3d 	bl	800117c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b0a      	cmp	r3, #10
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e04c      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004510:	f7ff fc3c 	bl	8003d8c <LL_RCC_PLL_IsReady>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f1      	beq.n	80044fe <HAL_RCC_OscConfig+0x646>
 800451a:	e045      	b.n	80045a8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451c:	f7ff fc28 	bl	8003d70 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fc fe2c 	bl	800117c <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004528:	f7fc fe28 	bl	800117c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b0a      	cmp	r3, #10
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e037      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800453a:	f7ff fc27 	bl	8003d8c <LL_RCC_PLL_IsReady>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f1      	bne.n	8004528 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_RCC_OscConfig+0x700>)
 8004550:	4013      	ands	r3, r2
 8004552:	60cb      	str	r3, [r1, #12]
 8004554:	e028      	b.n	80045a8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e023      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f003 0203 	and.w	r2, r3, #3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	429a      	cmp	r2, r3
 8004576:	d115      	bne.n	80045a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	429a      	cmp	r2, r3
 8004584:	d10e      	bne.n	80045a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	429a      	cmp	r2, r3
 8004594:	d106      	bne.n	80045a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	11c1808c 	.word	0x11c1808c
 80045b8:	eefefffc 	.word	0xeefefffc

080045bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e12c      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b98      	ldr	r3, [pc, #608]	; (8004834 <HAL_RCC_ClockConfig+0x278>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d91b      	bls.n	8004616 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b95      	ldr	r3, [pc, #596]	; (8004834 <HAL_RCC_ClockConfig+0x278>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 0207 	bic.w	r2, r3, #7
 80045e6:	4993      	ldr	r1, [pc, #588]	; (8004834 <HAL_RCC_ClockConfig+0x278>)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ee:	f7fc fdc5 	bl	800117c <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80045f6:	f7fc fdc1 	bl	800117c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e110      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004608:	4b8a      	ldr	r3, [pc, #552]	; (8004834 <HAL_RCC_ClockConfig+0x278>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d1ef      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d016      	beq.n	8004650 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff faec 	bl	8003c04 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800462c:	f7fc fda6 	bl	800117c <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004634:	f7fc fda2 	bl	800117c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0f1      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004646:	f7ff fbdf 	bl	8003e08 <LL_RCC_IsActiveFlag_HPRE>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f1      	beq.n	8004634 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d016      	beq.n	800468a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fae2 	bl	8003c2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004666:	f7fc fd89 	bl	800117c <HAL_GetTick>
 800466a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800466e:	f7fc fd85 	bl	800117c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e0d4      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004680:	f7ff fbd3 	bl	8003e2a <LL_RCC_IsActiveFlag_C2HPRE>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f1      	beq.n	800466e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d016      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fada 	bl	8003c54 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046a0:	f7fc fd6c 	bl	800117c <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046a8:	f7fc fd68 	bl	800117c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0b7      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80046ba:	f7ff fbc8 	bl	8003e4e <LL_RCC_IsActiveFlag_SHDHPRE>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f1      	beq.n	80046a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d016      	beq.n	80046fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fad3 	bl	8003c80 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046da:	f7fc fd4f 	bl	800117c <HAL_GetTick>
 80046de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046e2:	f7fc fd4b 	bl	800117c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e09a      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80046f4:	f7ff fbbd 	bl	8003e72 <LL_RCC_IsActiveFlag_PPRE1>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f1      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fac8 	bl	8003ca6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004716:	f7fc fd31 	bl	800117c <HAL_GetTick>
 800471a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800471e:	f7fc fd2d 	bl	800117c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e07c      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004730:	f7ff fbb0 	bl	8003e94 <LL_RCC_IsActiveFlag_PPRE2>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f1      	beq.n	800471e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d043      	beq.n	80047ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d106      	bne.n	800475c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800474e:	f7ff f940 	bl	80039d2 <LL_RCC_HSE_IsReady>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11e      	bne.n	8004796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e066      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d106      	bne.n	8004772 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004764:	f7ff fb12 	bl	8003d8c <LL_RCC_PLL_IsReady>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d113      	bne.n	8004796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e05b      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800477a:	f7ff f9da 	bl	8003b32 <LL_RCC_MSI_IsReady>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d108      	bne.n	8004796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e050      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004788:	f7ff f950 	bl	8003a2c <LL_RCC_HSI_IsReady>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e049      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fa14 	bl	8003bc8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a0:	f7fc fcec 	bl	800117c <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fc fce8 	bl	800117c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e035      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	f7ff fa16 	bl	8003bee <LL_RCC_GetSysClkSource>
 80047c2:	4602      	mov	r2, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d1ec      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCC_ClockConfig+0x278>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d21b      	bcs.n	8004814 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047dc:	4b15      	ldr	r3, [pc, #84]	; (8004834 <HAL_RCC_ClockConfig+0x278>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 0207 	bic.w	r2, r3, #7
 80047e4:	4913      	ldr	r1, [pc, #76]	; (8004834 <HAL_RCC_ClockConfig+0x278>)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ec:	f7fc fcc6 	bl	800117c <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047f4:	f7fc fcc2 	bl	800117c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e011      	b.n	800482a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_ClockConfig+0x278>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d1ef      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004814:	f000 f8ee 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004818:	4603      	mov	r3, r0
 800481a:	4a07      	ldr	r2, [pc, #28]	; (8004838 <HAL_RCC_ClockConfig+0x27c>)
 800481c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCC_ClockConfig+0x280>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fc fe54 	bl	80014d0 <HAL_InitTick>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	58004000 	.word	0x58004000
 8004838:	20000000 	.word	0x20000000
 800483c:	2000000c 	.word	0x2000000c

08004840 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	; 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800484c:	2302      	movs	r3, #2
 800484e:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004850:	2303      	movs	r3, #3
 8004852:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8004864:	029b      	lsls	r3, r3, #10
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8004872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004878:	2101      	movs	r1, #1
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	fa01 f303 	lsl.w	r3, r1, r3
 8004880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004884:	4313      	orrs	r3, r2
 8004886:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	b29b      	uxth	r3, r3
 800488c:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	0d1b      	lsrs	r3, r3, #20
 8004892:	b2db      	uxtb	r3, r3
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8004896:	f107 0314 	add.w	r3, r7, #20
 800489a:	4619      	mov	r1, r3
 800489c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800489e:	f7fd f8f9 	bl	8001a94 <HAL_GPIO_Init>

  /* Configure the microcontroller clock output (MCO) */
  LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	68b8      	ldr	r0, [r7, #8]
 80048a6:	f7ff fa3f 	bl	8003d28 <LL_RCC_ConfigMCO>
}
 80048aa:	bf00      	nop
 80048ac:	3730      	adds	r7, #48	; 0x30
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b4:	b590      	push	{r4, r7, lr}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c2:	f7ff f994 	bl	8003bee <LL_RCC_GetSysClkSource>
 80048c6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c8:	f7ff fa93 	bl	8003df2 <LL_RCC_PLL_GetMainSource>
 80048cc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x2c>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	d139      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d136      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80048e0:	f7ff f937 	bl	8003b52 <LL_RCC_MSI_IsEnabledRangeSelect>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d115      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x62>
 80048ea:	f7ff f932 	bl	8003b52 <LL_RCC_MSI_IsEnabledRangeSelect>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_GetSysClockFreq+0x4e>
 80048f4:	f7ff f93d 	bl	8003b72 <LL_RCC_MSI_GetRange>
 80048f8:	4603      	mov	r3, r0
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	e005      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x5a>
 8004902:	f7ff f941 	bl	8003b88 <LL_RCC_MSI_GetRangeAfterStandby>
 8004906:	4603      	mov	r3, r0
 8004908:	0a1b      	lsrs	r3, r3, #8
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	4a36      	ldr	r2, [pc, #216]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004914:	e014      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x8c>
 8004916:	f7ff f91c 	bl	8003b52 <LL_RCC_MSI_IsEnabledRangeSelect>
 800491a:	4603      	mov	r3, r0
 800491c:	2b01      	cmp	r3, #1
 800491e:	d106      	bne.n	800492e <HAL_RCC_GetSysClockFreq+0x7a>
 8004920:	f7ff f927 	bl	8003b72 <LL_RCC_MSI_GetRange>
 8004924:	4603      	mov	r3, r0
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	e005      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x86>
 800492e:	f7ff f92b 	bl	8003b88 <LL_RCC_MSI_GetRangeAfterStandby>
 8004932:	4603      	mov	r3, r0
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x134>)
 800493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004940:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d115      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800494c:	e012      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d102      	bne.n	800495a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_RCC_GetSysClockFreq+0x138>)
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e00c      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d109      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004960:	f7ff f80a 	bl	8003978 <LL_RCC_HSE_IsEnabledDiv2>
 8004964:	4603      	mov	r3, r0
 8004966:	2b01      	cmp	r3, #1
 8004968:	d102      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCC_GetSysClockFreq+0x138>)
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e001      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004970:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004972:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004974:	f7ff f93b 	bl	8003bee <LL_RCC_GetSysClkSource>
 8004978:	4603      	mov	r3, r0
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d12f      	bne.n	80049de <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800497e:	f7ff fa38 	bl	8003df2 <LL_RCC_PLL_GetMainSource>
 8004982:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d003      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0xde>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d003      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0xe4>
 8004990:	e00d      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004992:	4b16      	ldr	r3, [pc, #88]	; (80049ec <HAL_RCC_GetSysClockFreq+0x138>)
 8004994:	60fb      	str	r3, [r7, #12]
        break;
 8004996:	e00d      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004998:	f7fe ffee 	bl	8003978 <LL_RCC_HSE_IsEnabledDiv2>
 800499c:	4603      	mov	r3, r0
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d102      	bne.n	80049a8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <HAL_RCC_GetSysClockFreq+0x138>)
 80049a4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80049a6:	e005      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80049aa:	60fb      	str	r3, [r7, #12]
        break;
 80049ac:	e002      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	60fb      	str	r3, [r7, #12]
        break;
 80049b2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80049b4:	f7ff f9fb 	bl	8003dae <LL_RCC_PLL_GetN>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	fb03 f402 	mul.w	r4, r3, r2
 80049c0:	f7ff fa0c 	bl	8003ddc <LL_RCC_PLL_GetDivider>
 80049c4:	4603      	mov	r3, r0
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	3301      	adds	r3, #1
 80049ca:	fbb4 f4f3 	udiv	r4, r4, r3
 80049ce:	f7ff f9fa 	bl	8003dc6 <LL_RCC_PLL_GetR>
 80049d2:	4603      	mov	r3, r0
 80049d4:	0f5b      	lsrs	r3, r3, #29
 80049d6:	3301      	adds	r3, #1
 80049d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80049dc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80049de:	697b      	ldr	r3, [r7, #20]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd90      	pop	{r4, r7, pc}
 80049e8:	080076d0 	.word	0x080076d0
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	01e84800 	.word	0x01e84800

080049f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f4:	b598      	push	{r3, r4, r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80049f8:	f7ff ff5c 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 80049fc:	4604      	mov	r4, r0
 80049fe:	f7ff f965 	bl	8003ccc <LL_RCC_GetAHBPrescaler>
 8004a02:	4603      	mov	r3, r0
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	4a03      	ldr	r2, [pc, #12]	; (8004a18 <HAL_RCC_GetHCLKFreq+0x24>)
 8004a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd98      	pop	{r3, r4, r7, pc}
 8004a18:	08007670 	.word	0x08007670

08004a1c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a1c:	b598      	push	{r3, r4, r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a20:	f7ff ffe8 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a24:	4604      	mov	r4, r0
 8004a26:	f7ff f969 	bl	8003cfc <LL_RCC_GetAPB1Prescaler>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	4a03      	ldr	r2, [pc, #12]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd98      	pop	{r3, r4, r7, pc}
 8004a3c:	080076b0 	.word	0x080076b0

08004a40 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a40:	b598      	push	{r3, r4, r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004a44:	f7ff ffd6 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a48:	4604      	mov	r4, r0
 8004a4a:	f7ff f962 	bl	8003d12 <LL_RCC_GetAPB2Prescaler>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	0adb      	lsrs	r3, r3, #11
 8004a52:	4a03      	ldr	r2, [pc, #12]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd98      	pop	{r3, r4, r7, pc}
 8004a60:	080076b0 	.word	0x080076b0

08004a64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004a7c:	f7ff f931 	bl	8003ce2 <LL_RCC_GetAHB3Prescaler>
 8004a80:	4603      	mov	r3, r0
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0c9c      	lsrs	r4, r3, #18
 8004aa0:	f7fe ff26 	bl	80038f0 <HAL_PWREx_GetVoltageRange>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f000 f80b 	bl	8004ac4 <RCC_SetFlashLatency>
 8004aae:	4603      	mov	r3, r0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd90      	pop	{r4, r7, pc}
 8004ab8:	080076d0 	.word	0x080076d0
 8004abc:	08007670 	.word	0x08007670
 8004ac0:	431bde83 	.word	0x431bde83

08004ac4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08e      	sub	sp, #56	; 0x38
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004ace:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <RCC_SetFlashLatency+0xf4>)
 8004ad0:	f107 0320 	add.w	r3, r7, #32
 8004ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ad8:	6018      	str	r0, [r3, #0]
 8004ada:	3304      	adds	r3, #4
 8004adc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004ade:	4a37      	ldr	r2, [pc, #220]	; (8004bbc <RCC_SetFlashLatency+0xf8>)
 8004ae0:	f107 0318 	add.w	r3, r7, #24
 8004ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ae8:	6018      	str	r0, [r3, #0]
 8004aea:	3304      	adds	r3, #4
 8004aec:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004aee:	4a34      	ldr	r2, [pc, #208]	; (8004bc0 <RCC_SetFlashLatency+0xfc>)
 8004af0:	f107 030c 	add.w	r3, r7, #12
 8004af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004af6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004afa:	2300      	movs	r3, #0
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b04:	d11b      	bne.n	8004b3e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0a:	e014      	b.n	8004b36 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	3338      	adds	r3, #56	; 0x38
 8004b12:	443b      	add	r3, r7
 8004b14:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d807      	bhi.n	8004b30 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3338      	adds	r3, #56	; 0x38
 8004b26:	443b      	add	r3, r7
 8004b28:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b2e:	e021      	b.n	8004b74 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	3301      	adds	r3, #1
 8004b34:	633b      	str	r3, [r7, #48]	; 0x30
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d9e7      	bls.n	8004b0c <RCC_SetFlashLatency+0x48>
 8004b3c:	e01a      	b.n	8004b74 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b42:	e014      	b.n	8004b6e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	3338      	adds	r3, #56	; 0x38
 8004b4a:	443b      	add	r3, r7
 8004b4c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d807      	bhi.n	8004b68 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	3338      	adds	r3, #56	; 0x38
 8004b5e:	443b      	add	r3, r7
 8004b60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b66:	e005      	b.n	8004b74 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d9e7      	bls.n	8004b44 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <RCC_SetFlashLatency+0x100>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 0207 	bic.w	r2, r3, #7
 8004b7c:	4911      	ldr	r1, [pc, #68]	; (8004bc4 <RCC_SetFlashLatency+0x100>)
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b84:	f7fc fafa 	bl	800117c <HAL_GetTick>
 8004b88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b8a:	e008      	b.n	8004b9e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b8c:	f7fc faf6 	bl	800117c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e007      	b.n	8004bae <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <RCC_SetFlashLatency+0x100>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d1ef      	bne.n	8004b8c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3738      	adds	r7, #56	; 0x38
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	08007654 	.word	0x08007654
 8004bbc:	0800765c 	.word	0x0800765c
 8004bc0:	08007664 	.word	0x08007664
 8004bc4:	58004000 	.word	0x58004000

08004bc8 <LL_RCC_LSE_IsReady>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d101      	bne.n	8004be0 <LL_RCC_LSE_IsReady+0x18>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <LL_RCC_LSE_IsReady+0x1a>
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <LL_RCC_SetUSARTClockSource>:
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	401a      	ands	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <LL_RCC_SetI2SClockSource>:
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <LL_RCC_SetLPUARTClockSource>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <LL_RCC_SetI2CClockSource>:
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c86:	43db      	mvns	r3, r3
 8004c88:	401a      	ands	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <LL_RCC_SetLPTIMClockSource>:
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0c1b      	lsrs	r3, r3, #16
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr

08004cd8 <LL_RCC_SetRNGClockSource>:
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <LL_RCC_SetADCClockSource>:
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <LL_RCC_SetRTCClockSource>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_GetRTCClockSource>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <LL_RCC_ForceBackupDomainReset>:
{
 8004d6e:	b480      	push	{r7}
 8004d70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <LL_RCC_ReleaseBackupDomainReset>:
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
	...

08004db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d058      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004dd0:	f7fe fd72 	bl	80038b8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dd4:	f7fc f9d2 	bl	800117c <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004dda:	e009      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ddc:	f7fc f9ce 	bl	800117c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d902      	bls.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	74fb      	strb	r3, [r7, #19]
        break;
 8004dee:	e006      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004df0:	4b7b      	ldr	r3, [pc, #492]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfc:	d1ee      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d13c      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004e04:	f7ff ffa7 	bl	8004d56 <LL_RCC_GetRTCClockSource>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d00f      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e20:	f7ff ffa5 	bl	8004d6e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e24:	f7ff ffb3 	bl	8004d8e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d014      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fc f99e 	bl	800117c <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004e42:	e00b      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fc f99a 	bl	800117c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d902      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	74fb      	strb	r3, [r7, #19]
            break;
 8004e5a:	e004      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004e5c:	f7ff feb4 	bl	8004bc8 <LL_RCC_LSE_IsReady>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d1ee      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ff5b 	bl	8004d2c <LL_RCC_SetRTCClockSource>
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e78:	7cfb      	ldrb	r3, [r7, #19]
 8004e7a:	74bb      	strb	r3, [r7, #18]
 8004e7c:	e001      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fea9 	bl	8004bea <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff fe9e 	bl	8004bea <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fec0 	bl	8004c44 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fee6 	bl	8004ca6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fedb 	bl	8004ca6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fed0 	bl	8004ca6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fea9 	bl	8004c6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fe9e 	bl	8004c6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fe93 	bl	8004c6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d011      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fe5e 	bl	8004c1a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f66:	d107      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d010      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fea5 	bl	8004cd8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d011      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fea3 	bl	8004d02 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004fd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	58000400 	.word	0x58000400

08004fe4 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* Update LSCO selection according to parameter and enable LSCO */
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
	...

08005014 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d071      	beq.n	800510a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fb fe9c 	bl	8000d78 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005048:	4b32      	ldr	r3, [pc, #200]	; (8005114 <HAL_RTC_Init+0x100>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b10      	cmp	r3, #16
 8005052:	d051      	beq.n	80050f8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005054:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <HAL_RTC_Init+0x100>)
 8005056:	22ca      	movs	r2, #202	; 0xca
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
 800505a:	4b2e      	ldr	r3, [pc, #184]	; (8005114 <HAL_RTC_Init+0x100>)
 800505c:	2253      	movs	r2, #83	; 0x53
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f9a1 	bl	80053a8 <RTC_EnterInitMode>
 8005066:	4603      	mov	r3, r0
 8005068:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d13f      	bne.n	80050f0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005070:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_RTC_Init+0x100>)
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4a27      	ldr	r2, [pc, #156]	; (8005114 <HAL_RTC_Init+0x100>)
 8005076:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800507a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005080:	4b24      	ldr	r3, [pc, #144]	; (8005114 <HAL_RTC_Init+0x100>)
 8005082:	699a      	ldr	r2, [r3, #24]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6859      	ldr	r1, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	4319      	orrs	r1, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	430b      	orrs	r3, r1
 8005094:	491f      	ldr	r1, [pc, #124]	; (8005114 <HAL_RTC_Init+0x100>)
 8005096:	4313      	orrs	r3, r2
 8005098:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	491b      	ldr	r1, [pc, #108]	; (8005114 <HAL_RTC_Init+0x100>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80050aa:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <HAL_RTC_Init+0x100>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	430b      	orrs	r3, r1
 80050bc:	4915      	ldr	r1, [pc, #84]	; (8005114 <HAL_RTC_Init+0x100>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f9a4 	bl	8005410 <RTC_ExitInitMode>
 80050c8:	4603      	mov	r3, r0
 80050ca:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10e      	bne.n	80050f0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80050d2:	4b10      	ldr	r3, [pc, #64]	; (8005114 <HAL_RTC_Init+0x100>)
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a19      	ldr	r1, [r3, #32]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	4319      	orrs	r1, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	430b      	orrs	r3, r1
 80050ea:	490a      	ldr	r1, [pc, #40]	; (8005114 <HAL_RTC_Init+0x100>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050f0:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_RTC_Init+0x100>)
 80050f2:	22ff      	movs	r2, #255	; 0xff
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24
 80050f6:	e001      	b.n	80050fc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800510a:	7bfb      	ldrb	r3, [r7, #15]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40002800 	.word	0x40002800

08005118 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_RTC_SetTime+0x1a>
 800512e:	2302      	movs	r3, #2
 8005130:	e088      	b.n	8005244 <HAL_RTC_SetTime+0x12c>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005142:	4b42      	ldr	r3, [pc, #264]	; (800524c <HAL_RTC_SetTime+0x134>)
 8005144:	22ca      	movs	r2, #202	; 0xca
 8005146:	625a      	str	r2, [r3, #36]	; 0x24
 8005148:	4b40      	ldr	r3, [pc, #256]	; (800524c <HAL_RTC_SetTime+0x134>)
 800514a:	2253      	movs	r2, #83	; 0x53
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f92a 	bl	80053a8 <RTC_EnterInitMode>
 8005154:	4603      	mov	r3, r0
 8005156:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d15e      	bne.n	800521c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800515e:	4b3b      	ldr	r3, [pc, #236]	; (800524c <HAL_RTC_SetTime+0x134>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d057      	beq.n	800521c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d125      	bne.n	80051be <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <HAL_RTC_SetTime+0x134>)
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2200      	movs	r2, #0
 8005182:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 f97f 	bl	800548c <RTC_ByteToBcd2>
 800518e:	4603      	mov	r3, r0
 8005190:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f978 	bl	800548c <RTC_ByteToBcd2>
 800519c:	4603      	mov	r3, r0
 800519e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051a0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	789b      	ldrb	r3, [r3, #2]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f970 	bl	800548c <RTC_ByteToBcd2>
 80051ac:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051ae:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	78db      	ldrb	r3, [r3, #3]
 80051b6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e017      	b.n	80051ee <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <HAL_RTC_SetTime+0x134>)
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2200      	movs	r2, #0
 80051ce:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051dc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051e2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	78db      	ldrb	r3, [r3, #3]
 80051e8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80051ee:	4a17      	ldr	r2, [pc, #92]	; (800524c <HAL_RTC_SetTime+0x134>)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80051f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80051fa:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <HAL_RTC_SetTime+0x134>)
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	4a12      	ldr	r2, [pc, #72]	; (800524c <HAL_RTC_SetTime+0x134>)
 8005202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005206:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005208:	4b10      	ldr	r3, [pc, #64]	; (800524c <HAL_RTC_SetTime+0x134>)
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	68d9      	ldr	r1, [r3, #12]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	430b      	orrs	r3, r1
 8005216:	490d      	ldr	r1, [pc, #52]	; (800524c <HAL_RTC_SetTime+0x134>)
 8005218:	4313      	orrs	r3, r2
 800521a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f8f7 	bl	8005410 <RTC_ExitInitMode>
 8005222:	4603      	mov	r3, r0
 8005224:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RTC_SetTime+0x134>)
 8005228:	22ff      	movs	r2, #255	; 0xff
 800522a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d103      	bne.n	800523a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005242:	7cfb      	ldrb	r3, [r7, #19]
}
 8005244:	4618      	mov	r0, r3
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}
 800524c:	40002800 	.word	0x40002800

08005250 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_RTC_SetDate+0x1a>
 8005266:	2302      	movs	r3, #2
 8005268:	e071      	b.n	800534e <HAL_RTC_SetDate+0xfe>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2202      	movs	r2, #2
 8005276:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10e      	bne.n	800529e <HAL_RTC_SetDate+0x4e>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	f023 0310 	bic.w	r3, r3, #16
 8005294:	b2db      	uxtb	r3, r3
 8005296:	330a      	adds	r3, #10
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11c      	bne.n	80052de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	78db      	ldrb	r3, [r3, #3]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 f8ef 	bl	800548c <RTC_ByteToBcd2>
 80052ae:	4603      	mov	r3, r0
 80052b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f8e8 	bl	800548c <RTC_ByteToBcd2>
 80052bc:	4603      	mov	r3, r0
 80052be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80052c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	789b      	ldrb	r3, [r3, #2]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f8e0 	bl	800548c <RTC_ByteToBcd2>
 80052cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e00e      	b.n	80052fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	78db      	ldrb	r3, [r3, #3]
 80052e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80052f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052fc:	4b16      	ldr	r3, [pc, #88]	; (8005358 <HAL_RTC_SetDate+0x108>)
 80052fe:	22ca      	movs	r2, #202	; 0xca
 8005300:	625a      	str	r2, [r3, #36]	; 0x24
 8005302:	4b15      	ldr	r3, [pc, #84]	; (8005358 <HAL_RTC_SetDate+0x108>)
 8005304:	2253      	movs	r2, #83	; 0x53
 8005306:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f84d 	bl	80053a8 <RTC_EnterInitMode>
 800530e:	4603      	mov	r3, r0
 8005310:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005318:	4a0f      	ldr	r2, [pc, #60]	; (8005358 <HAL_RTC_SetDate+0x108>)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005320:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005324:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f872 	bl	8005410 <RTC_ExitInitMode>
 800532c:	4603      	mov	r3, r0
 800532e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <HAL_RTC_SetDate+0x108>)
 8005332:	22ff      	movs	r2, #255	; 0xff
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005336:	7cfb      	ldrb	r3, [r7, #19]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d103      	bne.n	8005344 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800534c:	7cfb      	ldrb	r3, [r7, #19]
}
 800534e:	4618      	mov	r0, r3
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd90      	pop	{r4, r7, pc}
 8005356:	bf00      	nop
 8005358:	40002800 	.word	0x40002800

0800535c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005364:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <HAL_RTC_WaitForSynchro+0x48>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <HAL_RTC_WaitForSynchro+0x48>)
 800536a:	f023 0320 	bic.w	r3, r3, #32
 800536e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005370:	f7fb ff04 	bl	800117c <HAL_GetTick>
 8005374:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005376:	e009      	b.n	800538c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005378:	f7fb ff00 	bl	800117c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005386:	d901      	bls.n	800538c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e006      	b.n	800539a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RTC_WaitForSynchro+0x48>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0ef      	beq.n	8005378 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40002800 	.word	0x40002800

080053a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80053b4:	4b15      	ldr	r3, [pc, #84]	; (800540c <RTC_EnterInitMode+0x64>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d120      	bne.n	8005402 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <RTC_EnterInitMode+0x64>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a11      	ldr	r2, [pc, #68]	; (800540c <RTC_EnterInitMode+0x64>)
 80053c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ca:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80053cc:	f7fb fed6 	bl	800117c <HAL_GetTick>
 80053d0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053d2:	e00d      	b.n	80053f0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80053d4:	f7fb fed2 	bl	800117c <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053e2:	d905      	bls.n	80053f0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2203      	movs	r2, #3
 80053ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053f0:	4b06      	ldr	r3, [pc, #24]	; (800540c <RTC_EnterInitMode+0x64>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <RTC_EnterInitMode+0x5a>
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d1e8      	bne.n	80053d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40002800 	.word	0x40002800

08005410 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <RTC_ExitInitMode+0x78>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <RTC_ExitInitMode+0x78>)
 8005422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005426:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005428:	4b17      	ldr	r3, [pc, #92]	; (8005488 <RTC_ExitInitMode+0x78>)
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10c      	bne.n	800544e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff ff91 	bl	800535c <HAL_RTC_WaitForSynchro>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01e      	beq.n	800547e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2203      	movs	r2, #3
 8005444:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	e017      	b.n	800547e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800544e:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <RTC_ExitInitMode+0x78>)
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <RTC_ExitInitMode+0x78>)
 8005454:	f023 0320 	bic.w	r3, r3, #32
 8005458:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff ff7e 	bl	800535c <HAL_RTC_WaitForSynchro>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2203      	movs	r2, #3
 800546a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <RTC_ExitInitMode+0x78>)
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	4a04      	ldr	r2, [pc, #16]	; (8005488 <RTC_ExitInitMode+0x78>)
 8005478:	f043 0320 	orr.w	r3, r3, #32
 800547c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800547e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40002800 	.word	0x40002800

0800548c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800549e:	e005      	b.n	80054ac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80054a6:	7afb      	ldrb	r3, [r7, #11]
 80054a8:	3b0a      	subs	r3, #10
 80054aa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	2b09      	cmp	r3, #9
 80054b0:	d8f6      	bhi.n	80054a0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	7afb      	ldrb	r3, [r7, #11]
 80054bc:	4313      	orrs	r3, r2
 80054be:	b2db      	uxtb	r3, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr
	...

080054cc <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_RTCEx_SetRefClock+0x16>
 80054de:	2302      	movs	r3, #2
 80054e0:	e02f      	b.n	8005542 <HAL_RTCEx_SetRefClock+0x76>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <HAL_RTCEx_SetRefClock+0x80>)
 80054f4:	22ca      	movs	r2, #202	; 0xca
 80054f6:	625a      	str	r2, [r3, #36]	; 0x24
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <HAL_RTCEx_SetRefClock+0x80>)
 80054fa:	2253      	movs	r2, #83	; 0x53
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ff52 	bl	80053a8 <RTC_EnterInitMode>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <HAL_RTCEx_SetRefClock+0x58>
  {
    /* Enable clockref detection */
    SET_BIT(RTC->CR, RTC_CR_REFCKON);
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <HAL_RTCEx_SetRefClock+0x80>)
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <HAL_RTCEx_SetRefClock+0x80>)
 8005514:	f043 0310 	orr.w	r3, r3, #16
 8005518:	6193      	str	r3, [r2, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ff78 	bl	8005410 <RTC_ExitInitMode>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <HAL_RTCEx_SetRefClock+0x80>)
 8005526:	22ff      	movs	r2, #255	; 0xff
 8005528:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <HAL_RTCEx_SetRefClock+0x6c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40002800 	.word	0x40002800

08005550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0ea      	b.n	8005738 <HAL_SPI_Init+0x1e8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b00      	cmp	r3, #0
 8005568:	d108      	bne.n	800557c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005572:	d009      	beq.n	8005588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	61da      	str	r2, [r3, #28]
 800557a:	e005      	b.n	8005588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d12a      	bne.n	80055ea <HAL_SPI_Init+0x9a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a68      	ldr	r2, [pc, #416]	; (8005740 <HAL_SPI_Init+0x1f0>)
 80055a0:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a67      	ldr	r2, [pc, #412]	; (8005744 <HAL_SPI_Init+0x1f4>)
 80055a6:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a67      	ldr	r2, [pc, #412]	; (8005748 <HAL_SPI_Init+0x1f8>)
 80055ac:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a66      	ldr	r2, [pc, #408]	; (800574c <HAL_SPI_Init+0x1fc>)
 80055b2:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a66      	ldr	r2, [pc, #408]	; (8005750 <HAL_SPI_Init+0x200>)
 80055b8:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a65      	ldr	r2, [pc, #404]	; (8005754 <HAL_SPI_Init+0x204>)
 80055be:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a65      	ldr	r2, [pc, #404]	; (8005758 <HAL_SPI_Init+0x208>)
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a64      	ldr	r2, [pc, #400]	; (800575c <HAL_SPI_Init+0x20c>)
 80055ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a61      	ldr	r2, [pc, #388]	; (8005760 <HAL_SPI_Init+0x210>)
 80055dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005600:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800560a:	d902      	bls.n	8005612 <HAL_SPI_Init+0xc2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e002      	b.n	8005618 <HAL_SPI_Init+0xc8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005620:	d007      	beq.n	8005632 <HAL_SPI_Init+0xe2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800562a:	d002      	beq.n	8005632 <HAL_SPI_Init+0xe2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005674:	ea42 0103 	orr.w	r1, r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005690:	d11b      	bne.n	80056ca <HAL_SPI_Init+0x17a>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <HAL_SPI_Init+0x162>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a2:	d903      	bls.n	80056ac <HAL_SPI_Init+0x15c>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
 80056aa:	e002      	b.n	80056b2 <HAL_SPI_Init+0x162>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d107      	bne.n	80056ca <HAL_SPI_Init+0x17a>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	f003 0204 	and.w	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056f0:	ea42 0103 	orr.w	r1, r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	d105      	bne.n	8005718 <HAL_SPI_Init+0x1c8>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	b292      	uxth	r2, r2
 8005716:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69da      	ldr	r2, [r3, #28]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005726:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	08005a9d 	.word	0x08005a9d
 8005744:	08005aaf 	.word	0x08005aaf
 8005748:	08005ac1 	.word	0x08005ac1
 800574c:	08005ad3 	.word	0x08005ad3
 8005750:	08005ae5 	.word	0x08005ae5
 8005754:	08005af7 	.word	0x08005af7
 8005758:	08005b09 	.word	0x08005b09
 800575c:	08005b1b 	.word	0x08005b1b
 8005760:	08000f89 	.word	0x08000f89

08005764 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e08b      	b.n	80058a4 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_SPI_RegisterCallback+0x36>
 8005796:	2302      	movs	r3, #2
 8005798:	e084      	b.n	80058a4 <HAL_SPI_RegisterCallback+0x140>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d14e      	bne.n	800584c <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 80057ae:	7afb      	ldrb	r3, [r7, #11]
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d842      	bhi.n	800583a <HAL_SPI_RegisterCallback+0xd6>
 80057b4:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <HAL_SPI_RegisterCallback+0x58>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057e5 	.word	0x080057e5
 80057c0:	080057ed 	.word	0x080057ed
 80057c4:	080057f5 	.word	0x080057f5
 80057c8:	080057fd 	.word	0x080057fd
 80057cc:	08005805 	.word	0x08005805
 80057d0:	0800580d 	.word	0x0800580d
 80057d4:	08005815 	.word	0x08005815
 80057d8:	0800581d 	.word	0x0800581d
 80057dc:	08005827 	.word	0x08005827
 80057e0:	08005831 	.word	0x08005831
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80057ea:	e056      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80057f2:	e052      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80057fa:	e04e      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005802:	e04a      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800580a:	e046      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005812:	e042      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800581a:	e03e      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8005824:	e039      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800582e:	e034      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005838:	e02f      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	75fb      	strb	r3, [r7, #23]
        break;
 800584a:	e026      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d118      	bne.n	800588a <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 8005858:	7afb      	ldrb	r3, [r7, #11]
 800585a:	2b08      	cmp	r3, #8
 800585c:	d002      	beq.n	8005864 <HAL_SPI_RegisterCallback+0x100>
 800585e:	2b09      	cmp	r3, #9
 8005860:	d005      	beq.n	800586e <HAL_SPI_RegisterCallback+0x10a>
 8005862:	e009      	b.n	8005878 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800586c:	e015      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005876:	e010      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	75fb      	strb	r3, [r7, #23]
        break;
 8005888:	e007      	b.n	800589a <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop

080058b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10e      	bne.n	80058f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
    return;
 80058ee:	e0cf      	b.n	8005a90 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_SPI_IRQHandler+0x5e>
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
    return;
 800590c:	e0c0      	b.n	8005a90 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <HAL_SPI_IRQHandler+0x7e>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d105      	bne.n	800592e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80b1 	beq.w	8005a90 <HAL_SPI_IRQHandler+0x1e0>
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80ab 	beq.w	8005a90 <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d023      	beq.n	800598c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b03      	cmp	r3, #3
 800594e:	d011      	beq.n	8005974 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005954:	f043 0204 	orr.w	r2, r3, #4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	e00b      	b.n	800598c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	693b      	ldr	r3, [r7, #16]
        return;
 800598a:	e081      	b.n	8005a90 <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d014      	beq.n	80059c0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599a:	f043 0201 	orr.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80059d6:	2300      	movs	r3, #0
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d050      	beq.n	8005a8e <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <HAL_SPI_IRQHandler+0x168>
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d034      	beq.n	8005a82 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0203 	bic.w	r2, r2, #3
 8005a26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d011      	beq.n	8005a54 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <HAL_SPI_IRQHandler+0x1e8>)
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fb fefc 	bl	800183a <HAL_DMA_Abort_IT>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d017      	beq.n	8005a8c <HAL_SPI_IRQHandler+0x1dc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <HAL_SPI_IRQHandler+0x1e8>)
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fb fee6 	bl	800183a <HAL_DMA_Abort_IT>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <HAL_SPI_IRQHandler+0x1dc>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005a80:	e004      	b.n	8005a8c <HAL_SPI_IRQHandler+0x1dc>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a8a:	e000      	b.n	8005a8e <HAL_SPI_IRQHandler+0x1de>
        if (hspi->hdmatx != NULL)
 8005a8c:	bf00      	nop
    return;
 8005a8e:	bf00      	nop
  }
}
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	08005b2d 	.word	0x08005b2d

08005a9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr

08005b1a <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e054      	b.n	8005c14 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d111      	bne.n	8005b9a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fab0 	bl	80060e4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a23      	ldr	r2, [pc, #140]	; (8005c1c <HAL_TIM_Base_Init+0xc4>)
 8005b90:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f000 f99f 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	08001271 	.word	0x08001271

08005c20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d001      	beq.n	8005c38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e02e      	b.n	8005c96 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <HAL_TIM_Base_Start+0x80>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIM_Base_Start+0x34>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c52:	d115      	bne.n	8005c80 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <HAL_TIM_Base_Start+0x84>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d015      	beq.n	8005c92 <HAL_TIM_Base_Start+0x72>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d011      	beq.n	8005c92 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7e:	e008      	b.n	8005c92 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e000      	b.n	8005c94 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	00010007 	.word	0x00010007

08005ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e0b6      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x18a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d00:	d03e      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0xd8>
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d06:	f200 8087 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x170>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0e:	f000 8086 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x176>
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d16:	d87f      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x170>
 8005d18:	2b70      	cmp	r3, #112	; 0x70
 8005d1a:	d01a      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0xaa>
 8005d1c:	2b70      	cmp	r3, #112	; 0x70
 8005d1e:	d87b      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x170>
 8005d20:	2b60      	cmp	r3, #96	; 0x60
 8005d22:	d050      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x11e>
 8005d24:	2b60      	cmp	r3, #96	; 0x60
 8005d26:	d877      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x170>
 8005d28:	2b50      	cmp	r3, #80	; 0x50
 8005d2a:	d03c      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0xfe>
 8005d2c:	2b50      	cmp	r3, #80	; 0x50
 8005d2e:	d873      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x170>
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d058      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x13e>
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d86f      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x170>
 8005d38:	2b30      	cmp	r3, #48	; 0x30
 8005d3a:	d064      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x15e>
 8005d3c:	2b30      	cmp	r3, #48	; 0x30
 8005d3e:	d86b      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x170>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d060      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x15e>
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d867      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x170>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d05c      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x15e>
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d05a      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x15e>
 8005d50:	e062      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d62:	f000 f9a0 	bl	80060a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	609a      	str	r2, [r3, #8]
      break;
 8005d7e:	e04f      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d90:	f000 f989 	bl	80060a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005da2:	609a      	str	r2, [r3, #8]
      break;
 8005da4:	e03c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	461a      	mov	r2, r3
 8005db4:	f000 f8fe 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2150      	movs	r1, #80	; 0x50
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f955 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 8005dc4:	e02c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f000 f91c 	bl	8006010 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2160      	movs	r1, #96	; 0x60
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f945 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 8005de4:	e01c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 f8de 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2140      	movs	r1, #64	; 0x40
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f935 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 8005e04:	e00c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f000 f92c 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 8005e16:	e003      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e000      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr
	...

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a29      	ldr	r2, [pc, #164]	; (8005fa8 <TIM_Base_SetConfig+0xb8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_Base_SetConfig+0x20>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d108      	bne.n	8005f22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <TIM_Base_SetConfig+0xb8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00b      	beq.n	8005f42 <TIM_Base_SetConfig+0x52>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d007      	beq.n	8005f42 <TIM_Base_SetConfig+0x52>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <TIM_Base_SetConfig+0xbc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_Base_SetConfig+0x52>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <TIM_Base_SetConfig+0xc0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d108      	bne.n	8005f54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a0b      	ldr	r2, [pc, #44]	; (8005fa8 <TIM_Base_SetConfig+0xb8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d007      	beq.n	8005f90 <TIM_Base_SetConfig+0xa0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <TIM_Base_SetConfig+0xbc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_Base_SetConfig+0xa0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <TIM_Base_SetConfig+0xc0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d103      	bne.n	8005f98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	615a      	str	r2, [r3, #20]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 030a 	bic.w	r3, r3, #10
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f023 0210 	bic.w	r2, r3, #16
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800603a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	031b      	lsls	r3, r3, #12
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800604c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr

0800606e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	f043 0307 	orr.w	r3, r3, #7
 8006094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b087      	sub	sp, #28
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	021a      	lsls	r2, r3, #8
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	609a      	str	r2, [r3, #8]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr

080060e4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <TIM_ResetCallback+0x84>)
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a1d      	ldr	r2, [pc, #116]	; (800616c <TIM_ResetCallback+0x88>)
 80060f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a1c      	ldr	r2, [pc, #112]	; (8006170 <TIM_ResetCallback+0x8c>)
 8006100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1b      	ldr	r2, [pc, #108]	; (8006174 <TIM_ResetCallback+0x90>)
 8006108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a1a      	ldr	r2, [pc, #104]	; (8006178 <TIM_ResetCallback+0x94>)
 8006110:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a19      	ldr	r2, [pc, #100]	; (800617c <TIM_ResetCallback+0x98>)
 8006118:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a18      	ldr	r2, [pc, #96]	; (8006180 <TIM_ResetCallback+0x9c>)
 8006120:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a17      	ldr	r2, [pc, #92]	; (8006184 <TIM_ResetCallback+0xa0>)
 8006128:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a16      	ldr	r2, [pc, #88]	; (8006188 <TIM_ResetCallback+0xa4>)
 8006130:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a15      	ldr	r2, [pc, #84]	; (800618c <TIM_ResetCallback+0xa8>)
 8006138:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a14      	ldr	r2, [pc, #80]	; (8006190 <TIM_ResetCallback+0xac>)
 8006140:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a13      	ldr	r2, [pc, #76]	; (8006194 <TIM_ResetCallback+0xb0>)
 8006148:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a12      	ldr	r2, [pc, #72]	; (8006198 <TIM_ResetCallback+0xb4>)
 8006150:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a11      	ldr	r2, [pc, #68]	; (800619c <TIM_ResetCallback+0xb8>)
 8006158:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	08005e3b 	.word	0x08005e3b
 800616c:	08005e4d 	.word	0x08005e4d
 8006170:	08005eb9 	.word	0x08005eb9
 8006174:	08005ecb 	.word	0x08005ecb
 8006178:	08005e71 	.word	0x08005e71
 800617c:	08005e83 	.word	0x08005e83
 8006180:	08005e5f 	.word	0x08005e5f
 8006184:	08005e95 	.word	0x08005e95
 8006188:	08005ea7 	.word	0x08005ea7
 800618c:	08005edd 	.word	0x08005edd
 8006190:	0800625d 	.word	0x0800625d
 8006194:	0800626f 	.word	0x0800626f
 8006198:	08006281 	.word	0x08006281
 800619c:	08006293 	.word	0x08006293

080061a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e04a      	b.n	800624e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1e      	ldr	r2, [pc, #120]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d108      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a11      	ldr	r2, [pc, #68]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d10c      	bne.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4313      	orrs	r3, r2
 8006232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	40012c00 	.word	0x40012c00

0800625c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr

08006292 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <LL_RCC_GetUSARTClockSource>:
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80062ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	401a      	ands	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	041b      	lsls	r3, r3, #16
 80062bc:	4313      	orrs	r3, r2
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <LL_RCC_GetLPUARTClockSource>:
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80062d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4013      	ands	r3, r2
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e042      	b.n	800637e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fb f848 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2224      	movs	r2, #36	; 0x24
 8006314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0201 	bic.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fb6f 	bl	8006a0c <UART_SetConfig>
 800632e:	4603      	mov	r3, r0
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e022      	b.n	800637e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fdd7 	bl	8006ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006354:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006364:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fe5d 	bl	8007036 <UART_CheckIdleState>
 800637c:	4603      	mov	r3, r0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b0ba      	sub	sp, #232	; 0xe8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80063b6:	4013      	ands	r3, r2
 80063b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80063bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11b      	bne.n	80063fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d015      	beq.n	80063fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d009      	beq.n	80063fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 82e3 	beq.w	80069b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	4798      	blx	r3
      }
      return;
 80063fa:	e2dd      	b.n	80069b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8123 	beq.w	800664c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006406:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800640a:	4b8d      	ldr	r3, [pc, #564]	; (8006640 <HAL_UART_IRQHandler+0x2b8>)
 800640c:	4013      	ands	r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d106      	bne.n	8006420 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006412:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006416:	4b8b      	ldr	r3, [pc, #556]	; (8006644 <HAL_UART_IRQHandler+0x2bc>)
 8006418:	4013      	ands	r3, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8116 	beq.w	800664c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d011      	beq.n	8006450 <HAL_UART_IRQHandler+0xc8>
 800642c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00b      	beq.n	8006450 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2201      	movs	r2, #1
 800643e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	f043 0201 	orr.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d011      	beq.n	8006480 <HAL_UART_IRQHandler+0xf8>
 800645c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2202      	movs	r2, #2
 800646e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	f043 0204 	orr.w	r2, r3, #4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d011      	beq.n	80064b0 <HAL_UART_IRQHandler+0x128>
 800648c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2204      	movs	r2, #4
 800649e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f043 0202 	orr.w	r2, r3, #2
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d017      	beq.n	80064ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80064cc:	4b5c      	ldr	r3, [pc, #368]	; (8006640 <HAL_UART_IRQHandler+0x2b8>)
 80064ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2208      	movs	r2, #8
 80064da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e2:	f043 0208 	orr.w	r2, r3, #8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d012      	beq.n	800651e <HAL_UART_IRQHandler+0x196>
 80064f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00c      	beq.n	800651e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800650c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8249 	beq.w	80069bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d013      	beq.n	800655e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d105      	bne.n	800654e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800657e:	2b00      	cmp	r3, #0
 8006580:	d054      	beq.n	800662c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fe6d 	bl	8007262 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d146      	bne.n	8006624 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3308      	adds	r3, #8
 800659c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1d9      	bne.n	8006596 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d017      	beq.n	800661c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <HAL_UART_IRQHandler+0x2c0>)
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fb f91c 	bl	800183a <HAL_DMA_Abort_IT>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d019      	beq.n	800663c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006616:	4610      	mov	r0, r2
 8006618:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661a:	e00f      	b.n	800663c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f9e0 	bl	80069e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006622:	e00b      	b.n	800663c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f9dc 	bl	80069e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662a:	e007      	b.n	800663c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f9d8 	bl	80069e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800663a:	e1bf      	b.n	80069bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	bf00      	nop
    return;
 800663e:	e1bd      	b.n	80069bc <HAL_UART_IRQHandler+0x634>
 8006640:	10000001 	.word	0x10000001
 8006644:	04000120 	.word	0x04000120
 8006648:	0800732d 	.word	0x0800732d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006650:	2b01      	cmp	r3, #1
 8006652:	f040 8153 	bne.w	80068fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 814c 	beq.w	80068fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8145 	beq.w	80068fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2210      	movs	r2, #16
 8006678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	f040 80bb 	bne.w	8006800 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006698:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 818f 	beq.w	80069c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ac:	429a      	cmp	r2, r3
 80066ae:	f080 8187 	bcs.w	80069c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 8087 	bne.w	80067de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1da      	bne.n	80066d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800672a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800672c:	f023 0301 	bic.w	r3, r3, #1
 8006730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800673e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e1      	bne.n	800671a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3308      	adds	r3, #8
 8006776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800677a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800677c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e3      	bne.n	8006756 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ac:	f023 0310 	bic.w	r3, r3, #16
 80067b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067be:	65bb      	str	r3, [r7, #88]	; 0x58
 80067c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e4      	bne.n	800679c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fa ffd0 	bl	800177e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f8fb 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067fe:	e0df      	b.n	80069c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800680c:	b29b      	uxth	r3, r3
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80d1 	beq.w	80069c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006822:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80cc 	beq.w	80069c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800684e:	647b      	str	r3, [r7, #68]	; 0x44
 8006850:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006854:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e4      	bne.n	800682c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	623b      	str	r3, [r7, #32]
   return(result);
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3308      	adds	r3, #8
 8006886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800688a:	633a      	str	r2, [r7, #48]	; 0x30
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e1      	bne.n	8006862 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	60fb      	str	r3, [r7, #12]
   return(result);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0310 	bic.w	r3, r3, #16
 80068c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	69b9      	ldr	r1, [r7, #24]
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	617b      	str	r3, [r7, #20]
   return(result);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e4      	bne.n	80068b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f87d 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068fa:	e063      	b.n	80069c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <HAL_UART_IRQHandler+0x59e>
 8006908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800691c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fd45 	bl	80073ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006924:	e051      	b.n	80069ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d014      	beq.n	800695c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800693e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d008      	beq.n	800695c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800694e:	2b00      	cmp	r3, #0
 8006950:	d03a      	beq.n	80069c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
    }
    return;
 800695a:	e035      	b.n	80069c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800695c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <HAL_UART_IRQHandler+0x5f4>
 8006968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fcef 	bl	8007358 <UART_EndTransmit_IT>
    return;
 800697a:	e026      	b.n	80069ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800697c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d009      	beq.n	800699c <HAL_UART_IRQHandler+0x614>
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fd1c 	bl	80073d2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800699a:	e016      	b.n	80069ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <HAL_UART_IRQHandler+0x642>
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da0c      	bge.n	80069ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fd05 	bl	80073c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069b6:	e008      	b.n	80069ca <HAL_UART_IRQHandler+0x642>
      return;
 80069b8:	bf00      	nop
 80069ba:	e006      	b.n	80069ca <HAL_UART_IRQHandler+0x642>
    return;
 80069bc:	bf00      	nop
 80069be:	e004      	b.n	80069ca <HAL_UART_IRQHandler+0x642>
      return;
 80069c0:	bf00      	nop
 80069c2:	e002      	b.n	80069ca <HAL_UART_IRQHandler+0x642>
      return;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <HAL_UART_IRQHandler+0x642>
    return;
 80069c8:	bf00      	nop
  }
}
 80069ca:	37e8      	adds	r7, #232	; 0xe8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr

080069e2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr
	...

08006a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a10:	b08c      	sub	sp, #48	; 0x30
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	431a      	orrs	r2, r3
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b94      	ldr	r3, [pc, #592]	; (8006c8c <UART_SetConfig+0x280>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	6812      	ldr	r2, [r2, #0]
 8006a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a89      	ldr	r2, [pc, #548]	; (8006c90 <UART_SetConfig+0x284>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d004      	beq.n	8006a78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a74:	4313      	orrs	r3, r2
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	f023 010f 	bic.w	r1, r3, #15
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a7a      	ldr	r2, [pc, #488]	; (8006c94 <UART_SetConfig+0x288>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d127      	bne.n	8006b00 <UART_SetConfig+0xf4>
 8006ab0:	2003      	movs	r0, #3
 8006ab2:	f7ff fbf7 	bl	80062a4 <LL_RCC_GetUSARTClockSource>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d81b      	bhi.n	8006af8 <UART_SetConfig+0xec>
 8006ac0:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <UART_SetConfig+0xbc>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	08006ae1 	.word	0x08006ae1
 8006ad4:	08006af1 	.word	0x08006af1
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ade:	e080      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ae6:	e07c      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aee:	e078      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006af0:	2308      	movs	r3, #8
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006af6:	e074      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006af8:	2310      	movs	r3, #16
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006afe:	e070      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a64      	ldr	r2, [pc, #400]	; (8006c98 <UART_SetConfig+0x28c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d138      	bne.n	8006b7c <UART_SetConfig+0x170>
 8006b0a:	200c      	movs	r0, #12
 8006b0c:	f7ff fbca 	bl	80062a4 <LL_RCC_GetUSARTClockSource>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006b16:	2b0c      	cmp	r3, #12
 8006b18:	d82c      	bhi.n	8006b74 <UART_SetConfig+0x168>
 8006b1a:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <UART_SetConfig+0x114>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b55 	.word	0x08006b55
 8006b24:	08006b75 	.word	0x08006b75
 8006b28:	08006b75 	.word	0x08006b75
 8006b2c:	08006b75 	.word	0x08006b75
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006b75 	.word	0x08006b75
 8006b38:	08006b75 	.word	0x08006b75
 8006b3c:	08006b75 	.word	0x08006b75
 8006b40:	08006b5d 	.word	0x08006b5d
 8006b44:	08006b75 	.word	0x08006b75
 8006b48:	08006b75 	.word	0x08006b75
 8006b4c:	08006b75 	.word	0x08006b75
 8006b50:	08006b6d 	.word	0x08006b6d
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5a:	e042      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b62:	e03e      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006b64:	2304      	movs	r3, #4
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6a:	e03a      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b72:	e036      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7a:	e032      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a43      	ldr	r2, [pc, #268]	; (8006c90 <UART_SetConfig+0x284>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d12a      	bne.n	8006bdc <UART_SetConfig+0x1d0>
 8006b86:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006b8a:	f7ff fb9d 	bl	80062c8 <LL_RCC_GetLPUARTClockSource>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b94:	d01a      	beq.n	8006bcc <UART_SetConfig+0x1c0>
 8006b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b9a:	d81b      	bhi.n	8006bd4 <UART_SetConfig+0x1c8>
 8006b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba0:	d00c      	beq.n	8006bbc <UART_SetConfig+0x1b0>
 8006ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba6:	d815      	bhi.n	8006bd4 <UART_SetConfig+0x1c8>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <UART_SetConfig+0x1a8>
 8006bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb0:	d008      	beq.n	8006bc4 <UART_SetConfig+0x1b8>
 8006bb2:	e00f      	b.n	8006bd4 <UART_SetConfig+0x1c8>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bba:	e012      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc2:	e00e      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bca:	e00a      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd2:	e006      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bda:	e002      	b.n	8006be2 <UART_SetConfig+0x1d6>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2a      	ldr	r2, [pc, #168]	; (8006c90 <UART_SetConfig+0x284>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	f040 80a4 	bne.w	8006d36 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d823      	bhi.n	8006c3e <UART_SetConfig+0x232>
 8006bf6:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x1f0>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c3f 	.word	0x08006c3f
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c3f 	.word	0x08006c3f
 8006c0c:	08006c2f 	.word	0x08006c2f
 8006c10:	08006c3f 	.word	0x08006c3f
 8006c14:	08006c3f 	.word	0x08006c3f
 8006c18:	08006c3f 	.word	0x08006c3f
 8006c1c:	08006c37 	.word	0x08006c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c20:	f7fd fefc 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c26:	e010      	b.n	8006c4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c28:	4b1c      	ldr	r3, [pc, #112]	; (8006c9c <UART_SetConfig+0x290>)
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c2c:	e00d      	b.n	8006c4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c2e:	f7fd fe41 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c34:	e009      	b.n	8006c4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c3c:	e005      	b.n	8006c4a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8137 	beq.w	8006ec0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <UART_SetConfig+0x294>)
 8006c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d305      	bcc.n	8006c82 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d910      	bls.n	8006ca4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c88:	e11a      	b.n	8006ec0 <UART_SetConfig+0x4b4>
 8006c8a:	bf00      	nop
 8006c8c:	cfff69f3 	.word	0xcfff69f3
 8006c90:	40008000 	.word	0x40008000
 8006c94:	40013800 	.word	0x40013800
 8006c98:	40004400 	.word	0x40004400
 8006c9c:	00f42400 	.word	0x00f42400
 8006ca0:	08007710 	.word	0x08007710
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
 8006caa:	60fa      	str	r2, [r7, #12]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	4a8e      	ldr	r2, [pc, #568]	; (8006eec <UART_SetConfig+0x4e0>)
 8006cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2200      	movs	r2, #0
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cc6:	f7f9 fa57 	bl	8000178 <__aeabi_uldivmod>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4610      	mov	r0, r2
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	f04f 0300 	mov.w	r3, #0
 8006cda:	020b      	lsls	r3, r1, #8
 8006cdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ce0:	0202      	lsls	r2, r0, #8
 8006ce2:	6979      	ldr	r1, [r7, #20]
 8006ce4:	6849      	ldr	r1, [r1, #4]
 8006ce6:	0849      	lsrs	r1, r1, #1
 8006ce8:	2000      	movs	r0, #0
 8006cea:	460c      	mov	r4, r1
 8006cec:	4605      	mov	r5, r0
 8006cee:	eb12 0804 	adds.w	r8, r2, r4
 8006cf2:	eb43 0905 	adc.w	r9, r3, r5
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	469a      	mov	sl, r3
 8006cfe:	4693      	mov	fp, r2
 8006d00:	4652      	mov	r2, sl
 8006d02:	465b      	mov	r3, fp
 8006d04:	4640      	mov	r0, r8
 8006d06:	4649      	mov	r1, r9
 8006d08:	f7f9 fa36 	bl	8000178 <__aeabi_uldivmod>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4613      	mov	r3, r2
 8006d12:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d1a:	d308      	bcc.n	8006d2e <UART_SetConfig+0x322>
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d22:	d204      	bcs.n	8006d2e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6a3a      	ldr	r2, [r7, #32]
 8006d2a:	60da      	str	r2, [r3, #12]
 8006d2c:	e0c8      	b.n	8006ec0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d34:	e0c4      	b.n	8006ec0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3e:	d167      	bne.n	8006e10 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006d40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d828      	bhi.n	8006d9a <UART_SetConfig+0x38e>
 8006d48:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x344>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	08006d9b 	.word	0x08006d9b
 8006d60:	08006d8b 	.word	0x08006d8b
 8006d64:	08006d9b 	.word	0x08006d9b
 8006d68:	08006d9b 	.word	0x08006d9b
 8006d6c:	08006d9b 	.word	0x08006d9b
 8006d70:	08006d93 	.word	0x08006d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d74:	f7fd fe52 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8006d78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d7a:	e014      	b.n	8006da6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d7c:	f7fd fe60 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 8006d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d82:	e010      	b.n	8006da6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d84:	4b5a      	ldr	r3, [pc, #360]	; (8006ef0 <UART_SetConfig+0x4e4>)
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d88:	e00d      	b.n	8006da6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8a:	f7fd fd93 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8006d8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d90:	e009      	b.n	8006da6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d98:	e005      	b.n	8006da6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006da4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8089 	beq.w	8006ec0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	4a4e      	ldr	r2, [pc, #312]	; (8006eec <UART_SetConfig+0x4e0>)
 8006db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc0:	005a      	lsls	r2, r3, #1
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	441a      	add	r2, r3
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	2b0f      	cmp	r3, #15
 8006dd8:	d916      	bls.n	8006e08 <UART_SetConfig+0x3fc>
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de0:	d212      	bcs.n	8006e08 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f023 030f 	bic.w	r3, r3, #15
 8006dea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	8bfb      	ldrh	r3, [r7, #30]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	8bfa      	ldrh	r2, [r7, #30]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	e05b      	b.n	8006ec0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e0e:	e057      	b.n	8006ec0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d828      	bhi.n	8006e6a <UART_SetConfig+0x45e>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x414>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e4d 	.word	0x08006e4d
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	08006e6b 	.word	0x08006e6b
 8006e30:	08006e5b 	.word	0x08006e5b
 8006e34:	08006e6b 	.word	0x08006e6b
 8006e38:	08006e6b 	.word	0x08006e6b
 8006e3c:	08006e6b 	.word	0x08006e6b
 8006e40:	08006e63 	.word	0x08006e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e44:	f7fd fdea 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8006e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e4a:	e014      	b.n	8006e76 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e4c:	f7fd fdf8 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 8006e50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e52:	e010      	b.n	8006e76 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e54:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <UART_SetConfig+0x4e4>)
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e58:	e00d      	b.n	8006e76 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5a:	f7fd fd2b 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e60:	e009      	b.n	8006e76 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e68:	e005      	b.n	8006e76 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e74:	bf00      	nop
    }

    if (pclk != 0U)
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d021      	beq.n	8006ec0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	4a1a      	ldr	r2, [pc, #104]	; (8006eec <UART_SetConfig+0x4e0>)
 8006e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	441a      	add	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d909      	bls.n	8006eba <UART_SetConfig+0x4ae>
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eac:	d205      	bcs.n	8006eba <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60da      	str	r2, [r3, #12]
 8006eb8:	e002      	b.n	8006ec0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006edc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3730      	adds	r7, #48	; 0x30
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eea:	bf00      	nop
 8006eec:	08007710 	.word	0x08007710
 8006ef0:	00f42400 	.word	0x00f42400

08006ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01a      	beq.n	800700a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff2:	d10a      	bne.n	800700a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b086      	sub	sp, #24
 800703a:	af02      	add	r7, sp, #8
 800703c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007046:	f7fa f899 	bl	800117c <HAL_GetTick>
 800704a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b08      	cmp	r3, #8
 8007058:	d10e      	bne.n	8007078 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800705a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f832 	bl	80070d2 <UART_WaitOnFlagUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e028      	b.n	80070ca <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b04      	cmp	r3, #4
 8007084:	d10e      	bne.n	80070a4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007086:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f81c 	bl	80070d2 <UART_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e012      	b.n	80070ca <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b09c      	sub	sp, #112	; 0x70
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	4613      	mov	r3, r2
 80070e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e2:	e0a9      	b.n	8007238 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ea:	f000 80a5 	beq.w	8007238 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fa f845 	bl	800117c <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <UART_WaitOnFlagUntilTimeout+0x32>
 80070fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007100:	2b00      	cmp	r3, #0
 8007102:	d140      	bne.n	8007186 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007114:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007118:	667b      	str	r3, [r7, #100]	; 0x64
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007124:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007128:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e6      	bne.n	8007104 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	663b      	str	r3, [r7, #96]	; 0x60
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3308      	adds	r3, #8
 8007154:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007156:	64ba      	str	r2, [r7, #72]	; 0x48
 8007158:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800715c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e5      	bne.n	8007136 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e069      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d051      	beq.n	8007238 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a2:	d149      	bne.n	8007238 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
 80071ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e6      	bne.n	80071ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3308      	adds	r3, #8
 80071e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	613b      	str	r3, [r7, #16]
   return(result);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007200:	623a      	str	r2, [r7, #32]
 8007202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	69f9      	ldr	r1, [r7, #28]
 8007206:	6a3a      	ldr	r2, [r7, #32]
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	61bb      	str	r3, [r7, #24]
   return(result);
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e5      	bne.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e010      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69da      	ldr	r2, [r3, #28]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	429a      	cmp	r2, r3
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	429a      	cmp	r2, r3
 8007254:	f43f af46 	beq.w	80070e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3770      	adds	r7, #112	; 0x70
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007262:	b480      	push	{r7}
 8007264:	b095      	sub	sp, #84	; 0x54
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007288:	643b      	str	r3, [r7, #64]	; 0x40
 800728a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800728e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e6      	bne.n	800726a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b2:	f023 0301 	bic.w	r3, r3, #1
 80072b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3308      	adds	r3, #8
 80072be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e3      	bne.n	800729c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d118      	bne.n	800730e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f023 0310 	bic.w	r3, r3, #16
 80072f0:	647b      	str	r3, [r7, #68]	; 0x44
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fa:	61bb      	str	r3, [r7, #24]
 80072fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6979      	ldr	r1, [r7, #20]
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	613b      	str	r3, [r7, #16]
   return(result);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e6      	bne.n	80072dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007322:	bf00      	nop
 8007324:	3754      	adds	r7, #84	; 0x54
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr

0800732c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff fb49 	bl	80069e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	60bb      	str	r3, [r7, #8]
   return(result);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6979      	ldr	r1, [r7, #20]
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	613b      	str	r3, [r7, #16]
   return(result);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fb15 	bl	80069d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a6:	bf00      	nop
 80073a8:	3720      	adds	r7, #32
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr

080073c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bc80      	pop	{r7}
 80073d0:	4770      	bx	lr

080073d2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr

080073e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_UARTEx_DisableFifoMode+0x16>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e027      	b.n	800744a <HAL_UARTEx_DisableFifoMode+0x66>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2224      	movs	r2, #36	; 0x24
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0201 	bic.w	r2, r2, #1
 8007420:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007428:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr

08007454 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007468:	2302      	movs	r3, #2
 800746a:	e02d      	b.n	80074c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2224      	movs	r2, #36	; 0x24
 8007478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0201 	bic.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f84f 	bl	800754c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e02d      	b.n	8007544 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2224      	movs	r2, #36	; 0x24
 80074f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0201 	bic.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f811 	bl	800754c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007558:	2b00      	cmp	r3, #0
 800755a:	d108      	bne.n	800756e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800756c:	e031      	b.n	80075d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800756e:	2308      	movs	r3, #8
 8007570:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007572:	2308      	movs	r3, #8
 8007574:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	0e5b      	lsrs	r3, r3, #25
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	0f5b      	lsrs	r3, r3, #29
 800758e:	b2db      	uxtb	r3, r3
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	7b3a      	ldrb	r2, [r7, #12]
 800759a:	4910      	ldr	r1, [pc, #64]	; (80075dc <UARTEx_SetNbDataToProcess+0x90>)
 800759c:	5c8a      	ldrb	r2, [r1, r2]
 800759e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075a2:	7b3a      	ldrb	r2, [r7, #12]
 80075a4:	490e      	ldr	r1, [pc, #56]	; (80075e0 <UARTEx_SetNbDataToProcess+0x94>)
 80075a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	7b7a      	ldrb	r2, [r7, #13]
 80075b8:	4908      	ldr	r1, [pc, #32]	; (80075dc <UARTEx_SetNbDataToProcess+0x90>)
 80075ba:	5c8a      	ldrb	r2, [r1, r2]
 80075bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075c0:	7b7a      	ldrb	r2, [r7, #13]
 80075c2:	4907      	ldr	r1, [pc, #28]	; (80075e0 <UARTEx_SetNbDataToProcess+0x94>)
 80075c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075d2:	bf00      	nop
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr
 80075dc:	08007728 	.word	0x08007728
 80075e0:	08007730 	.word	0x08007730

080075e4 <memset>:
 80075e4:	4402      	add	r2, r0
 80075e6:	4603      	mov	r3, r0
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d100      	bne.n	80075ee <memset+0xa>
 80075ec:	4770      	bx	lr
 80075ee:	f803 1b01 	strb.w	r1, [r3], #1
 80075f2:	e7f9      	b.n	80075e8 <memset+0x4>

080075f4 <__libc_init_array>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	4d0d      	ldr	r5, [pc, #52]	; (800762c <__libc_init_array+0x38>)
 80075f8:	4c0d      	ldr	r4, [pc, #52]	; (8007630 <__libc_init_array+0x3c>)
 80075fa:	1b64      	subs	r4, r4, r5
 80075fc:	10a4      	asrs	r4, r4, #2
 80075fe:	2600      	movs	r6, #0
 8007600:	42a6      	cmp	r6, r4
 8007602:	d109      	bne.n	8007618 <__libc_init_array+0x24>
 8007604:	4d0b      	ldr	r5, [pc, #44]	; (8007634 <__libc_init_array+0x40>)
 8007606:	4c0c      	ldr	r4, [pc, #48]	; (8007638 <__libc_init_array+0x44>)
 8007608:	f000 f818 	bl	800763c <_init>
 800760c:	1b64      	subs	r4, r4, r5
 800760e:	10a4      	asrs	r4, r4, #2
 8007610:	2600      	movs	r6, #0
 8007612:	42a6      	cmp	r6, r4
 8007614:	d105      	bne.n	8007622 <__libc_init_array+0x2e>
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	f855 3b04 	ldr.w	r3, [r5], #4
 800761c:	4798      	blx	r3
 800761e:	3601      	adds	r6, #1
 8007620:	e7ee      	b.n	8007600 <__libc_init_array+0xc>
 8007622:	f855 3b04 	ldr.w	r3, [r5], #4
 8007626:	4798      	blx	r3
 8007628:	3601      	adds	r6, #1
 800762a:	e7f2      	b.n	8007612 <__libc_init_array+0x1e>
 800762c:	08007740 	.word	0x08007740
 8007630:	08007740 	.word	0x08007740
 8007634:	08007740 	.word	0x08007740
 8007638:	08007744 	.word	0x08007744

0800763c <_init>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

08007648 <_fini>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr
