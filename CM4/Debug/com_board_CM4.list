
com_board_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f58  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007174  08007174  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800717c  0800717c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000014  08007198  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08007198  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000213e5  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004819  00000000  00000000  00041466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002058  00000000  00000000  00045c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001900  00000000  00000000  00047cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e53  00000000  00000000  000495d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002393c  00000000  00000000  0006a42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb939  00000000  00000000  0008dd67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008964  00000000  00000000  001596a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00162004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000014 	.word	0x20000014
 8000154:	00000000 	.word	0x00000000
 8000158:	08007078 	.word	0x08007078

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000018 	.word	0x20000018
 8000174:	08007078 	.word	0x08007078

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b970 	b.w	8000470 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	460f      	mov	r7, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d965      	bls.n	800028a <__udivmoddi4+0xe2>
 80001be:	fab2 f382 	clz	r3, r2
 80001c2:	b143      	cbz	r3, 80001d6 <__udivmoddi4+0x2e>
 80001c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001c8:	f1c3 0220 	rsb	r2, r3, #32
 80001cc:	409f      	lsls	r7, r3
 80001ce:	fa20 f202 	lsr.w	r2, r0, r2
 80001d2:	4317      	orrs	r7, r2
 80001d4:	409c      	lsls	r4, r3
 80001d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001da:	fa1f f58c 	uxth.w	r5, ip
 80001de:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e2:	0c22      	lsrs	r2, r4, #16
 80001e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001ec:	fb01 f005 	mul.w	r0, r1, r5
 80001f0:	4290      	cmp	r0, r2
 80001f2:	d90a      	bls.n	800020a <__udivmoddi4+0x62>
 80001f4:	eb1c 0202 	adds.w	r2, ip, r2
 80001f8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80001fc:	f080 811b 	bcs.w	8000436 <__udivmoddi4+0x28e>
 8000200:	4290      	cmp	r0, r2
 8000202:	f240 8118 	bls.w	8000436 <__udivmoddi4+0x28e>
 8000206:	3902      	subs	r1, #2
 8000208:	4462      	add	r2, ip
 800020a:	1a12      	subs	r2, r2, r0
 800020c:	b2a4      	uxth	r4, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021a:	fb00 f505 	mul.w	r5, r0, r5
 800021e:	42a5      	cmp	r5, r4
 8000220:	d90a      	bls.n	8000238 <__udivmoddi4+0x90>
 8000222:	eb1c 0404 	adds.w	r4, ip, r4
 8000226:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800022a:	f080 8106 	bcs.w	800043a <__udivmoddi4+0x292>
 800022e:	42a5      	cmp	r5, r4
 8000230:	f240 8103 	bls.w	800043a <__udivmoddi4+0x292>
 8000234:	4464      	add	r4, ip
 8000236:	3802      	subs	r0, #2
 8000238:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023c:	1b64      	subs	r4, r4, r5
 800023e:	2100      	movs	r1, #0
 8000240:	b11e      	cbz	r6, 800024a <__udivmoddi4+0xa2>
 8000242:	40dc      	lsrs	r4, r3
 8000244:	2300      	movs	r3, #0
 8000246:	e9c6 4300 	strd	r4, r3, [r6]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d908      	bls.n	8000264 <__udivmoddi4+0xbc>
 8000252:	2e00      	cmp	r6, #0
 8000254:	f000 80ec 	beq.w	8000430 <__udivmoddi4+0x288>
 8000258:	2100      	movs	r1, #0
 800025a:	e9c6 0500 	strd	r0, r5, [r6]
 800025e:	4608      	mov	r0, r1
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	fab3 f183 	clz	r1, r3
 8000268:	2900      	cmp	r1, #0
 800026a:	d149      	bne.n	8000300 <__udivmoddi4+0x158>
 800026c:	42ab      	cmp	r3, r5
 800026e:	d302      	bcc.n	8000276 <__udivmoddi4+0xce>
 8000270:	4282      	cmp	r2, r0
 8000272:	f200 80f7 	bhi.w	8000464 <__udivmoddi4+0x2bc>
 8000276:	1a84      	subs	r4, r0, r2
 8000278:	eb65 0203 	sbc.w	r2, r5, r3
 800027c:	2001      	movs	r0, #1
 800027e:	4617      	mov	r7, r2
 8000280:	2e00      	cmp	r6, #0
 8000282:	d0e2      	beq.n	800024a <__udivmoddi4+0xa2>
 8000284:	e9c6 4700 	strd	r4, r7, [r6]
 8000288:	e7df      	b.n	800024a <__udivmoddi4+0xa2>
 800028a:	b902      	cbnz	r2, 800028e <__udivmoddi4+0xe6>
 800028c:	deff      	udf	#255	; 0xff
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	2b00      	cmp	r3, #0
 8000294:	f040 808f 	bne.w	80003b6 <__udivmoddi4+0x20e>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029e:	fa1f fe8c 	uxth.w	lr, ip
 80002a2:	2101      	movs	r1, #1
 80002a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002a8:	fb07 2015 	mls	r0, r7, r5, r2
 80002ac:	0c22      	lsrs	r2, r4, #16
 80002ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b2:	fb0e f005 	mul.w	r0, lr, r5
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x124>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x122>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 80ca 	bhi.w	800045e <__udivmoddi4+0x2b6>
 80002ca:	4645      	mov	r5, r8
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d4:	fb07 2210 	mls	r2, r7, r0, r2
 80002d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x14e>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x14c>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 80ba 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002f4:	4610      	mov	r0, r2
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002fe:	e79f      	b.n	8000240 <__udivmoddi4+0x98>
 8000300:	f1c1 0720 	rsb	r7, r1, #32
 8000304:	408b      	lsls	r3, r1
 8000306:	fa22 fc07 	lsr.w	ip, r2, r7
 800030a:	ea4c 0c03 	orr.w	ip, ip, r3
 800030e:	fa05 f401 	lsl.w	r4, r5, r1
 8000312:	fa20 f307 	lsr.w	r3, r0, r7
 8000316:	40fd      	lsrs	r5, r7
 8000318:	4323      	orrs	r3, r4
 800031a:	fa00 f901 	lsl.w	r9, r0, r1
 800031e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	fbb5 f8f0 	udiv	r8, r5, r0
 800032a:	0c1c      	lsrs	r4, r3, #16
 800032c:	fb00 5518 	mls	r5, r0, r8, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	d90b      	bls.n	8000358 <__udivmoddi4+0x1b0>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000348:	f080 8087 	bcs.w	800045a <__udivmoddi4+0x2b2>
 800034c:	42a5      	cmp	r5, r4
 800034e:	f240 8084 	bls.w	800045a <__udivmoddi4+0x2b2>
 8000352:	f1a8 0802 	sub.w	r8, r8, #2
 8000356:	4464      	add	r4, ip
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	b29d      	uxth	r5, r3
 800035c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000360:	fb00 4413 	mls	r4, r0, r3, r4
 8000364:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000368:	fb03 fe0e 	mul.w	lr, r3, lr
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x1da>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000378:	d26b      	bcs.n	8000452 <__udivmoddi4+0x2aa>
 800037a:	45a6      	cmp	lr, r4
 800037c:	d969      	bls.n	8000452 <__udivmoddi4+0x2aa>
 800037e:	3b02      	subs	r3, #2
 8000380:	4464      	add	r4, ip
 8000382:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000386:	fba0 8302 	umull	r8, r3, r0, r2
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	429c      	cmp	r4, r3
 8000390:	46c6      	mov	lr, r8
 8000392:	461d      	mov	r5, r3
 8000394:	d355      	bcc.n	8000442 <__udivmoddi4+0x29a>
 8000396:	d052      	beq.n	800043e <__udivmoddi4+0x296>
 8000398:	b156      	cbz	r6, 80003b0 <__udivmoddi4+0x208>
 800039a:	ebb9 030e 	subs.w	r3, r9, lr
 800039e:	eb64 0405 	sbc.w	r4, r4, r5
 80003a2:	fa04 f707 	lsl.w	r7, r4, r7
 80003a6:	40cb      	lsrs	r3, r1
 80003a8:	40cc      	lsrs	r4, r1
 80003aa:	431f      	orrs	r7, r3
 80003ac:	e9c6 7400 	strd	r7, r4, [r6]
 80003b0:	2100      	movs	r1, #0
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	f1c3 0120 	rsb	r1, r3, #32
 80003ba:	fa02 fc03 	lsl.w	ip, r2, r3
 80003be:	fa20 f201 	lsr.w	r2, r0, r1
 80003c2:	fa25 f101 	lsr.w	r1, r5, r1
 80003c6:	409d      	lsls	r5, r3
 80003c8:	432a      	orrs	r2, r5
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d6:	fb07 1510 	mls	r5, r7, r0, r1
 80003da:	0c11      	lsrs	r1, r2, #16
 80003dc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e0:	fb00 f50e 	mul.w	r5, r0, lr
 80003e4:	428d      	cmp	r5, r1
 80003e6:	fa04 f403 	lsl.w	r4, r4, r3
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x256>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f4:	d22f      	bcs.n	8000456 <__udivmoddi4+0x2ae>
 80003f6:	428d      	cmp	r5, r1
 80003f8:	d92d      	bls.n	8000456 <__udivmoddi4+0x2ae>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	1b49      	subs	r1, r1, r5
 8000400:	b292      	uxth	r2, r2
 8000402:	fbb1 f5f7 	udiv	r5, r1, r7
 8000406:	fb07 1115 	mls	r1, r7, r5, r1
 800040a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800040e:	fb05 f10e 	mul.w	r1, r5, lr
 8000412:	4291      	cmp	r1, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x280>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800041e:	d216      	bcs.n	800044e <__udivmoddi4+0x2a6>
 8000420:	4291      	cmp	r1, r2
 8000422:	d914      	bls.n	800044e <__udivmoddi4+0x2a6>
 8000424:	3d02      	subs	r5, #2
 8000426:	4462      	add	r2, ip
 8000428:	1a52      	subs	r2, r2, r1
 800042a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800042e:	e739      	b.n	80002a4 <__udivmoddi4+0xfc>
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e709      	b.n	800024a <__udivmoddi4+0xa2>
 8000436:	4639      	mov	r1, r7
 8000438:	e6e7      	b.n	800020a <__udivmoddi4+0x62>
 800043a:	4610      	mov	r0, r2
 800043c:	e6fc      	b.n	8000238 <__udivmoddi4+0x90>
 800043e:	45c1      	cmp	r9, r8
 8000440:	d2aa      	bcs.n	8000398 <__udivmoddi4+0x1f0>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 050c 	sbc.w	r5, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a4      	b.n	8000398 <__udivmoddi4+0x1f0>
 800044e:	4645      	mov	r5, r8
 8000450:	e7ea      	b.n	8000428 <__udivmoddi4+0x280>
 8000452:	4603      	mov	r3, r0
 8000454:	e795      	b.n	8000382 <__udivmoddi4+0x1da>
 8000456:	4640      	mov	r0, r8
 8000458:	e7d1      	b.n	80003fe <__udivmoddi4+0x256>
 800045a:	46d0      	mov	r8, sl
 800045c:	e77c      	b.n	8000358 <__udivmoddi4+0x1b0>
 800045e:	3d02      	subs	r5, #2
 8000460:	4462      	add	r2, ip
 8000462:	e733      	b.n	80002cc <__udivmoddi4+0x124>
 8000464:	4608      	mov	r0, r1
 8000466:	e70b      	b.n	8000280 <__udivmoddi4+0xd8>
 8000468:	4464      	add	r4, ip
 800046a:	3802      	subs	r0, #2
 800046c:	e743      	b.n	80002f6 <__udivmoddi4+0x14e>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4013      	ands	r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a4:	68fb      	ldr	r3, [r7, #12]
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> RCC_LSCO
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff ffdb 	bl	8000480 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	2004      	movs	r0, #4
 80004cc:	f7ff ffd8 	bl	8000480 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	2002      	movs	r0, #2
 80004d2:	f7ff ffd5 	bl	8000480 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004d6:	2304      	movs	r3, #4
 80004d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004da:	2302      	movs	r3, #2
 80004dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_LSCO;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f001 f91b 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fc:	2302      	movs	r3, #2
 80004fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f001 f90a 	bl	800172c <HAL_GPIO_Init>

}
 8000518:	bf00      	nop
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <LL_AHB2_GRP1_EnableClock>:
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <MX_I2C1_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707DBD;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_I2C1_Init+0x74>)
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <MX_I2C1_Init+0x7c>)
 800058e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000592:	2220      	movs	r2, #32
 8000594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005bc:	f001 fa16 	bl	80019ec <HAL_I2C_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005c6:	f000 fa7c 	bl	8000ac2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005d0:	f002 fe07 	bl	80031e2 <HAL_I2CEx_ConfigAnalogFilter>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005da:	f000 fa72 	bl	8000ac2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005de:	2100      	movs	r1, #0
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005e2:	f002 fe48 	bl	8003276 <HAL_I2CEx_ConfigDigitalFilter>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005ec:	f000 fa69 	bl	8000ac2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000030 	.word	0x20000030
 80005f8:	40005400 	.word	0x40005400
 80005fc:	00707dbd 	.word	0x00707dbd

08000600 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_I2C2_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_I2C2_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707DBD;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_I2C2_Init+0x74>)
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <MX_I2C2_Init+0x7c>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 34;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_I2C2_Init+0x74>)
 8000612:	2222      	movs	r2, #34	; 0x22
 8000614:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_I2C2_Init+0x74>)
 8000618:	2201      	movs	r2, #1
 800061a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_I2C2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_I2C2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C2_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <MX_I2C2_Init+0x74>)
 800063c:	f001 f9d6 	bl	80019ec <HAL_I2C_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000646:	f000 fa3c 	bl	8000ac2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800064a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_I2C2_Init+0x74>)
 8000650:	f002 fdc7 	bl	80031e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800065a:	f000 fa32 	bl	8000ac2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800065e:	2100      	movs	r1, #0
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_I2C2_Init+0x74>)
 8000662:	f002 fe08 	bl	8003276 <HAL_I2CEx_ConfigDigitalFilter>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800066c:	f000 fa29 	bl	8000ac2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000b4 	.word	0x200000b4
 8000678:	40005800 	.word	0x40005800
 800067c:	00707dbd 	.word	0x00707dbd

08000680 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C3_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707DBD;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C3_Init+0x74>)
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <MX_I2C3_Init+0x7c>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 36;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000692:	2224      	movs	r2, #36	; 0x24
 8000694:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_I2C3_Init+0x74>)
 8000698:	2201      	movs	r2, #1
 800069a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C3_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006bc:	f001 f996 	bl	80019ec <HAL_I2C_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006c6:	f000 f9fc 	bl	8000ac2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006d0:	f002 fd87 	bl	80031e2 <HAL_I2CEx_ConfigAnalogFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 f9f2 	bl	8000ac2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C3_Init+0x74>)
 80006e2:	f002 fdc8 	bl	8003276 <HAL_I2CEx_ConfigDigitalFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 f9e9 	bl	8000ac2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000138 	.word	0x20000138
 80006f8:	40005c00 	.word	0x40005c00
 80006fc:	00707dbd 	.word	0x00707dbd

08000700 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	; 0x58
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2238      	movs	r2, #56	; 0x38
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f006 fc7d 	bl	8007020 <memset>
  if(i2cHandle->Instance==I2C1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a66      	ldr	r2, [pc, #408]	; (80008c4 <HAL_I2C_MspInit+0x1c4>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d137      	bne.n	80007a0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000734:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000738:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4618      	mov	r0, r3
 8000740:	f004 f8fa 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800074a:	f000 f9ba 	bl	8000ac2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff fee6 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000758:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075a:	2312      	movs	r3, #18
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000766:	2304      	movs	r3, #4
 8000768:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800076e:	4619      	mov	r1, r3
 8000770:	4855      	ldr	r0, [pc, #340]	; (80008c8 <HAL_I2C_MspInit+0x1c8>)
 8000772:	f000 ffdb 	bl	800172c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000776:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800077a:	f7ff fee9 	bl	8000550 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	201e      	movs	r0, #30
 8000784:	f000 fed3 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000788:	201e      	movs	r0, #30
 800078a:	f000 feea 	bl	8001562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	201f      	movs	r0, #31
 8000794:	f000 fecb 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000798:	201f      	movs	r0, #31
 800079a:	f000 fee2 	bl	8001562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800079e:	e08c      	b.n	80008ba <HAL_I2C_MspInit+0x1ba>
  else if(i2cHandle->Instance==I2C2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a49      	ldr	r2, [pc, #292]	; (80008cc <HAL_I2C_MspInit+0x1cc>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d138      	bne.n	800081c <HAL_I2C_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007ae:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4618      	mov	r0, r3
 80007ba:	f004 f8bd 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 80007c4:	f000 f97d 	bl	8000ac2 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fea9 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80007ce:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d4:	2312      	movs	r3, #18
 80007d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007e0:	2304      	movs	r3, #4
 80007e2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 ff9d 	bl	800172c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007f2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80007f6:	f7ff feab 	bl	8000550 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2102      	movs	r1, #2
 80007fe:	2020      	movs	r0, #32
 8000800:	f000 fe95 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000804:	2020      	movs	r0, #32
 8000806:	f000 feac 	bl	8001562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 2, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	2021      	movs	r0, #33	; 0x21
 8000810:	f000 fe8d 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000814:	2021      	movs	r0, #33	; 0x21
 8000816:	f000 fea4 	bl	8001562 <HAL_NVIC_EnableIRQ>
}
 800081a:	e04e      	b.n	80008ba <HAL_I2C_MspInit+0x1ba>
  else if(i2cHandle->Instance==I2C3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <HAL_I2C_MspInit+0x1d0>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d149      	bne.n	80008ba <HAL_I2C_MspInit+0x1ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800082c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4618      	mov	r0, r3
 8000838:	f004 f87e 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_I2C_MspInit+0x146>
      Error_Handler();
 8000842:	f000 f93e 	bl	8000ac2 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fe6a 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	2004      	movs	r0, #4
 800084e:	f7ff fe67 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000852:	2310      	movs	r3, #16
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000862:	2304      	movs	r3, #4
 8000864:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800086a:	4619      	mov	r1, r3
 800086c:	4816      	ldr	r0, [pc, #88]	; (80008c8 <HAL_I2C_MspInit+0x1c8>)
 800086e:	f000 ff5d 	bl	800172c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000872:	2301      	movs	r3, #1
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000876:	2312      	movs	r3, #18
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000882:	2304      	movs	r3, #4
 8000884:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800088a:	4619      	mov	r1, r3
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <HAL_I2C_MspInit+0x1d4>)
 800088e:	f000 ff4d 	bl	800172c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000892:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000896:	f7ff fe5b 	bl	8000550 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2102      	movs	r1, #2
 800089e:	2030      	movs	r0, #48	; 0x30
 80008a0:	f000 fe45 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80008a4:	2030      	movs	r0, #48	; 0x30
 80008a6:	f000 fe5c 	bl	8001562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 2, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	2031      	movs	r0, #49	; 0x31
 80008b0:	f000 fe3d 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80008b4:	2031      	movs	r0, #49	; 0x31
 80008b6:	f000 fe54 	bl	8001562 <HAL_NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3758      	adds	r7, #88	; 0x58
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40005400 	.word	0x40005400
 80008c8:	48000400 	.word	0x48000400
 80008cc:	40005800 	.word	0x40005800
 80008d0:	40005c00 	.word	0x40005c00
 80008d4:	48000800 	.word	0x48000800

080008d8 <I2C1_EV_IRQHandler>:

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

void I2C1_EV_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  HAL_I2C_EV_IRQHandler(&hi2c1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <I2C1_EV_IRQHandler+0x10>)
 80008de:	f001 fa59 	bl	8001d94 <HAL_I2C_EV_IRQHandler>

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000030 	.word	0x20000030

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f000 fcd9 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f851 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f7ff fdd9 	bl	80004b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008fe:	f7ff fe3f 	bl	8000580 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000902:	f7ff fe7d 	bl	8000600 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000906:	f7ff febb 	bl	8000680 <MX_I2C3_Init>
  MX_SPI1_Init();
 800090a:	f000 fa05 	bl	8000d18 <MX_SPI1_Init>
  MX_TIM2_Init();
 800090e:	f000 fb6d 	bl	8000fec <MX_TIM2_Init>
//  MX_LoRaWAN_Init();
  MX_RTC_Init();
 8000912:	f000 f91b 	bl	8000b4c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000916:	f000 fc03 	bl	8001120 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t count = 0U;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  uint8_t sent = 0U;
 800091e:	2300      	movs	r3, #0
 8000920:	72fb      	strb	r3, [r7, #11]


  const uint32_t TIMEOUT = 8000000U;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <main+0x90>)
 8000924:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef i2c_status;

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000926:	2001      	movs	r0, #1
 8000928:	f002 fdb2 	bl	8003490 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MASTER_TX_COMPLETE_CB_ID, hal_callback_i2c_master_tx_complete);
 800092c:	4a14      	ldr	r2, [pc, #80]	; (8000980 <main+0x94>)
 800092e:	2100      	movs	r1, #0
 8000930:	4814      	ldr	r0, [pc, #80]	; (8000984 <main+0x98>)
 8000932:	f001 f927 	bl	8001b84 <HAL_I2C_RegisterCallback>
  HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MASTER_RX_COMPLETE_CB_ID, hal_callback_i2c_master_rx_complete);
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <main+0x9c>)
 8000938:	2101      	movs	r1, #1
 800093a:	4812      	ldr	r0, [pc, #72]	; (8000984 <main+0x98>)
 800093c:	f001 f922 	bl	8001b84 <HAL_I2C_RegisterCallback>
  HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_LISTEN_COMPLETE_CB_ID, hal_callback_i2c_listen_complete);
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <main+0xa0>)
 8000942:	2104      	movs	r1, #4
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <main+0x98>)
 8000946:	f001 f91d 	bl	8001b84 <HAL_I2C_RegisterCallback>

  HAL_TIM_Base_Start(&htim2);
 800094a:	4811      	ldr	r0, [pc, #68]	; (8000990 <main+0xa4>)
 800094c:	f004 fe86 	bl	800565c <HAL_TIM_Base_Start>
//
//	  i2c_rx_data[0] = 0x00;
//	  i2c_rx_data[1] = 0x00;


	  	  if (get_timer_2_count() - count > I2C_SEND_INTERVAL_US)
 8000950:	f000 f884 	bl	8000a5c <get_timer_2_count>
 8000954:	4602      	mov	r2, r0
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <main+0xa8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d9f7      	bls.n	8000950 <main+0x64>
	  	  {
	  		  if (HAL_I2C_Master_Transmit_IT(&hi2c1, (0x14 << 1), i2c_tx_data, 5) == HAL_OK)
 8000960:	2305      	movs	r3, #5
 8000962:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <main+0xac>)
 8000964:	2128      	movs	r1, #40	; 0x28
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <main+0x98>)
 8000968:	f001 f9a4 	bl	8001cb4 <HAL_I2C_Master_Transmit_IT>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1ee      	bne.n	8000950 <main+0x64>
			  {
	  			  count = get_timer_2_count();
 8000972:	f000 f873 	bl	8000a5c <get_timer_2_count>
 8000976:	60f8      	str	r0, [r7, #12]
	  	  if (get_timer_2_count() - count > I2C_SEND_INTERVAL_US)
 8000978:	e7ea      	b.n	8000950 <main+0x64>
 800097a:	bf00      	nop
 800097c:	007a1200 	.word	0x007a1200
 8000980:	08000a75 	.word	0x08000a75
 8000984:	20000030 	.word	0x20000030
 8000988:	08000a89 	.word	0x08000a89
 800098c:	08000ab1 	.word	0x08000ab1
 8000990:	200002c8 	.word	0x200002c8
 8000994:	0007a120 	.word	0x0007a120
 8000998:	20000004 	.word	0x20000004

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09a      	sub	sp, #104	; 0x68
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	2248      	movs	r2, #72	; 0x48
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f006 fb38 	bl	8007020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xbc>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <SystemClock_Config+0xbc>)
 80009cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <SystemClock_Config+0xbc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009de:	2309      	movs	r3, #9
 80009e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80009e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 f81f 	bl	8003a40 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000a08:	f000 f85b 	bl	8000ac2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000a0c:	236f      	movs	r3, #111	; 0x6f
 8000a0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 fb89 	bl	8004144 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a38:	f000 f843 	bl	8000ac2 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000a42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a46:	f003 fcbf 	bl	80043c8 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f004 f88e 	bl	8004b6c <HAL_RCCEx_EnableLSCO>
}
 8000a50:	bf00      	nop
 8000a52:	3768      	adds	r7, #104	; 0x68
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	58000400 	.word	0x58000400

08000a5c <get_timer_2_count>:

/* USER CODE BEGIN 4 */

uint32_t get_timer_2_count()
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <get_timer_2_count+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200002c8 	.word	0x200002c8

08000a74 <hal_callback_i2c_master_tx_complete>:

void hal_callback_i2c_master_tx_complete(I2C_HandleTypeDef *hi2c)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
//	HAL_I2C_Master_Receive_IT(&hi2c1, (0x14 << 1), i2c_rx_data, RX_SIZE);
//	timeout_count = 0U;
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
	...

08000a88 <hal_callback_i2c_master_rx_complete>:

void hal_callback_i2c_master_rx_complete(I2C_HandleTypeDef *hi2c)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	for (uint8_t index = 0; 0 < RX_SIZE; ++index)
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
	{
		rx_bytes[index] = i2c_rx_data[index];
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	4903      	ldr	r1, [pc, #12]	; (8000aa8 <hal_callback_i2c_master_rx_complete+0x20>)
 8000a9a:	5c89      	ldrb	r1, [r1, r2]
 8000a9c:	4a03      	ldr	r2, [pc, #12]	; (8000aac <hal_callback_i2c_master_rx_complete+0x24>)
 8000a9e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t index = 0; 0 < RX_SIZE; ++index)
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
		rx_bytes[index] = i2c_rx_data[index];
 8000aa6:	e7f5      	b.n	8000a94 <hal_callback_i2c_master_rx_complete+0xc>
 8000aa8:	200001f8 	.word	0x200001f8
 8000aac:	200001fc 	.word	0x200001fc

08000ab0 <hal_callback_i2c_listen_complete>:
	}
//	received = 1U;
}

void hal_callback_i2c_listen_complete(I2C_HandleTypeDef *hi2c)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac6:	b672      	cpsid	i
}
 8000ac8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aca:	e7fe      	b.n	8000aca <Error_Handler+0x8>

08000acc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <LL_AHB2_GRP1_EnableClock>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b10:	68fb      	ldr	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <LL_APB1_GRP1_EnableClock>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b40:	68fb      	ldr	r3, [r7, #12]
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b64:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b66:	4a2e      	ldr	r2, [pc, #184]	; (8000c20 <MX_RTC_Init+0xd4>)
 8000b68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b70:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b72:	227f      	movs	r2, #127	; 0x7f
 8000b74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b78:	22ff      	movs	r2, #255	; 0xff
 8000b7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b94:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ba2:	481e      	ldr	r0, [pc, #120]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000ba4:	f003 fffa 	bl	8004b9c <HAL_RTC_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000bae:	f7ff ff88 	bl	8000ac2 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000bce:	f004 f867 	bl	8004ca0 <HAL_RTC_SetTime>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_RTC_Init+0x90>
  {
    Error_Handler();
 8000bd8:	f7ff ff73 	bl	8000ac2 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000be0:	2301      	movs	r3, #1
 8000be2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480a      	ldr	r0, [pc, #40]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000bf4:	f004 f8f0 	bl	8004dd8 <HAL_RTC_SetDate>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000bfe:	f7ff ff60 	bl	8000ac2 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <MX_RTC_Init+0xd0>)
 8000c04:	f004 fa26 	bl	8005054 <HAL_RTCEx_SetRefClock>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000c0e:	f7ff ff58 	bl	8000ac2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000200 	.word	0x20000200
 8000c20:	40002800 	.word	0x40002800

08000c24 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b096      	sub	sp, #88	; 0x58
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2238      	movs	r2, #56	; 0x38
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f006 f9eb 	bl	8007020 <memset>
  if(rtcHandle->Instance==RTC)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_RTC_MspInit+0x90>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d12a      	bne.n	8000caa <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8000c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5e:	643b      	str	r3, [r7, #64]	; 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fe67 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8000c70:	f7ff ff27 	bl	8000ac2 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c74:	f7ff ff2a 	bl	8000acc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c7c:	f7ff ff4e 	bl	8000b1c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff ff33 	bl	8000aec <LL_AHB2_GRP1_EnableClock>
    /**RTC GPIO Configuration
    PA10     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca6:	f000 fd41 	bl	800172c <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	3758      	adds	r7, #88	; 0x58
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40002800 	.word	0x40002800

08000cb8 <LL_AHB2_GRP1_EnableClock>:
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d1e:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <MX_SPI1_Init+0x6c>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d6e:	f004 f9b3 	bl	80050d8 <HAL_SPI_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000d78:	f7ff fea3 	bl	8000ac2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000238 	.word	0x20000238
 8000d84:	40013000 	.word	0x40013000

08000d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <HAL_SPI_MspInit+0x94>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d133      	bne.n	8000e12 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000daa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000dae:	f7ff ff9b 	bl	8000ce8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff ff80 	bl	8000cb8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff ff7d 	bl	8000cb8 <LL_AHB2_GRP1_EnableClock>
    PA11     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB2     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f000 fca5 	bl	800172c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_2;
 8000de2:	232c      	movs	r3, #44	; 0x2c
 8000de4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <HAL_SPI_MspInit+0x98>)
 8000dfe:	f000 fc95 	bl	800172c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2102      	movs	r1, #2
 8000e06:	2022      	movs	r0, #34	; 0x22
 8000e08:	f000 fb91 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e0c:	2022      	movs	r0, #34	; 0x22
 8000e0e:	f000 fba8 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40013000 	.word	0x40013000
 8000e20:	48000400 	.word	0x48000400

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 2, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	f06f 000b 	mvn.w	r0, #11
 8000e30:	f000 fb7d 	bl	800152e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2102      	movs	r1, #2
 8000e38:	f06f 000a 	mvn.w	r0, #10
 8000e3c:	f000 fb77 	bl	800152e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	f06f 0009 	mvn.w	r0, #9
 8000e48:	f000 fb71 	bl	800152e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2102      	movs	r1, #2
 8000e50:	f06f 0004 	mvn.w	r0, #4
 8000e54:	f000 fb6b 	bl	800152e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f06f 0003 	mvn.w	r0, #3
 8000e60:	f000 fb65 	bl	800152e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	f06f 0001 	mvn.w	r0, #1
 8000e6c:	f000 fb5f 	bl	800152e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 2, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2102      	movs	r1, #2
 8000e74:	2005      	movs	r0, #5
 8000e76:	f000 fb5a 	bl	800152e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000e7a:	2005      	movs	r0, #5
 8000e7c:	f000 fb71 	bl	8001562 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eca:	f000 fa47 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
	...

08000ee0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <I2C1_ER_IRQHandler+0x10>)
 8000ee6:	f000 ff6f 	bl	8001dc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000030 	.word	0x20000030

08000ef4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <I2C2_EV_IRQHandler+0x10>)
 8000efa:	f000 ff4b 	bl	8001d94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000b4 	.word	0x200000b4

08000f08 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <I2C2_ER_IRQHandler+0x10>)
 8000f0e:	f000 ff5b 	bl	8001dc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000b4 	.word	0x200000b4

08000f1c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <SPI1_IRQHandler+0x10>)
 8000f22:	f004 f9e3 	bl	80052ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000238 	.word	0x20000238

08000f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <USART1_IRQHandler+0x10>)
 8000f36:	f004 ff45 	bl	8005dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000384 	.word	0x20000384

08000f44 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX Occupied Interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <IPCC_C1_RX_IRQHandler+0x10>)
 8000f4a:	f002 fa2d 	bl	80033a8 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001bc 	.word	0x200001bc

08000f58 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX Free Interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <IPCC_C1_TX_IRQHandler+0x10>)
 8000f5e:	f002 f9d5 	bl	800330c <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200001bc 	.word	0x200001bc

08000f6c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 Event Interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <I2C3_EV_IRQHandler+0x10>)
 8000f72:	f000 ff0f 	bl	8001d94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000138 	.word	0x20000138

08000f80 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 Error Interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <I2C3_ER_IRQHandler+0x10>)
 8000f86:	f000 ff1f 	bl	8001dc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000138 	.word	0x20000138

08000f94 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_GetTick+0x24>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000fa6:	f000 f87f 	bl	80010a8 <TIMER_IF_GetTimerValue>
 8000faa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002c4 	.word	0x200002c4

08000fbc <LL_APB1_GRP1_EnableClock>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_TIM2_Init+0x98>)
 800100c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001010:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_TIM2_Init+0x98>)
 8001014:	221f      	movs	r2, #31
 8001016:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_TIM2_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_TIM2_Init+0x98>)
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_TIM2_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_TIM2_Init+0x98>)
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001032:	4814      	ldr	r0, [pc, #80]	; (8001084 <MX_TIM2_Init+0x98>)
 8001034:	f004 faae 	bl	8005594 <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800103e:	f7ff fd40 	bl	8000ac2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_TIM2_Init+0x98>)
 8001050:	f004 fb48 	bl	80056e4 <HAL_TIM_ConfigClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800105a:	f7ff fd32 	bl	8000ac2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <MX_TIM2_Init+0x98>)
 800106c:	f004 fdb6 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001076:	f7ff fd24 	bl	8000ac2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200002c8 	.word	0x200002c8

08001088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001098:	d102      	bne.n	80010a0 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ff8e 	bl	8000fbc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <TIMER_IF_GetTimerValue>:
  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
}

uint32_t TIMER_IF_GetTimerValue(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 80010b2:	687b      	ldr	r3, [r7, #4]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <LL_AHB2_GRP1_EnableClock>:
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <LL_APB2_GRP1_EnableClock>:
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4313      	orrs	r3, r2
 8001104:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4013      	ands	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
	...

08001120 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001124:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <MX_USART1_UART_Init+0x94>)
 8001128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 800116a:	f004 fdda 	bl	8005d22 <HAL_UART_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001174:	f7ff fca5 	bl	8000ac2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001178:	2100      	movs	r1, #0
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 800117c:	f005 fe88 	bl	8006e90 <HAL_UARTEx_SetTxFifoThreshold>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001186:	f7ff fc9c 	bl	8000ac2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 800118e:	f005 febd 	bl	8006f0c <HAL_UARTEx_SetRxFifoThreshold>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001198:	f7ff fc93 	bl	8000ac2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_USART1_UART_Init+0x90>)
 800119e:	f005 fe3f 	bl	8006e20 <HAL_UARTEx_DisableFifoMode>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f7ff fc8b 	bl	8000ac2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000384 	.word	0x20000384
 80011b4:	40013800 	.word	0x40013800

080011b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b096      	sub	sp, #88	; 0x58
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2238      	movs	r2, #56	; 0x38
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 ff21 	bl	8007020 <memset>
  if(uartHandle->Instance==USART1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_UART_MspInit+0x94>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d12d      	bne.n	8001244 <HAL_UART_MspInit+0x8c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011ec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80011f0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fb9e 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001202:	f7ff fc5e 	bl	8000ac2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001206:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800120a:	f7ff ff70 	bl	80010ee <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	2002      	movs	r0, #2
 8001210:	f7ff ff55 	bl	80010be <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001214:	23c0      	movs	r3, #192	; 0xc0
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001224:	2307      	movs	r3, #7
 8001226:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800122c:	4619      	mov	r1, r3
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <HAL_UART_MspInit+0x98>)
 8001230:	f000 fa7c 	bl	800172c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2102      	movs	r1, #2
 8001238:	2024      	movs	r0, #36	; 0x24
 800123a:	f000 f978 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800123e:	2024      	movs	r0, #36	; 0x24
 8001240:	f000 f98f 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	3758      	adds	r7, #88	; 0x58
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40013800 	.word	0x40013800
 8001250:	48000400 	.word	0x48000400

08001254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001256:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001258:	f7ff f90c 	bl	8000474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <LoopForever+0xe>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	; (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001282:	f005 fed5 	bl	8007030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001286:	f7ff fb31 	bl	80008ec <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   r0, =_estack
 800128c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001298:	08007184 	.word	0x08007184
  ldr r2, =_sbss
 800129c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80012a0:	2000041c 	.word	0x2000041c

080012a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f930 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012b8:	f003 f960 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_Init+0x3c>)
 80012c0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c2:	200f      	movs	r0, #15
 80012c4:	f000 f810 	bl	80012e8 <HAL_InitTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	e001      	b.n	80012d8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d4:	f7ff fda6 	bl	8000e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_InitTick+0x6c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d024      	beq.n	8001346 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012fc:	f003 f93e 	bl	800457c <HAL_RCC_GetHCLKFreq>
 8001300:	4602      	mov	r2, r0
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_InitTick+0x6c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f932 	bl	800157e <HAL_SYSTICK_Config>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	d809      	bhi.n	800133a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001326:	2200      	movs	r2, #0
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132e:	f000 f8fe 	bl	800152e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <HAL_InitTick+0x70>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e007      	b.n	800134a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e004      	b.n	800134a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e001      	b.n	800134a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000010 	.word	0x20000010
 8001358:	2000000c 	.word	0x2000000c

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000010 	.word	0x20000010
 800137c:	20000418 	.word	0x20000418

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4906      	ldr	r1, [pc, #24]	; (8001418 <__NVIC_EnableIRQ+0x34>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f8:	f7ff ff90 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff2d 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff44 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff92 	bl	8001470 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff61 	bl	800141c <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff37 	bl	80013e4 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa4 	bl	80014d4 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e04f      	b.n	8001648 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d008      	beq.n	80015c6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2204      	movs	r2, #4
 80015b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e040      	b.n	8001648 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 020e 	bic.w	r2, r2, #14
 80015d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 021c 	and.w	r2, r3, #28
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001612:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00c      	beq.n	8001636 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001634:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d005      	beq.n	8001676 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2204      	movs	r2, #4
 800166e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e047      	b.n	8001706 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 020e 	bic.w	r2, r2, #14
 8001684:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 021c 	and.w	r2, r3, #28
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00c      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
    }
  }
  return status;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800171e:	b2db      	uxtb	r3, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
	...

0800172c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e140      	b.n	80019be <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8132 	beq.w	80019b8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d005      	beq.n	800176c <HAL_GPIO_Init+0x40>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d130      	bne.n	80017ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a2:	2201      	movs	r2, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 0201 	and.w	r2, r3, #1
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d017      	beq.n	800180a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d123      	bne.n	800185e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	6939      	ldr	r1, [r7, #16]
 800185a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0203 	and.w	r2, r3, #3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 808c 	beq.w	80019b8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80018a0:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	2207      	movs	r2, #7
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ca:	d00d      	beq.n	80018e8 <HAL_GPIO_Init+0x1bc>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a44      	ldr	r2, [pc, #272]	; (80019e0 <HAL_GPIO_Init+0x2b4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d007      	beq.n	80018e4 <HAL_GPIO_Init+0x1b8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a43      	ldr	r2, [pc, #268]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_GPIO_Init+0x1b4>
 80018dc:	2302      	movs	r3, #2
 80018de:	e004      	b.n	80018ea <HAL_GPIO_Init+0x1be>
 80018e0:	2307      	movs	r3, #7
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x1be>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <HAL_GPIO_Init+0x1be>
 80018e8:	2300      	movs	r3, #0
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	f002 0203 	and.w	r2, r2, #3
 80018f0:	0092      	lsls	r2, r2, #2
 80018f2:	4093      	lsls	r3, r2
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018fa:	4938      	ldr	r1, [pc, #224]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800192c:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 800195e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001962:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001982:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 800198c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001990:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f aeb7 	bne.w	800173c <HAL_GPIO_Init+0x10>
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40010000 	.word	0x40010000
 80019e0:	48000400 	.word	0x48000400
 80019e4:	48000800 	.word	0x48000800
 80019e8:	58000800 	.word	0x58000800

080019ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0a7      	b.n	8001b4e <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d12c      	bne.n	8001a64 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a50      	ldr	r2, [pc, #320]	; (8001b58 <HAL_I2C_Init+0x16c>)
 8001a16:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a50      	ldr	r2, [pc, #320]	; (8001b5c <HAL_I2C_Init+0x170>)
 8001a1c:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <HAL_I2C_Init+0x174>)
 8001a22:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4f      	ldr	r2, [pc, #316]	; (8001b64 <HAL_I2C_Init+0x178>)
 8001a28:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4e      	ldr	r2, [pc, #312]	; (8001b68 <HAL_I2C_Init+0x17c>)
 8001a2e:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a4e      	ldr	r2, [pc, #312]	; (8001b6c <HAL_I2C_Init+0x180>)
 8001a34:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4d      	ldr	r2, [pc, #308]	; (8001b70 <HAL_I2C_Init+0x184>)
 8001a3a:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a4d      	ldr	r2, [pc, #308]	; (8001b74 <HAL_I2C_Init+0x188>)
 8001a40:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4c      	ldr	r2, [pc, #304]	; (8001b78 <HAL_I2C_Init+0x18c>)
 8001a46:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a4c      	ldr	r2, [pc, #304]	; (8001b7c <HAL_I2C_Init+0x190>)
 8001a4c:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_I2C_Init+0x194>)
 8001a5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2224      	movs	r2, #36	; 0x24
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e006      	b.n	8001ac0 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001abe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d104      	bne.n	8001ad2 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69d9      	ldr	r1, [r3, #28]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1a      	ldr	r2, [r3, #32]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	08001e7f 	.word	0x08001e7f
 8001b5c:	08001e91 	.word	0x08001e91
 8001b60:	08001ea3 	.word	0x08001ea3
 8001b64:	08001eb5 	.word	0x08001eb5
 8001b68:	08001ee1 	.word	0x08001ee1
 8001b6c:	08001ef3 	.word	0x08001ef3
 8001b70:	08001f05 	.word	0x08001f05
 8001b74:	08001f17 	.word	0x08001f17
 8001b78:	08001f29 	.word	0x08001f29
 8001b7c:	08001ec7 	.word	0x08001ec7
 8001b80:	08000701 	.word	0x08000701

08001b84 <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_I2C_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e07e      	b.n	8001caa <HAL_I2C_RegisterCallback+0x126>
  }

  if (HAL_I2C_STATE_READY == hi2c->State)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d151      	bne.n	8001c5c <HAL_I2C_RegisterCallback+0xd8>
  {
    switch (CallbackID)
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
 8001bba:	2b0a      	cmp	r3, #10
 8001bbc:	d845      	bhi.n	8001c4a <HAL_I2C_RegisterCallback+0xc6>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <HAL_I2C_RegisterCallback+0x40>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bf1 	.word	0x08001bf1
 8001bc8:	08001bf9 	.word	0x08001bf9
 8001bcc:	08001c01 	.word	0x08001c01
 8001bd0:	08001c09 	.word	0x08001c09
 8001bd4:	08001c11 	.word	0x08001c11
 8001bd8:	08001c19 	.word	0x08001c19
 8001bdc:	08001c21 	.word	0x08001c21
 8001be0:	08001c29 	.word	0x08001c29
 8001be4:	08001c31 	.word	0x08001c31
 8001be8:	08001c39 	.word	0x08001c39
 8001bec:	08001c41 	.word	0x08001c41
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8001bf6:	e057      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8001bfe:	e053      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8001c06:	e04f      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8001c0e:	e04b      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8001c16:	e047      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8001c1e:	e043      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8001c26:	e03f      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8001c2e:	e03b      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8001c36:	e037      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8001c3e:	e033      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8001c48:	e02e      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
        break;
 8001c5a:	e025      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d117      	bne.n	8001c98 <HAL_I2C_RegisterCallback+0x114>
  {
    switch (CallbackID)
 8001c68:	7afb      	ldrb	r3, [r7, #11]
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	d002      	beq.n	8001c74 <HAL_I2C_RegisterCallback+0xf0>
 8001c6e:	2b0a      	cmp	r3, #10
 8001c70:	d004      	beq.n	8001c7c <HAL_I2C_RegisterCallback+0xf8>
 8001c72:	e008      	b.n	8001c86 <HAL_I2C_RegisterCallback+0x102>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8001c7a:	e015      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8001c84:	e010      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
        break;
 8001c96:	e007      	b.n	8001ca8 <HAL_I2C_RegisterCallback+0x124>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	817b      	strh	r3, [r7, #10]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d153      	bne.n	8001d7c <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce2:	d101      	bne.n	8001ce8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e04a      	b.n	8001d7e <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2C_Master_Transmit_IT+0x42>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e043      	b.n	8001d7e <HAL_I2C_Master_Transmit_IT+0xca>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2221      	movs	r2, #33	; 0x21
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2210      	movs	r2, #16
 8001d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	893a      	ldrh	r2, [r7, #8]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_I2C_Master_Transmit_IT+0xd8>)
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	d906      	bls.n	8001d44 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	22ff      	movs	r2, #255	; 0xff
 8001d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e007      	b.n	8001d54 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d52:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	8979      	ldrh	r1, [r7, #10]
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f001 f946 	bl	8002ff4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d70:	2101      	movs	r1, #1
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f001 f96e 	bl	8003054 <I2C_Enable_IRQ>

    return HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	ffff0000 	.word	0xffff0000
 8001d8c:	08001f3b 	.word	0x08001f3b
 8001d90:	80002000 	.word	0x80002000

08001d94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00f      	beq.n	8001e0a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e08:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00f      	beq.n	8001e34 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0208 	orr.w	r2, r3, #8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00f      	beq.n	8001e5e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f043 0202 	orr.w	r2, r3, #2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 030b 	and.w	r3, r3, #11
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 ff85 	bl	8002d80 <I2C_ITError>
  }
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b088      	sub	sp, #32
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <I2C_Master_ISR_IT+0x1e>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e108      	b.n	800216a <I2C_Master_ISR_IT+0x230>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d012      	beq.n	8001f90 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	f043 0204 	orr.w	r2, r3, #4
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fff2 	bl	8002f72 <I2C_Flush_TXDR>
 8001f8e:	e0d9      	b.n	8002144 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d022      	beq.n	8001fe0 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01d      	beq.n	8001fe0 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0304 	bic.w	r3, r3, #4
 8001faa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fde:	e0b1      	b.n	8002144 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01d      	beq.n	8002026 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002024:	e08e      	b.n	8002144 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202c:	2b00      	cmp	r3, #0
 800202e:	d05c      	beq.n	80020ea <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002036:	2b00      	cmp	r3, #0
 8002038:	d057      	beq.n	80020ea <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d040      	beq.n	80020c6 <I2C_Master_ISR_IT+0x18c>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d13c      	bne.n	80020c6 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	b29b      	uxth	r3, r3
 8002054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002058:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2bff      	cmp	r3, #255	; 0xff
 8002062:	d90e      	bls.n	8002082 <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	22ff      	movs	r2, #255	; 0xff
 8002068:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	b2da      	uxtb	r2, r3
 8002070:	8a79      	ldrh	r1, [r7, #18]
 8002072:	2300      	movs	r3, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 ffba 	bl	8002ff4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002080:	e032      	b.n	80020e8 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002094:	d00b      	beq.n	80020ae <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80020a0:	8a79      	ldrh	r1, [r7, #18]
 80020a2:	2000      	movs	r0, #0
 80020a4:	9000      	str	r0, [sp, #0]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 ffa4 	bl	8002ff4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ac:	e01c      	b.n	80020e8 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	8a79      	ldrh	r1, [r7, #18]
 80020b6:	2300      	movs	r3, #0
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 ff98 	bl	8002ff4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c4:	e010      	b.n	80020e8 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d4:	d003      	beq.n	80020de <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fb88 	bl	80027ec <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020dc:	e032      	b.n	8002144 <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fe4d 	bl	8002d80 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020e6:	e02d      	b.n	8002144 <I2C_Master_ISR_IT+0x20a>
 80020e8:	e02c      	b.n	8002144 <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d027      	beq.n	8002144 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d022      	beq.n	8002144 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d119      	bne.n	800213c <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002116:	d015      	beq.n	8002144 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002120:	d108      	bne.n	8002134 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e007      	b.n	8002144 <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fb59 	bl	80027ec <I2C_ITMasterSeqCplt>
 800213a:	e003      	b.n	8002144 <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800213c:	2140      	movs	r1, #64	; 0x40
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fe1e 	bl	8002d80 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fbe4 	bl	8002928 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <I2C_Slave_ISR_IT+0x24>
 8002192:	2302      	movs	r3, #2
 8002194:	e0e1      	b.n	800235a <I2C_Slave_ISR_IT+0x1e8>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80021b2:	6939      	ldr	r1, [r7, #16]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fc83 	bl	8002ac0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d04b      	beq.n	800225c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d046      	beq.n	800225c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d128      	bne.n	800222a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b28      	cmp	r3, #40	; 0x28
 80021e2:	d108      	bne.n	80021f6 <I2C_Slave_ISR_IT+0x84>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021ea:	d104      	bne.n	80021f6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80021ec:	6939      	ldr	r1, [r7, #16]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fd70 	bl	8002cd4 <I2C_ITListenCplt>
 80021f4:	e031      	b.n	800225a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b29      	cmp	r3, #41	; 0x29
 8002200:	d10e      	bne.n	8002220 <I2C_Slave_ISR_IT+0xae>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002208:	d00a      	beq.n	8002220 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2210      	movs	r2, #16
 8002210:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fead 	bl	8002f72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fb26 	bl	800286a <I2C_ITSlaveSeqCplt>
 800221e:	e01c      	b.n	800225a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2210      	movs	r2, #16
 8002226:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002228:	e08f      	b.n	800234a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2210      	movs	r2, #16
 8002230:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f043 0204 	orr.w	r2, r3, #4
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <I2C_Slave_ISR_IT+0xda>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800224a:	d17e      	bne.n	800234a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	4619      	mov	r1, r3
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fd94 	bl	8002d80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002258:	e077      	b.n	800234a <I2C_Slave_ISR_IT+0x1d8>
 800225a:	e076      	b.n	800234a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d02f      	beq.n	80022c6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800226c:	2b00      	cmp	r3, #0
 800226e:	d02a      	beq.n	80022c6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d018      	beq.n	80022ac <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d14b      	bne.n	800234e <I2C_Slave_ISR_IT+0x1dc>
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022bc:	d047      	beq.n	800234e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fad3 	bl	800286a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80022c4:	e043      	b.n	800234e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80022da:	6939      	ldr	r1, [r7, #16]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fa01 	bl	80026e4 <I2C_ITAddrCplt>
 80022e2:	e035      	b.n	8002350 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d030      	beq.n	8002350 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d02b      	beq.n	8002350 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d018      	beq.n	8002334 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
 8002332:	e00d      	b.n	8002350 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233a:	d002      	beq.n	8002342 <I2C_Slave_ISR_IT+0x1d0>
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fa91 	bl	800286a <I2C_ITSlaveSeqCplt>
 8002348:	e002      	b.n	8002350 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800234a:	bf00      	nop
 800234c:	e000      	b.n	8002350 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800234e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b088      	sub	sp, #32
 8002366:	af02      	add	r7, sp, #8
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <I2C_Master_ISR_DMA+0x1a>
 8002378:	2302      	movs	r3, #2
 800237a:	e0d9      	b.n	8002530 <I2C_Master_ISR_DMA+0x1ce>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002394:	2b00      	cmp	r3, #0
 8002396:	d011      	beq.n	80023bc <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2210      	movs	r2, #16
 800239e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80023ac:	2120      	movs	r1, #32
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fe50 	bl	8003054 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fddc 	bl	8002f72 <I2C_Flush_TXDR>
 80023ba:	e0b4      	b.n	8002526 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d071      	beq.n	80024aa <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d06c      	beq.n	80024aa <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023de:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d04e      	beq.n	8002488 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2bff      	cmp	r3, #255	; 0xff
 8002400:	d906      	bls.n	8002410 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e010      	b.n	8002432 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002422:	d003      	beq.n	800242c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	e002      	b.n	8002432 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800242c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002430:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	b2da      	uxtb	r2, r3
 8002438:	8a79      	ldrh	r1, [r7, #18]
 800243a:	2300      	movs	r3, #0
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fdd7 	bl	8002ff4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b22      	cmp	r3, #34	; 0x22
 8002462:	d108      	bne.n	8002476 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002472:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002474:	e057      	b.n	8002526 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002484:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002486:	e04e      	b.n	8002526 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002496:	d003      	beq.n	80024a0 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f9a7 	bl	80027ec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800249e:	e042      	b.n	8002526 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fc6c 	bl	8002d80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80024a8:	e03d      	b.n	8002526 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d028      	beq.n	8002506 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d023      	beq.n	8002506 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d119      	bne.n	80024fc <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024d6:	d025      	beq.n	8002524 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024e0:	d108      	bne.n	80024f4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024f0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80024f2:	e017      	b.n	8002524 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f979 	bl	80027ec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80024fa:	e013      	b.n	8002524 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fc3e 	bl	8002d80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002504:	e00e      	b.n	8002524 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fa03 	bl	8002928 <I2C_ITMasterCplt>
 8002522:	e000      	b.n	8002526 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002524:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <I2C_Slave_ISR_DMA+0x24>
 8002558:	2302      	movs	r3, #2
 800255a:	e0bf      	b.n	80026dc <I2C_Slave_ISR_DMA+0x1a4>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 faa0 	bl	8002ac0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8095 	beq.w	80026b6 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 808f 	beq.w	80026b6 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d07d      	beq.n	80026a8 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00c      	beq.n	80025ce <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80025ca:	2301      	movs	r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d128      	bne.n	8002648 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b28      	cmp	r3, #40	; 0x28
 8002600:	d108      	bne.n	8002614 <I2C_Slave_ISR_DMA+0xdc>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002608:	d104      	bne.n	8002614 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fb61 	bl	8002cd4 <I2C_ITListenCplt>
 8002612:	e048      	b.n	80026a6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b29      	cmp	r3, #41	; 0x29
 800261e:	d10e      	bne.n	800263e <I2C_Slave_ISR_DMA+0x106>
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002626:	d00a      	beq.n	800263e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2210      	movs	r2, #16
 800262e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fc9e 	bl	8002f72 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f917 	bl	800286a <I2C_ITSlaveSeqCplt>
 800263c:	e033      	b.n	80026a6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2210      	movs	r2, #16
 8002644:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002646:	e034      	b.n	80026b2 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2210      	movs	r2, #16
 800264e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002662:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <I2C_Slave_ISR_DMA+0x13a>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002670:	d11f      	bne.n	80026b2 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b21      	cmp	r3, #33	; 0x21
 8002676:	d002      	beq.n	800267e <I2C_Slave_ISR_DMA+0x146>
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b29      	cmp	r3, #41	; 0x29
 800267c:	d103      	bne.n	8002686 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2221      	movs	r2, #33	; 0x21
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
 8002684:	e008      	b.n	8002698 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b22      	cmp	r3, #34	; 0x22
 800268a:	d002      	beq.n	8002692 <I2C_Slave_ISR_DMA+0x15a>
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b2a      	cmp	r3, #42	; 0x2a
 8002690:	d102      	bne.n	8002698 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2222      	movs	r2, #34	; 0x22
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	4619      	mov	r1, r3
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fb6e 	bl	8002d80 <I2C_ITError>
      if (treatdmanack == 1U)
 80026a4:	e005      	b.n	80026b2 <I2C_Slave_ISR_DMA+0x17a>
 80026a6:	e004      	b.n	80026b2 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2210      	movs	r2, #16
 80026ae:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026b0:	e00f      	b.n	80026d2 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80026b2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026b4:	e00d      	b.n	80026d2 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f809 	bl	80026e4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026fa:	2b28      	cmp	r3, #40	; 0x28
 80026fc:	d16a      	bne.n	80027d4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	b29b      	uxth	r3, r3
 8002718:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800271c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	b29b      	uxth	r3, r3
 8002726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800272a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	b29b      	uxth	r3, r3
 8002734:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002738:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d138      	bne.n	80027b4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	09db      	lsrs	r3, r3, #7
 8002746:	b29a      	uxth	r2, r3
 8002748:	89bb      	ldrh	r3, [r7, #12]
 800274a:	4053      	eors	r3, r2
 800274c:	b29b      	uxth	r3, r3
 800274e:	f003 0306 	and.w	r3, r3, #6
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11c      	bne.n	8002790 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002768:	2b02      	cmp	r3, #2
 800276a:	d13b      	bne.n	80027e4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2208      	movs	r2, #8
 8002778:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002786:	89ba      	ldrh	r2, [r7, #12]
 8002788:	7bf9      	ldrb	r1, [r7, #15]
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800278e:	e029      	b.n	80027e4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002790:	893b      	ldrh	r3, [r7, #8]
 8002792:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fcc5 	bl	8003128 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027aa:	89ba      	ldrh	r2, [r7, #12]
 80027ac:	7bf9      	ldrb	r1, [r7, #15]
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
}
 80027b2:	e017      	b.n	80027e4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fcb5 	bl	8003128 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ca:	89ba      	ldrh	r2, [r7, #12]
 80027cc:	7bf9      	ldrb	r1, [r7, #15]
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
}
 80027d2:	e007      	b.n	80027e4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b21      	cmp	r3, #33	; 0x21
 8002806:	d116      	bne.n	8002836 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2211      	movs	r2, #17
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800281c:	2101      	movs	r1, #1
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fc82 	bl	8003128 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002834:	e015      	b.n	8002862 <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2212      	movs	r2, #18
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800284a:	2102      	movs	r1, #2
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fc6b 	bl	8003128 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e00c      	b.n	80028b8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b29      	cmp	r3, #41	; 0x29
 80028c2:	d113      	bne.n	80028ec <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2228      	movs	r2, #40	; 0x28
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2221      	movs	r2, #33	; 0x21
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028d2:	2101      	movs	r1, #1
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fc27 	bl	8003128 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 80028ea:	e018      	b.n	800291e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b2a      	cmp	r3, #42	; 0x2a
 80028f6:	d112      	bne.n	800291e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2228      	movs	r2, #40	; 0x28
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2222      	movs	r2, #34	; 0x22
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002906:	2102      	movs	r1, #2
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fc0d 	bl	8003128 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2220      	movs	r2, #32
 800293c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b21      	cmp	r3, #33	; 0x21
 8002948:	d107      	bne.n	800295a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800294a:	2101      	movs	r1, #1
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fbeb 	bl	8003128 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2211      	movs	r2, #17
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
 8002958:	e00c      	b.n	8002974 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b22      	cmp	r3, #34	; 0x22
 8002964:	d106      	bne.n	8002974 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002966:	2102      	movs	r1, #2
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fbdd 	bl	8003128 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2212      	movs	r2, #18
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <I2C_ITMasterCplt+0x190>)
 8002980:	400b      	ands	r3, r1
 8002982:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <I2C_ITMasterCplt+0x194>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2210      	movs	r2, #16
 80029a0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f043 0204 	orr.w	r2, r3, #4
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b60      	cmp	r3, #96	; 0x60
 80029b8:	d10a      	bne.n	80029d0 <I2C_ITMasterCplt+0xa8>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80029ce:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 face 	bl	8002f72 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b60      	cmp	r3, #96	; 0x60
 80029e6:	d002      	beq.n	80029ee <I2C_ITMasterCplt+0xc6>
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f9c3 	bl	8002d80 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80029fa:	e058      	b.n	8002aae <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b21      	cmp	r3, #33	; 0x21
 8002a06:	d126      	bne.n	8002a56 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b40      	cmp	r3, #64	; 0x40
 8002a20:	d10c      	bne.n	8002a3c <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
}
 8002a3a:	e038      	b.n	8002aae <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
}
 8002a54:	e02b      	b.n	8002aae <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b22      	cmp	r3, #34	; 0x22
 8002a60:	d125      	bne.n	8002aae <I2C_ITMasterCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d10c      	bne.n	8002a96 <I2C_ITMasterCplt+0x16e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
}
 8002a94:	e00b      	b.n	8002aae <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	fe00e800 	.word	0xfe00e800
 8002abc:	ffff0000 	.word	0xffff0000

08002ac0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002adc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b21      	cmp	r3, #33	; 0x21
 8002aea:	d002      	beq.n	8002af2 <I2C_ITSlaveCplt+0x32>
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b29      	cmp	r3, #41	; 0x29
 8002af0:	d108      	bne.n	8002b04 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002af2:	f248 0101 	movw	r1, #32769	; 0x8001
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fb16 	bl	8003128 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2221      	movs	r2, #33	; 0x21
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
 8002b02:	e00d      	b.n	8002b20 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b22      	cmp	r3, #34	; 0x22
 8002b08:	d002      	beq.n	8002b10 <I2C_ITSlaveCplt+0x50>
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b0e:	d107      	bne.n	8002b20 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b10:	f248 0102 	movw	r1, #32770	; 0x8002
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fb07 	bl	8003128 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2222      	movs	r2, #34	; 0x22
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <I2C_ITSlaveCplt+0x20c>)
 8002b3c:	400b      	ands	r3, r1
 8002b3e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa16 	bl	8002f72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01f      	beq.n	8002ba8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b76:	e017      	b.n	8002ba8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d020      	beq.n	8002bf4 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8aa 	bl	8002d80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b28      	cmp	r3, #40	; 0x28
 8002c36:	d144      	bne.n	8002cc2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c38:	6979      	ldr	r1, [r7, #20]
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f84a 	bl	8002cd4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c40:	e03f      	b.n	8002cc2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c4a:	d015      	beq.n	8002c78 <I2C_ITSlaveCplt+0x1b8>
    I2C_ITSlaveSeqCplt(hi2c);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fe0c 	bl	800286a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <I2C_ITSlaveCplt+0x210>)
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
}
 8002c76:	e024      	b.n	8002cc2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b22      	cmp	r3, #34	; 0x22
 8002c82:	d10f      	bne.n	8002ca4 <I2C_ITSlaveCplt+0x1e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
}
 8002ca2:	e00e      	b.n	8002cc2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	4798      	blx	r3
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	fe00e800 	.word	0xfe00e800
 8002cd0:	ffff0000 	.word	0xffff0000

08002cd4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <I2C_ITListenCplt+0xa8>)
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d022      	beq.n	8002d50 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d012      	beq.n	8002d50 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	f043 0204 	orr.w	r2, r3, #4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d50:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f9e7 	bl	8003128 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	ffff0000 	.word	0xffff0000

08002d80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a5d      	ldr	r2, [pc, #372]	; (8002f14 <I2C_ITError+0x194>)
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b28      	cmp	r3, #40	; 0x28
 8002db6:	d005      	beq.n	8002dc4 <I2C_ITError+0x44>
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b29      	cmp	r3, #41	; 0x29
 8002dbc:	d002      	beq.n	8002dc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002dc2:	d10b      	bne.n	8002ddc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f9ae 	bl	8003128 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2228      	movs	r2, #40	; 0x28
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a50      	ldr	r2, [pc, #320]	; (8002f18 <I2C_ITError+0x198>)
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dda:	e011      	b.n	8002e00 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ddc:	f248 0103 	movw	r1, #32771	; 0x8003
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f9a1 	bl	8003128 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b60      	cmp	r3, #96	; 0x60
 8002df0:	d003      	beq.n	8002dfa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d039      	beq.n	8002e82 <I2C_ITError+0x102>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b11      	cmp	r3, #17
 8002e12:	d002      	beq.n	8002e1a <I2C_ITError+0x9a>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b21      	cmp	r3, #33	; 0x21
 8002e18:	d133      	bne.n	8002e82 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e28:	d107      	bne.n	8002e3a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e38:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fc66 	bl	8001710 <HAL_DMA_GetState>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d017      	beq.n	8002e7a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	4a33      	ldr	r2, [pc, #204]	; (8002f1c <I2C_ITError+0x19c>)
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fbf7 	bl	8001652 <HAL_DMA_Abort_IT>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d04d      	beq.n	8002f06 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e74:	4610      	mov	r0, r2
 8002e76:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e78:	e045      	b.n	8002f06 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f850 	bl	8002f20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e80:	e041      	b.n	8002f06 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d039      	beq.n	8002efe <I2C_ITError+0x17e>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b12      	cmp	r3, #18
 8002e8e:	d002      	beq.n	8002e96 <I2C_ITError+0x116>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b22      	cmp	r3, #34	; 0x22
 8002e94:	d133      	bne.n	8002efe <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea4:	d107      	bne.n	8002eb6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fc28 	bl	8001710 <HAL_DMA_GetState>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d017      	beq.n	8002ef6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <I2C_ITError+0x19c>)
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fbb9 	bl	8001652 <HAL_DMA_Abort_IT>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d011      	beq.n	8002f0a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ef4:	e009      	b.n	8002f0a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f812 	bl	8002f20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002efc:	e005      	b.n	8002f0a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f80e 	bl	8002f20 <I2C_TreatErrorCallback>
  }
}
 8002f04:	e002      	b.n	8002f0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f0a:	bf00      	nop
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	ffff0000 	.word	0xffff0000
 8002f18:	08002173 	.word	0x08002173
 8002f1c:	08002fb9 	.word	0x08002fb9

08002f20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b60      	cmp	r3, #96	; 0x60
 8002f32:	d10f      	bne.n	8002f54 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f52:	e00a      	b.n	8002f6a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d103      	bne.n	8002f90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d007      	beq.n	8002fae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	619a      	str	r2, [r3, #24]
  }
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff ff9a 	bl	8002f20 <I2C_TreatErrorCallback>
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	817b      	strh	r3, [r7, #10]
 8003002:	4613      	mov	r3, r2
 8003004:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003006:	897b      	ldrh	r3, [r7, #10]
 8003008:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800300c:	7a7b      	ldrb	r3, [r7, #9]
 800300e:	041b      	lsls	r3, r3, #16
 8003010:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003014:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	4313      	orrs	r3, r2
 800301e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003022:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <I2C_TransferConfig+0x5c>)
 8003034:	430b      	orrs	r3, r1
 8003036:	43db      	mvns	r3, r3
 8003038:	ea02 0103 	and.w	r1, r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	03ff63ff 	.word	0x03ff63ff

08003054 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <I2C_Enable_IRQ+0xcc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003072:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <I2C_Enable_IRQ+0xd0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d11d      	bne.n	80030b4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003078:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da03      	bge.n	8003088 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003086:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	2b10      	cmp	r3, #16
 800308c:	d103      	bne.n	8003096 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003094:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	2b20      	cmp	r3, #32
 800309a:	d103      	bne.n	80030a4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d12c      	bne.n	8003104 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030b2:	e027      	b.n	8003104 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da03      	bge.n	80030c4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80030c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80030d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80030e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d103      	bne.n	80030f6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80030f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d103      	bne.n	8003104 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f043 0320 	orr.w	r3, r3, #32
 8003102:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	08002363 	.word	0x08002363
 8003124:	08002539 	.word	0x08002539

08003128 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00f      	beq.n	8003162 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003148:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003156:	2b28      	cmp	r3, #40	; 0x28
 8003158:	d003      	beq.n	8003162 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003160:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00f      	beq.n	800318c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003172:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003180:	2b28      	cmp	r3, #40	; 0x28
 8003182:	d003      	beq.n	800318c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800318a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800318c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da03      	bge.n	800319c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800319a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	2b10      	cmp	r3, #16
 80031a0:	d103      	bne.n	80031aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d103      	bne.n	80031b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f043 0320 	orr.w	r3, r3, #32
 80031b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d103      	bne.n	80031c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43da      	mvns	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	400a      	ands	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d138      	bne.n	800326a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003202:	2302      	movs	r3, #2
 8003204:	e032      	b.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2224      	movs	r2, #36	; 0x24
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003234:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b20      	cmp	r3, #32
 800328a:	d139      	bne.n	8003300 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003296:	2302      	movs	r3, #2
 8003298:	e033      	b.n	8003302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2224      	movs	r2, #36	; 0x24
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM0PLUS)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_IPCC_TX_IRQHandler+0x98>)
 800331a:	60fb      	str	r3, [r7, #12]
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	43db      	mvns	r3, r3
 8003322:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003326:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	43db      	mvns	r3, r3
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4013      	ands	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003336:	e02c      	b.n	8003392 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	3310      	adds	r3, #16
 8003340:	2201      	movs	r2, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01c      	beq.n	800338c <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	3306      	adds	r3, #6
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3306      	adds	r3, #6
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	6939      	ldr	r1, [r7, #16]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	43db      	mvns	r3, r3
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	3301      	adds	r3, #1
 8003390:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1cf      	bne.n	8003338 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	58000c00 	.word	0x58000c00

080033a8 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM0PLUS)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80033b4:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_IPCC_RX_IRQHandler+0x90>)
 80033b6:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_IPCC_RX_IRQHandler+0x94>)
 80033ba:	613b      	str	r3, [r7, #16]
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c6:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80033d2:	e029      	b.n	8003428 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	2201      	movs	r2, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01a      	beq.n	8003422 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	69b9      	ldr	r1, [r7, #24]
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	43db      	mvns	r3, r3
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	4013      	ands	r3, r2
 8003420:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	3301      	adds	r3, #1
 8003426:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1d2      	bne.n	80033d4 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	58000c00 	.word	0x58000c00
 800343c:	58000c10 	.word	0x58000c10

08003440 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a03      	ldr	r2, [pc, #12]	; (8003458 <HAL_PWR_EnableBkUpAccess+0x18>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	58000400 	.word	0x58000400

0800345c <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <LL_PWR_EnableBootC2+0x18>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a03      	ldr	r2, [pc, #12]	; (8003474 <LL_PWR_EnableBootC2+0x18>)
 8003466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	58000400 	.word	0x58000400

08003478 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_PWREx_GetVoltageRange+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	58000400 	.word	0x58000400

08003490 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8003498:	f7ff ffe0 	bl	800345c <LL_PWR_EnableBootC2>
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b4:	d101      	bne.n	80034ba <LL_PWR_IsEnabledBkUpAccess+0x16>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	58000400 	.word	0x58000400

080034c8 <LL_RCC_HSE_EnableTcxo>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <LL_RCC_HSE_DisableTcxo>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003512:	d101      	bne.n	8003518 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <LL_RCC_HSE_Enable>:
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <LL_RCC_HSE_Disable>:
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800354c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <LL_RCC_HSE_IsReady>:
{
 800355a:	b480      	push	{r7}
 800355c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800355e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800356c:	d101      	bne.n	8003572 <LL_RCC_HSE_IsReady+0x18>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <LL_RCC_HSE_IsReady+0x1a>
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <LL_RCC_HSI_Enable>:
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358e:	6013      	str	r3, [r2, #0]
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <LL_RCC_HSI_Disable>:
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <LL_RCC_HSI_IsReady>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80035b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	d101      	bne.n	80035cc <LL_RCC_HSI_IsReady+0x18>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <LL_RCC_HSI_IsReady+0x1a>
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <LL_RCC_LSE_IsReady>:
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d101      	bne.n	8003616 <LL_RCC_LSE_IsReady+0x18>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <LL_RCC_LSE_IsReady+0x1a>
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <LL_RCC_LSI_Enable>:
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <LL_RCC_LSI_Disable>:
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <LL_RCC_LSI_IsReady>:
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d101      	bne.n	8003678 <LL_RCC_LSI_IsReady+0x18>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <LL_RCC_LSI_IsReady+0x1a>
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <LL_RCC_MSI_Enable>:
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <LL_RCC_MSI_Disable>:
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6013      	str	r3, [r2, #0]
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <LL_RCC_MSI_IsReady>:
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80036be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d101      	bne.n	80036d0 <LL_RCC_MSI_IsReady+0x16>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <LL_RCC_MSI_IsReady+0x18>
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d101      	bne.n	80036f0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <LL_RCC_MSI_GetRange>:
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80036fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <LL_RCC_SetSysClkSource>:
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <LL_RCC_GetSysClkSource>:
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800377a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <LL_RCC_SetAHBPrescaler>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80037ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <LL_RCC_SetAHB3Prescaler>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80037e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037ec:	f023 020f 	bic.w	r2, r3, #15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <LL_RCC_SetAPB1Prescaler>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800381a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <LL_RCC_SetAPB2Prescaler>:
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <LL_RCC_GetAHBPrescaler>:
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <LL_RCC_GetAHB3Prescaler>:
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003872:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <LL_RCC_GetAPB1Prescaler>:
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003892:	4618      	mov	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <LL_RCC_GetAPB2Prescaler>:
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <LL_RCC_ConfigMCO>:
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80038fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390a:	6013      	str	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003926:	d101      	bne.n	800392c <LL_RCC_PLL_IsReady+0x18>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <LL_RCC_PLL_IsReady+0x1a>
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0303 	and.w	r3, r3, #3
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a2:	d101      	bne.n	80039a8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c6:	d101      	bne.n	80039cc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ea:	d101      	bne.n	80039f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80039fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a0c:	d101      	bne.n	8003a12 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a2e:	d101      	bne.n	8003a34 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e36f      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a52:	f7ff fe90 	bl	8003776 <LL_RCC_GetSysClkSource>
 8003a56:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a58:	f7ff ff8f 	bl	800397a <LL_RCC_PLL_GetMainSource>
 8003a5c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80c4 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x3e>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d176      	bne.n	8003b66 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d173      	bne.n	8003b66 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e353      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x68>
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa6:	e006      	b.n	8003ab6 <HAL_RCC_OscConfig+0x76>
 8003aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d222      	bcs.n	8003b00 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fd94 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e331      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fe15 	bl	8003728 <LL_RCC_MSI_SetCalibTrimming>
 8003afe:	e021      	b.n	8003b44 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0a:	f043 0308 	orr.w	r3, r3, #8
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fdfc 	bl	8003728 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fd59 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e2f6      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b44:	f000 fd1a 	bl	800457c <HAL_RCC_GetHCLKFreq>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4aa7      	ldr	r2, [pc, #668]	; (8003de8 <HAL_RCC_OscConfig+0x3a8>)
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003b4e:	4ba7      	ldr	r3, [pc, #668]	; (8003dec <HAL_RCC_OscConfig+0x3ac>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd fbc8 	bl	80012e8 <HAL_InitTick>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d047      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	e2e5      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b6e:	f7ff fd88 	bl	8003682 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b72:	f7fd fa0f 	bl	8000f94 <HAL_GetTick>
 8003b76:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b7a:	f7fd fa0b 	bl	8000f94 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e2d2      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003b8c:	f7ff fd95 	bl	80036ba <LL_RCC_MSI_IsReady>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f1      	beq.n	8003b7a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fdb1 	bl	8003728 <LL_RCC_MSI_SetCalibTrimming>
 8003bc6:	e015      	b.n	8003bf4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bc8:	f7ff fd69 	bl	800369e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bcc:	f7fd f9e2 	bl	8000f94 <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bd4:	f7fd f9de 	bl	8000f94 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e2a5      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003be6:	f7ff fd68 	bl	80036ba <LL_RCC_MSI_IsReady>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f1      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x194>
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003bf2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d058      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d005      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1d2>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d108      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d105      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d14b      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e289      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d102      	bne.n	8003c44 <HAL_RCC_OscConfig+0x204>
 8003c3e:	f7ff fc70 	bl	8003522 <LL_RCC_HSE_Enable>
 8003c42:	e00d      	b.n	8003c60 <HAL_RCC_OscConfig+0x220>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003c4c:	d104      	bne.n	8003c58 <HAL_RCC_OscConfig+0x218>
 8003c4e:	f7ff fc3b 	bl	80034c8 <LL_RCC_HSE_EnableTcxo>
 8003c52:	f7ff fc66 	bl	8003522 <LL_RCC_HSE_Enable>
 8003c56:	e003      	b.n	8003c60 <HAL_RCC_OscConfig+0x220>
 8003c58:	f7ff fc71 	bl	800353e <LL_RCC_HSE_Disable>
 8003c5c:	f7ff fc42 	bl	80034e4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d012      	beq.n	8003c8e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd f994 	bl	8000f94 <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd f990 	bl	8000f94 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e257      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003c82:	f7ff fc6a 	bl	800355a <LL_RCC_HSE_IsReady>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f1      	beq.n	8003c70 <HAL_RCC_OscConfig+0x230>
 8003c8c:	e011      	b.n	8003cb2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fd f981 	bl	8000f94 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c96:	f7fd f97d 	bl	8000f94 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	; 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e244      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ca8:	f7ff fc57 	bl	800355a <LL_RCC_HSE_IsReady>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f1      	bne.n	8003c96 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d046      	beq.n	8003d4c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x290>
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d10b      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e22a      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fc78 	bl	80035d6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003ce6:	e031      	b.n	8003d4c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf0:	f7ff fc44 	bl	800357c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd f94e 	bl	8000f94 <HAL_GetTick>
 8003cf8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fd f94a 	bl	8000f94 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e211      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003d0e:	f7ff fc51 	bl	80035b4 <LL_RCC_HSI_IsReady>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f1      	beq.n	8003cfc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fc5a 	bl	80035d6 <LL_RCC_HSI_SetCalibTrimming>
 8003d22:	e013      	b.n	8003d4c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d24:	f7ff fc38 	bl	8003598 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd f934 	bl	8000f94 <HAL_GetTick>
 8003d2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fd f930 	bl	8000f94 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1f7      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003d42:	f7ff fc37 	bl	80035b4 <LL_RCC_HSI_IsReady>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f1      	bne.n	8003d30 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d06e      	beq.n	8003e36 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d056      	beq.n	8003e0e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d68:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d031      	beq.n	8003ddc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d006      	beq.n	8003d90 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e1d0      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d013      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d9a:	f7ff fc51 	bl	8003640 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d9e:	f7fd f8f9 	bl	8000f94 <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fd f8f5 	bl	8000f94 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b11      	cmp	r3, #17
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e1bc      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003db8:	f7ff fc52 	bl	8003660 <LL_RCC_LSI_IsReady>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f1      	bne.n	8003da6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dca:	f023 0210 	bic.w	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ddc:	f7ff fc20 	bl	8003620 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fd f8d8 	bl	8000f94 <HAL_GetTick>
 8003de4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003de6:	e00c      	b.n	8003e02 <HAL_RCC_OscConfig+0x3c2>
 8003de8:	20000000 	.word	0x20000000
 8003dec:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df0:	f7fd f8d0 	bl	8000f94 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b11      	cmp	r3, #17
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e197      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003e02:	f7ff fc2d 	bl	8003660 <LL_RCC_LSI_IsReady>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f1      	beq.n	8003df0 <HAL_RCC_OscConfig+0x3b0>
 8003e0c:	e013      	b.n	8003e36 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0e:	f7ff fc17 	bl	8003640 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e12:	f7fd f8bf 	bl	8000f94 <HAL_GetTick>
 8003e16:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e1a:	f7fd f8bb 	bl	8000f94 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b11      	cmp	r3, #17
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e182      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003e2c:	f7ff fc18 	bl	8003660 <LL_RCC_LSI_IsReady>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f1      	bne.n	8003e1a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80d8 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003e44:	f7ff fb2e 	bl	80034a4 <LL_PWR_IsEnabledBkUpAccess>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d113      	bne.n	8003e76 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e4e:	f7ff faf7 	bl	8003440 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fd f89f 	bl	8000f94 <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5a:	f7fd f89b 	bl	8000f94 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e162      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003e6c:	f7ff fb1a 	bl	80034a4 <LL_PWR_IsEnabledBkUpAccess>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f1      	beq.n	8003e5a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d07b      	beq.n	8003f76 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b85      	cmp	r3, #133	; 0x85
 8003e84:	d003      	beq.n	8003e8e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d109      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea2:	f7fd f877 	bl	8000f94 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fd f869 	bl	8000f94 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e12e      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ed4:	f7ff fb93 	bl	80035fe <LL_RCC_LSE_IsReady>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ef      	beq.n	8003ebe <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b81      	cmp	r3, #129	; 0x81
 8003ee4:	d003      	beq.n	8003eee <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b85      	cmp	r3, #133	; 0x85
 8003eec:	d121      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd f851 	bl	8000f94 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fd f843 	bl	8000f94 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e108      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ec      	beq.n	8003f0a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003f30:	e060      	b.n	8003ff4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fd f82f 	bl	8000f94 <HAL_GetTick>
 8003f36:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd f821 	bl	8000f94 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0e6      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ec      	bne.n	8003f4e <HAL_RCC_OscConfig+0x50e>
 8003f74:	e03e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f76:	f7fd f80d 	bl	8000f94 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fc ffff 	bl	8000f94 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e0c4      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ec      	bne.n	8003f92 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb8:	f7fc ffec 	bl	8000f94 <HAL_GetTick>
 8003fbc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fc ffde 	bl	8000f94 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0a3      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003fea:	f7ff fb08 	bl	80035fe <LL_RCC_LSE_IsReady>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ef      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8099 	beq.w	8004130 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d06c      	beq.n	80040de <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	2b02      	cmp	r3, #2
 800400a:	d14b      	bne.n	80040a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	f7ff fc74 	bl	80038f8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fc ffc0 	bl	8000f94 <HAL_GetTick>
 8004014:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004018:	f7fc ffbc 	bl	8000f94 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b0a      	cmp	r3, #10
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e083      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800402a:	f7ff fc73 	bl	8003914 <LL_RCC_PLL_IsReady>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f1      	bne.n	8004018 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	4b40      	ldr	r3, [pc, #256]	; (800413c <HAL_RCC_OscConfig+0x6fc>)
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800404c:	0212      	lsls	r2, r2, #8
 800404e:	4311      	orrs	r1, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004060:	430a      	orrs	r2, r1
 8004062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004066:	4313      	orrs	r3, r2
 8004068:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800406a:	f7ff fc37 	bl	80038dc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fc ff89 	bl	8000f94 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004086:	f7fc ff85 	bl	8000f94 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b0a      	cmp	r3, #10
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e04c      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004098:	f7ff fc3c 	bl	8003914 <LL_RCC_PLL_IsReady>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f1      	beq.n	8004086 <HAL_RCC_OscConfig+0x646>
 80040a2:	e045      	b.n	8004130 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a4:	f7ff fc28 	bl	80038f8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fc ff74 	bl	8000f94 <HAL_GetTick>
 80040ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fc ff70 	bl	8000f94 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b0a      	cmp	r3, #10
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e037      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80040c2:	f7ff fc27 	bl	8003914 <LL_RCC_PLL_IsReady>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f1      	bne.n	80040b0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCC_OscConfig+0x700>)
 80040d8:	4013      	ands	r3, r2
 80040da:	60cb      	str	r3, [r1, #12]
 80040dc:	e028      	b.n	8004130 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e023      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f003 0203 	and.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d115      	bne.n	800412c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	429a      	cmp	r2, r3
 800410c:	d10e      	bne.n	800412c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	429a      	cmp	r2, r3
 800411c:	d106      	bne.n	800412c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	11c1808c 	.word	0x11c1808c
 8004140:	eefefffc 	.word	0xeefefffc

08004144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e12c      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b98      	ldr	r3, [pc, #608]	; (80043bc <HAL_RCC_ClockConfig+0x278>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d91b      	bls.n	800419e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b95      	ldr	r3, [pc, #596]	; (80043bc <HAL_RCC_ClockConfig+0x278>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 0207 	bic.w	r2, r3, #7
 800416e:	4993      	ldr	r1, [pc, #588]	; (80043bc <HAL_RCC_ClockConfig+0x278>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004176:	f7fc ff0d 	bl	8000f94 <HAL_GetTick>
 800417a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417c:	e008      	b.n	8004190 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800417e:	f7fc ff09 	bl	8000f94 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e110      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004190:	4b8a      	ldr	r3, [pc, #552]	; (80043bc <HAL_RCC_ClockConfig+0x278>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d1ef      	bne.n	800417e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff faec 	bl	800378c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041b4:	f7fc feee 	bl	8000f94 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041bc:	f7fc feea 	bl	8000f94 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0f1      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80041ce:	f7ff fbdf 	bl	8003990 <LL_RCC_IsActiveFlag_HPRE>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f1      	beq.n	80041bc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fae2 	bl	80037b2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041ee:	f7fc fed1 	bl	8000f94 <HAL_GetTick>
 80041f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041f6:	f7fc fecd 	bl	8000f94 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0d4      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004208:	f7ff fbd3 	bl	80039b2 <LL_RCC_IsActiveFlag_C2HPRE>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f1      	beq.n	80041f6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fada 	bl	80037dc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004228:	f7fc feb4 	bl	8000f94 <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004230:	f7fc feb0 	bl	8000f94 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e0b7      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004242:	f7ff fbc8 	bl	80039d6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f1      	beq.n	8004230 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d016      	beq.n	8004286 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fad3 	bl	8003808 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004262:	f7fc fe97 	bl	8000f94 <HAL_GetTick>
 8004266:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800426a:	f7fc fe93 	bl	8000f94 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e09a      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800427c:	f7ff fbbd 	bl	80039fa <LL_RCC_IsActiveFlag_PPRE1>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f1      	beq.n	800426a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d017      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fac8 	bl	800382e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800429e:	f7fc fe79 	bl	8000f94 <HAL_GetTick>
 80042a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80042a6:	f7fc fe75 	bl	8000f94 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e07c      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80042b8:	f7ff fbb0 	bl	8003a1c <LL_RCC_IsActiveFlag_PPRE2>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f1      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d043      	beq.n	8004356 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d106      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80042d6:	f7ff f940 	bl	800355a <LL_RCC_HSE_IsReady>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d11e      	bne.n	800431e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e066      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80042ec:	f7ff fb12 	bl	8003914 <LL_RCC_PLL_IsReady>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d113      	bne.n	800431e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e05b      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004302:	f7ff f9da 	bl	80036ba <LL_RCC_MSI_IsReady>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d108      	bne.n	800431e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e050      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004310:	f7ff f950 	bl	80035b4 <LL_RCC_HSI_IsReady>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e049      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fa14 	bl	8003750 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004328:	f7fc fe34 	bl	8000f94 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fc fe30 	bl	8000f94 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e035      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	f7ff fa16 	bl	8003776 <LL_RCC_GetSysClkSource>
 800434a:	4602      	mov	r2, r0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	429a      	cmp	r2, r3
 8004354:	d1ec      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004356:	4b19      	ldr	r3, [pc, #100]	; (80043bc <HAL_RCC_ClockConfig+0x278>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d21b      	bcs.n	800439c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004364:	4b15      	ldr	r3, [pc, #84]	; (80043bc <HAL_RCC_ClockConfig+0x278>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 0207 	bic.w	r2, r3, #7
 800436c:	4913      	ldr	r1, [pc, #76]	; (80043bc <HAL_RCC_ClockConfig+0x278>)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004374:	f7fc fe0e 	bl	8000f94 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	e008      	b.n	800438e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800437c:	f7fc fe0a 	bl	8000f94 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e011      	b.n	80043b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_ClockConfig+0x278>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d1ef      	bne.n	800437c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800439c:	f000 f8ee 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4a07      	ldr	r2, [pc, #28]	; (80043c0 <HAL_RCC_ClockConfig+0x27c>)
 80043a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80043a6:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <HAL_RCC_ClockConfig+0x280>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc ff9c 	bl	80012e8 <HAL_InitTick>
 80043b0:	4603      	mov	r3, r0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	58004000 	.word	0x58004000
 80043c0:	20000000 	.word	0x20000000
 80043c4:	2000000c 	.word	0x2000000c

080043c8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	; 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d8:	2303      	movs	r3, #3
 80043da:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	0c1b      	lsrs	r3, r3, #16
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80043ec:	029b      	lsls	r3, r3, #10
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80043fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004400:	2101      	movs	r1, #1
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800440c:	4313      	orrs	r3, r2
 800440e:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	b29b      	uxth	r3, r3
 8004414:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	0d1b      	lsrs	r3, r3, #20
 800441a:	b2db      	uxtb	r3, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800441e:	f107 0314 	add.w	r3, r7, #20
 8004422:	4619      	mov	r1, r3
 8004424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004426:	f7fd f981 	bl	800172c <HAL_GPIO_Init>

  /* Configure the microcontroller clock output (MCO) */
  LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	68b8      	ldr	r0, [r7, #8]
 800442e:	f7ff fa3f 	bl	80038b0 <LL_RCC_ConfigMCO>
}
 8004432:	bf00      	nop
 8004434:	3730      	adds	r7, #48	; 0x30
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444a:	f7ff f994 	bl	8003776 <LL_RCC_GetSysClkSource>
 800444e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004450:	f7ff fa93 	bl	800397a <LL_RCC_PLL_GetMainSource>
 8004454:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x2c>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d139      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d136      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004468:	f7ff f937 	bl	80036da <LL_RCC_MSI_IsEnabledRangeSelect>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d115      	bne.n	800449e <HAL_RCC_GetSysClockFreq+0x62>
 8004472:	f7ff f932 	bl	80036da <LL_RCC_MSI_IsEnabledRangeSelect>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_GetSysClockFreq+0x4e>
 800447c:	f7ff f93d 	bl	80036fa <LL_RCC_MSI_GetRange>
 8004480:	4603      	mov	r3, r0
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	e005      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x5a>
 800448a:	f7ff f941 	bl	8003710 <LL_RCC_MSI_GetRangeAfterStandby>
 800448e:	4603      	mov	r3, r0
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	4a36      	ldr	r2, [pc, #216]	; (8004570 <HAL_RCC_GetSysClockFreq+0x134>)
 8004498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449c:	e014      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x8c>
 800449e:	f7ff f91c 	bl	80036da <LL_RCC_MSI_IsEnabledRangeSelect>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_GetSysClockFreq+0x7a>
 80044a8:	f7ff f927 	bl	80036fa <LL_RCC_MSI_GetRange>
 80044ac:	4603      	mov	r3, r0
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	e005      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x86>
 80044b6:	f7ff f92b 	bl	8003710 <LL_RCC_MSI_GetRangeAfterStandby>
 80044ba:	4603      	mov	r3, r0
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <HAL_RCC_GetSysClockFreq+0x134>)
 80044c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d115      	bne.n	80044fc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044d4:	e012      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d102      	bne.n	80044e2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <HAL_RCC_GetSysClockFreq+0x138>)
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e00c      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d109      	bne.n	80044fc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80044e8:	f7ff f80a 	bl	8003500 <LL_RCC_HSE_IsEnabledDiv2>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80044f2:	4b20      	ldr	r3, [pc, #128]	; (8004574 <HAL_RCC_GetSysClockFreq+0x138>)
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e001      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80044f8:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <HAL_RCC_GetSysClockFreq+0x13c>)
 80044fa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044fc:	f7ff f93b 	bl	8003776 <LL_RCC_GetSysClkSource>
 8004500:	4603      	mov	r3, r0
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d12f      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004506:	f7ff fa38 	bl	800397a <LL_RCC_PLL_GetMainSource>
 800450a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d003      	beq.n	800451a <HAL_RCC_GetSysClockFreq+0xde>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d003      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0xe4>
 8004518:	e00d      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <HAL_RCC_GetSysClockFreq+0x138>)
 800451c:	60fb      	str	r3, [r7, #12]
        break;
 800451e:	e00d      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004520:	f7fe ffee 	bl	8003500 <LL_RCC_HSE_IsEnabledDiv2>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d102      	bne.n	8004530 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_GetSysClockFreq+0x138>)
 800452c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800452e:	e005      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004530:	4b11      	ldr	r3, [pc, #68]	; (8004578 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004532:	60fb      	str	r3, [r7, #12]
        break;
 8004534:	e002      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	60fb      	str	r3, [r7, #12]
        break;
 800453a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800453c:	f7ff f9fb 	bl	8003936 <LL_RCC_PLL_GetN>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	fb03 f402 	mul.w	r4, r3, r2
 8004548:	f7ff fa0c 	bl	8003964 <LL_RCC_PLL_GetDivider>
 800454c:	4603      	mov	r3, r0
 800454e:	091b      	lsrs	r3, r3, #4
 8004550:	3301      	adds	r3, #1
 8004552:	fbb4 f4f3 	udiv	r4, r4, r3
 8004556:	f7ff f9fa 	bl	800394e <LL_RCC_PLL_GetR>
 800455a:	4603      	mov	r3, r0
 800455c:	0f5b      	lsrs	r3, r3, #29
 800455e:	3301      	adds	r3, #1
 8004560:	fbb4 f3f3 	udiv	r3, r4, r3
 8004564:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004566:	697b      	ldr	r3, [r7, #20]
}
 8004568:	4618      	mov	r0, r3
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd90      	pop	{r4, r7, pc}
 8004570:	0800710c 	.word	0x0800710c
 8004574:	00f42400 	.word	0x00f42400
 8004578:	01e84800 	.word	0x01e84800

0800457c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800457c:	b598      	push	{r3, r4, r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004580:	f7ff ff5c 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8004584:	4604      	mov	r4, r0
 8004586:	f7ff f965 	bl	8003854 <LL_RCC_GetAHBPrescaler>
 800458a:	4603      	mov	r3, r0
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8004594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004598:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd98      	pop	{r3, r4, r7, pc}
 80045a0:	080070ac 	.word	0x080070ac

080045a4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b598      	push	{r3, r4, r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80045a8:	f7ff ffe8 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80045ac:	4604      	mov	r4, r0
 80045ae:	f7ff f969 	bl	8003884 <LL_RCC_GetAPB1Prescaler>
 80045b2:	4603      	mov	r3, r0
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	4a03      	ldr	r2, [pc, #12]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd98      	pop	{r3, r4, r7, pc}
 80045c4:	080070ec 	.word	0x080070ec

080045c8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c8:	b598      	push	{r3, r4, r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80045cc:	f7ff ffd6 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80045d0:	4604      	mov	r4, r0
 80045d2:	f7ff f962 	bl	800389a <LL_RCC_GetAPB2Prescaler>
 80045d6:	4603      	mov	r3, r0
 80045d8:	0adb      	lsrs	r3, r3, #11
 80045da:	4a03      	ldr	r2, [pc, #12]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd98      	pop	{r3, r4, r7, pc}
 80045e8:	080070ec 	.word	0x080070ec

080045ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	4a10      	ldr	r2, [pc, #64]	; (8004640 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80045fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004602:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004604:	f7ff f931 	bl	800386a <LL_RCC_GetAHB3Prescaler>
 8004608:	4603      	mov	r3, r0
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	4a0c      	ldr	r2, [pc, #48]	; (8004644 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4a09      	ldr	r2, [pc, #36]	; (8004648 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	0c9c      	lsrs	r4, r3, #18
 8004628:	f7fe ff26 	bl	8003478 <HAL_PWREx_GetVoltageRange>
 800462c:	4603      	mov	r3, r0
 800462e:	4619      	mov	r1, r3
 8004630:	4620      	mov	r0, r4
 8004632:	f000 f80b 	bl	800464c <RCC_SetFlashLatency>
 8004636:	4603      	mov	r3, r0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	bd90      	pop	{r4, r7, pc}
 8004640:	0800710c 	.word	0x0800710c
 8004644:	080070ac 	.word	0x080070ac
 8004648:	431bde83 	.word	0x431bde83

0800464c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	; 0x38
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004656:	4a3a      	ldr	r2, [pc, #232]	; (8004740 <RCC_SetFlashLatency+0xf4>)
 8004658:	f107 0320 	add.w	r3, r7, #32
 800465c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004660:	6018      	str	r0, [r3, #0]
 8004662:	3304      	adds	r3, #4
 8004664:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004666:	4a37      	ldr	r2, [pc, #220]	; (8004744 <RCC_SetFlashLatency+0xf8>)
 8004668:	f107 0318 	add.w	r3, r7, #24
 800466c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004670:	6018      	str	r0, [r3, #0]
 8004672:	3304      	adds	r3, #4
 8004674:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004676:	4a34      	ldr	r2, [pc, #208]	; (8004748 <RCC_SetFlashLatency+0xfc>)
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	ca07      	ldmia	r2, {r0, r1, r2}
 800467e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004682:	2300      	movs	r3, #0
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468c:	d11b      	bne.n	80046c6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800468e:	2300      	movs	r3, #0
 8004690:	633b      	str	r3, [r7, #48]	; 0x30
 8004692:	e014      	b.n	80046be <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	3338      	adds	r3, #56	; 0x38
 800469a:	443b      	add	r3, r7
 800469c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80046a0:	461a      	mov	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d807      	bhi.n	80046b8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	3338      	adds	r3, #56	; 0x38
 80046ae:	443b      	add	r3, r7
 80046b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046b6:	e021      	b.n	80046fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	3301      	adds	r3, #1
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d9e7      	bls.n	8004694 <RCC_SetFlashLatency+0x48>
 80046c4:	e01a      	b.n	80046fc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ca:	e014      	b.n	80046f6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	3338      	adds	r3, #56	; 0x38
 80046d2:	443b      	add	r3, r7
 80046d4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4293      	cmp	r3, r2
 80046de:	d807      	bhi.n	80046f0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	3338      	adds	r3, #56	; 0x38
 80046e6:	443b      	add	r3, r7
 80046e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046ee:	e005      	b.n	80046fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	3301      	adds	r3, #1
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d9e7      	bls.n	80046cc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046fc:	4b13      	ldr	r3, [pc, #76]	; (800474c <RCC_SetFlashLatency+0x100>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 0207 	bic.w	r2, r3, #7
 8004704:	4911      	ldr	r1, [pc, #68]	; (800474c <RCC_SetFlashLatency+0x100>)
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800470c:	f7fc fc42 	bl	8000f94 <HAL_GetTick>
 8004710:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004712:	e008      	b.n	8004726 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004714:	f7fc fc3e 	bl	8000f94 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e007      	b.n	8004736 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <RCC_SetFlashLatency+0x100>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004730:	429a      	cmp	r2, r3
 8004732:	d1ef      	bne.n	8004714 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3738      	adds	r7, #56	; 0x38
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	08007090 	.word	0x08007090
 8004744:	08007098 	.word	0x08007098
 8004748:	080070a0 	.word	0x080070a0
 800474c:	58004000 	.word	0x58004000

08004750 <LL_RCC_LSE_IsReady>:
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d101      	bne.n	8004768 <LL_RCC_LSE_IsReady+0x18>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <LL_RCC_LSE_IsReady+0x1a>
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <LL_RCC_SetUSARTClockSource>:
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	43db      	mvns	r3, r3
 8004788:	401a      	ands	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <LL_RCC_SetI2SClockSource>:
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80047aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <LL_RCC_SetLPUARTClockSource>:
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80047d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <LL_RCC_SetI2CClockSource>:
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800480e:	43db      	mvns	r3, r3
 8004810:	401a      	ands	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800481a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <LL_RCC_SetLPTIMClockSource>:
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	43db      	mvns	r3, r3
 8004846:	401a      	ands	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <LL_RCC_SetRNGClockSource>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <LL_RCC_SetADCClockSource>:
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800489e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <LL_RCC_SetRTCClockSource>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <LL_RCC_GetRTCClockSource>:
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <LL_RCC_ForceBackupDomainReset>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800490e:	bf00      	nop
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004916:	b480      	push	{r7}
 8004918:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800491a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800492e:	bf00      	nop
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
	...

08004938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004944:	2300      	movs	r3, #0
 8004946:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004948:	2300      	movs	r3, #0
 800494a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d058      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004958:	f7fe fd72 	bl	8003440 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800495c:	f7fc fb1a 	bl	8000f94 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004962:	e009      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fc fb16 	bl	8000f94 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d902      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	74fb      	strb	r3, [r7, #19]
        break;
 8004976:	e006      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004978:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004984:	d1ee      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d13c      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800498c:	f7ff ffa7 	bl	80048de <LL_RCC_GetRTCClockSource>
 8004990:	4602      	mov	r2, r0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	429a      	cmp	r2, r3
 8004998:	d00f      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049a8:	f7ff ffa5 	bl	80048f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ac:	f7ff ffb3 	bl	8004916 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d014      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fc fae6 	bl	8000f94 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80049ca:	e00b      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fc fae2 	bl	8000f94 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d902      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	74fb      	strb	r3, [r7, #19]
            break;
 80049e2:	e004      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80049e4:	f7ff feb4 	bl	8004750 <LL_RCC_LSE_IsReady>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d1ee      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff5b 	bl	80048b4 <LL_RCC_SetRTCClockSource>
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
 8004a04:	e001      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fea9 	bl	8004772 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fe9e 	bl	8004772 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d004      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fec0 	bl	80047cc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fee6 	bl	800482e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d004      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fedb 	bl	800482e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fed0 	bl	800482e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d004      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fea9 	bl	80047f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fe9e 	bl	80047f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d004      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fe93 	bl	80047f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d011      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fe5e 	bl	80047a2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aee:	d107      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004afe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fea5 	bl	8004860 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fea3 	bl	800488a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	58000400 	.word	0x58000400

08004b6c <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* Update LSCO selection according to parameter and enable LSCO */
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr
	...

08004b9c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d071      	beq.n	8004c92 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc f82e 	bl	8000c24 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004bd0:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d051      	beq.n	8004c80 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bdc:	4b2f      	ldr	r3, [pc, #188]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004bde:	22ca      	movs	r2, #202	; 0xca
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
 8004be2:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004be4:	2253      	movs	r2, #83	; 0x53
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f9a1 	bl	8004f30 <RTC_EnterInitMode>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d13f      	bne.n	8004c78 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004bf8:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004bfe:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c06:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	4319      	orrs	r1, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	491f      	ldr	r1, [pc, #124]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	491b      	ldr	r1, [pc, #108]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004c32:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	430b      	orrs	r3, r1
 8004c44:	4915      	ldr	r1, [pc, #84]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f9a4 	bl	8004f98 <RTC_ExitInitMode>
 8004c50:	4603      	mov	r3, r0
 8004c52:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10e      	bne.n	8004c78 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a19      	ldr	r1, [r3, #32]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4319      	orrs	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	430b      	orrs	r3, r1
 8004c72:	490a      	ldr	r1, [pc, #40]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c78:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <HAL_RTC_Init+0x100>)
 8004c7a:	22ff      	movs	r2, #255	; 0xff
 8004c7c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c7e:	e001      	b.n	8004c84 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40002800 	.word	0x40002800

08004ca0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_RTC_SetTime+0x1a>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e088      	b.n	8004dcc <HAL_RTC_SetTime+0x12c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cca:	4b42      	ldr	r3, [pc, #264]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004ccc:	22ca      	movs	r2, #202	; 0xca
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24
 8004cd0:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004cd2:	2253      	movs	r2, #83	; 0x53
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f92a 	bl	8004f30 <RTC_EnterInitMode>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d15e      	bne.n	8004da4 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d057      	beq.n	8004da4 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d125      	bne.n	8004d46 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004cfa:	4b36      	ldr	r3, [pc, #216]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f97f 	bl	8005014 <RTC_ByteToBcd2>
 8004d16:	4603      	mov	r3, r0
 8004d18:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f978 	bl	8005014 <RTC_ByteToBcd2>
 8004d24:	4603      	mov	r3, r0
 8004d26:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d28:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	789b      	ldrb	r3, [r3, #2]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f970 	bl	8005014 <RTC_ByteToBcd2>
 8004d34:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d36:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	78db      	ldrb	r3, [r3, #3]
 8004d3e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	e017      	b.n	8004d76 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d64:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d6a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	78db      	ldrb	r3, [r3, #3]
 8004d70:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8004d76:	4a17      	ldr	r2, [pc, #92]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d82:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	68d9      	ldr	r1, [r3, #12]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	490d      	ldr	r1, [pc, #52]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f8f7 	bl	8004f98 <RTC_ExitInitMode>
 8004daa:	4603      	mov	r3, r0
 8004dac:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RTC_SetTime+0x134>)
 8004db0:	22ff      	movs	r2, #255	; 0xff
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004dca:	7cfb      	ldrb	r3, [r7, #19]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd90      	pop	{r4, r7, pc}
 8004dd4:	40002800 	.word	0x40002800

08004dd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_RTC_SetDate+0x1a>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e071      	b.n	8004ed6 <HAL_RTC_SetDate+0xfe>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10e      	bne.n	8004e26 <HAL_RTC_SetDate+0x4e>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	f023 0310 	bic.w	r3, r3, #16
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	330a      	adds	r3, #10
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d11c      	bne.n	8004e66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	78db      	ldrb	r3, [r3, #3]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 f8ef 	bl	8005014 <RTC_ByteToBcd2>
 8004e36:	4603      	mov	r3, r0
 8004e38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	785b      	ldrb	r3, [r3, #1]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f8e8 	bl	8005014 <RTC_ByteToBcd2>
 8004e44:	4603      	mov	r3, r0
 8004e46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004e48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	789b      	ldrb	r3, [r3, #2]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f8e0 	bl	8005014 <RTC_ByteToBcd2>
 8004e54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e00e      	b.n	8004e84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	78db      	ldrb	r3, [r3, #3]
 8004e6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004e78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e84:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_RTC_SetDate+0x108>)
 8004e86:	22ca      	movs	r2, #202	; 0xca
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_RTC_SetDate+0x108>)
 8004e8c:	2253      	movs	r2, #83	; 0x53
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f84d 	bl	8004f30 <RTC_EnterInitMode>
 8004e96:	4603      	mov	r3, r0
 8004e98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8004ea0:	4a0f      	ldr	r2, [pc, #60]	; (8004ee0 <HAL_RTC_SetDate+0x108>)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004eac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f872 	bl	8004f98 <RTC_ExitInitMode>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <HAL_RTC_SetDate+0x108>)
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40002800 	.word	0x40002800

08004ee4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004eec:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <HAL_RTC_WaitForSynchro+0x48>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a0e      	ldr	r2, [pc, #56]	; (8004f2c <HAL_RTC_WaitForSynchro+0x48>)
 8004ef2:	f023 0320 	bic.w	r3, r3, #32
 8004ef6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004ef8:	f7fc f84c 	bl	8000f94 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004efe:	e009      	b.n	8004f14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f00:	f7fc f848 	bl	8000f94 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f0e:	d901      	bls.n	8004f14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e006      	b.n	8004f22 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RTC_WaitForSynchro+0x48>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0ef      	beq.n	8004f00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40002800 	.word	0x40002800

08004f30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004f3c:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <RTC_EnterInitMode+0x64>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d120      	bne.n	8004f8a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <RTC_EnterInitMode+0x64>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a11      	ldr	r2, [pc, #68]	; (8004f94 <RTC_EnterInitMode+0x64>)
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004f54:	f7fc f81e 	bl	8000f94 <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f5a:	e00d      	b.n	8004f78 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004f5c:	f7fc f81a 	bl	8000f94 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f6a:	d905      	bls.n	8004f78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2203      	movs	r2, #3
 8004f74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <RTC_EnterInitMode+0x64>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <RTC_EnterInitMode+0x5a>
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d1e8      	bne.n	8004f5c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40002800 	.word	0x40002800

08004f98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fae:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10c      	bne.n	8004fd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ff91 	bl	8004ee4 <HAL_RTC_WaitForSynchro>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01e      	beq.n	8005006 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	e017      	b.n	8005006 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004fdc:	f023 0320 	bic.w	r3, r3, #32
 8004fe0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff7e 	bl	8004ee4 <HAL_RTC_WaitForSynchro>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	4a04      	ldr	r2, [pc, #16]	; (8005010 <RTC_ExitInitMode+0x78>)
 8005000:	f043 0320 	orr.w	r3, r3, #32
 8005004:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40002800 	.word	0x40002800

08005014 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005026:	e005      	b.n	8005034 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3301      	adds	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	3b0a      	subs	r3, #10
 8005032:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	2b09      	cmp	r3, #9
 8005038:	d8f6      	bhi.n	8005028 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	b2da      	uxtb	r2, r3
 8005042:	7afb      	ldrb	r3, [r7, #11]
 8005044:	4313      	orrs	r3, r2
 8005046:	b2db      	uxtb	r3, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
	...

08005054 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_RTCEx_SetRefClock+0x16>
 8005066:	2302      	movs	r3, #2
 8005068:	e02f      	b.n	80050ca <HAL_RTCEx_SetRefClock+0x76>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800507a:	4b16      	ldr	r3, [pc, #88]	; (80050d4 <HAL_RTCEx_SetRefClock+0x80>)
 800507c:	22ca      	movs	r2, #202	; 0xca
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
 8005080:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <HAL_RTCEx_SetRefClock+0x80>)
 8005082:	2253      	movs	r2, #83	; 0x53
 8005084:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff ff52 	bl	8004f30 <RTC_EnterInitMode>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <HAL_RTCEx_SetRefClock+0x58>
  {
    /* Enable clockref detection */
    SET_BIT(RTC->CR, RTC_CR_REFCKON);
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <HAL_RTCEx_SetRefClock+0x80>)
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <HAL_RTCEx_SetRefClock+0x80>)
 800509c:	f043 0310 	orr.w	r3, r3, #16
 80050a0:	6193      	str	r3, [r2, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff ff78 	bl	8004f98 <RTC_ExitInitMode>
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <HAL_RTCEx_SetRefClock+0x80>)
 80050ae:	22ff      	movs	r2, #255	; 0xff
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <HAL_RTCEx_SetRefClock+0x6c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40002800 	.word	0x40002800

080050d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e0ea      	b.n	80052c0 <HAL_SPI_Init+0x1e8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d108      	bne.n	8005104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fa:	d009      	beq.n	8005110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	61da      	str	r2, [r3, #28]
 8005102:	e005      	b.n	8005110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d12a      	bne.n	8005172 <HAL_SPI_Init+0x9a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a68      	ldr	r2, [pc, #416]	; (80052c8 <HAL_SPI_Init+0x1f0>)
 8005128:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a67      	ldr	r2, [pc, #412]	; (80052cc <HAL_SPI_Init+0x1f4>)
 800512e:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a67      	ldr	r2, [pc, #412]	; (80052d0 <HAL_SPI_Init+0x1f8>)
 8005134:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a66      	ldr	r2, [pc, #408]	; (80052d4 <HAL_SPI_Init+0x1fc>)
 800513a:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a66      	ldr	r2, [pc, #408]	; (80052d8 <HAL_SPI_Init+0x200>)
 8005140:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a65      	ldr	r2, [pc, #404]	; (80052dc <HAL_SPI_Init+0x204>)
 8005146:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a65      	ldr	r2, [pc, #404]	; (80052e0 <HAL_SPI_Init+0x208>)
 800514c:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a64      	ldr	r2, [pc, #400]	; (80052e4 <HAL_SPI_Init+0x20c>)
 8005152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a61      	ldr	r2, [pc, #388]	; (80052e8 <HAL_SPI_Init+0x210>)
 8005164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005188:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005192:	d902      	bls.n	800519a <HAL_SPI_Init+0xc2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e002      	b.n	80051a0 <HAL_SPI_Init+0xc8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800519a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800519e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051a8:	d007      	beq.n	80051ba <HAL_SPI_Init+0xe2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b2:	d002      	beq.n	80051ba <HAL_SPI_Init+0xe2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fc:	ea42 0103 	orr.w	r1, r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005218:	d11b      	bne.n	8005252 <HAL_SPI_Init+0x17a>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <HAL_SPI_Init+0x162>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800522a:	d903      	bls.n	8005234 <HAL_SPI_Init+0x15c>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
 8005232:	e002      	b.n	800523a <HAL_SPI_Init+0x162>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	2b02      	cmp	r3, #2
 8005240:	d107      	bne.n	8005252 <HAL_SPI_Init+0x17a>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005250:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	f003 0204 	and.w	r2, r3, #4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005278:	ea42 0103 	orr.w	r1, r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005292:	d105      	bne.n	80052a0 <HAL_SPI_Init+0x1c8>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	b292      	uxth	r2, r2
 800529e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	080054d9 	.word	0x080054d9
 80052cc:	080054eb 	.word	0x080054eb
 80052d0:	080054fd 	.word	0x080054fd
 80052d4:	0800550f 	.word	0x0800550f
 80052d8:	08005521 	.word	0x08005521
 80052dc:	08005533 	.word	0x08005533
 80052e0:	08005545 	.word	0x08005545
 80052e4:	08005557 	.word	0x08005557
 80052e8:	08000d89 	.word	0x08000d89

080052ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10e      	bne.n	800532c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
    return;
 800532a:	e0cf      	b.n	80054cc <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_SPI_IRQHandler+0x5e>
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
    return;
 8005348:	e0c0      	b.n	80054cc <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <HAL_SPI_IRQHandler+0x7e>
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80b1 	beq.w	80054cc <HAL_SPI_IRQHandler+0x1e0>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80ab 	beq.w	80054cc <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d023      	beq.n	80053c8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b03      	cmp	r3, #3
 800538a:	d011      	beq.n	80053b0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	f043 0204 	orr.w	r2, r3, #4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	e00b      	b.n	80053c8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
        return;
 80053c6:	e081      	b.n	80054cc <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d6:	f043 0201 	orr.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540a:	f043 0208 	orr.w	r2, r3, #8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005424:	2b00      	cmp	r3, #0
 8005426:	d050      	beq.n	80054ca <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005436:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <HAL_SPI_IRQHandler+0x168>
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d034      	beq.n	80054be <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0203 	bic.w	r2, r2, #3
 8005462:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	2b00      	cmp	r3, #0
 800546a:	d011      	beq.n	8005490 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005470:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <HAL_SPI_IRQHandler+0x1e8>)
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	4618      	mov	r0, r3
 800547a:	f7fc f8ea 	bl	8001652 <HAL_DMA_Abort_IT>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	2b00      	cmp	r3, #0
 8005496:	d017      	beq.n	80054c8 <HAL_SPI_IRQHandler+0x1dc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <HAL_SPI_IRQHandler+0x1e8>)
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fc f8d4 	bl	8001652 <HAL_DMA_Abort_IT>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <HAL_SPI_IRQHandler+0x1dc>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80054bc:	e004      	b.n	80054c8 <HAL_SPI_IRQHandler+0x1dc>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054c6:	e000      	b.n	80054ca <HAL_SPI_IRQHandler+0x1de>
        if (hspi->hdmatx != NULL)
 80054c8:	bf00      	nop
    return;
 80054ca:	bf00      	nop
  }
}
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	08005569 	.word	0x08005569

080054d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr

0800550e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr

08005532 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr

08005556 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e054      	b.n	8005650 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d111      	bne.n	80055d6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fab0 	bl	8005b20 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a23      	ldr	r2, [pc, #140]	; (8005658 <HAL_TIM_Base_Init+0xc4>)
 80055cc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f000 f99f 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	08001089 	.word	0x08001089

0800565c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e02e      	b.n	80056d2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a16      	ldr	r2, [pc, #88]	; (80056dc <HAL_TIM_Base_Start+0x80>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_TIM_Base_Start+0x34>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d115      	bne.n	80056bc <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <HAL_TIM_Base_Start+0x84>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d015      	beq.n	80056ce <HAL_TIM_Base_Start+0x72>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a8:	d011      	beq.n	80056ce <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ba:	e008      	b.n	80056ce <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e000      	b.n	80056d0 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	00010007 	.word	0x00010007

080056e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIM_ConfigClockSource+0x1c>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e0b6      	b.n	800586e <HAL_TIM_ConfigClockSource+0x18a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800571e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573c:	d03e      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0xd8>
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005742:	f200 8087 	bhi.w	8005854 <HAL_TIM_ConfigClockSource+0x170>
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574a:	f000 8086 	beq.w	800585a <HAL_TIM_ConfigClockSource+0x176>
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005752:	d87f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x170>
 8005754:	2b70      	cmp	r3, #112	; 0x70
 8005756:	d01a      	beq.n	800578e <HAL_TIM_ConfigClockSource+0xaa>
 8005758:	2b70      	cmp	r3, #112	; 0x70
 800575a:	d87b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x170>
 800575c:	2b60      	cmp	r3, #96	; 0x60
 800575e:	d050      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x11e>
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d877      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x170>
 8005764:	2b50      	cmp	r3, #80	; 0x50
 8005766:	d03c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005768:	2b50      	cmp	r3, #80	; 0x50
 800576a:	d873      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x170>
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d058      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x13e>
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d86f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x170>
 8005774:	2b30      	cmp	r3, #48	; 0x30
 8005776:	d064      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15e>
 8005778:	2b30      	cmp	r3, #48	; 0x30
 800577a:	d86b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x170>
 800577c:	2b20      	cmp	r3, #32
 800577e:	d060      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15e>
 8005780:	2b20      	cmp	r3, #32
 8005782:	d867      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x170>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05c      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15e>
 8005788:	2b10      	cmp	r3, #16
 800578a:	d05a      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15e>
 800578c:	e062      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800579e:	f000 f9a0 	bl	8005ae2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	609a      	str	r2, [r3, #8]
      break;
 80057ba:	e04f      	b.n	800585c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057cc:	f000 f989 	bl	8005ae2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057de:	609a      	str	r2, [r3, #8]
      break;
 80057e0:	e03c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	461a      	mov	r2, r3
 80057f0:	f000 f8fe 	bl	80059f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2150      	movs	r1, #80	; 0x50
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f955 	bl	8005aaa <TIM_ITRx_SetConfig>
      break;
 8005800:	e02c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800580e:	461a      	mov	r2, r3
 8005810:	f000 f91c 	bl	8005a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2160      	movs	r1, #96	; 0x60
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f945 	bl	8005aaa <TIM_ITRx_SetConfig>
      break;
 8005820:	e01c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800582e:	461a      	mov	r2, r3
 8005830:	f000 f8de 	bl	80059f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f935 	bl	8005aaa <TIM_ITRx_SetConfig>
      break;
 8005840:	e00c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f000 f92c 	bl	8005aaa <TIM_ITRx_SetConfig>
      break;
 8005852:	e003      	b.n	800585c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      break;
 8005858:	e000      	b.n	800585c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800585a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr

080058e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr
	...

0800592c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <TIM_Base_SetConfig+0xb8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_Base_SetConfig+0x20>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d108      	bne.n	800595e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a20      	ldr	r2, [pc, #128]	; (80059e4 <TIM_Base_SetConfig+0xb8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00b      	beq.n	800597e <TIM_Base_SetConfig+0x52>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d007      	beq.n	800597e <TIM_Base_SetConfig+0x52>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <TIM_Base_SetConfig+0xbc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_Base_SetConfig+0x52>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <TIM_Base_SetConfig+0xc0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d108      	bne.n	8005990 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a0b      	ldr	r2, [pc, #44]	; (80059e4 <TIM_Base_SetConfig+0xb8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_Base_SetConfig+0xa0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <TIM_Base_SetConfig+0xbc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_Base_SetConfig+0xa0>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <TIM_Base_SetConfig+0xc0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d103      	bne.n	80059d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	615a      	str	r2, [r3, #20]
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr
 80059e4:	40012c00 	.word	0x40012c00
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800

080059f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f023 0201 	bic.w	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 030a 	bic.w	r3, r3, #10
 8005a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f023 0210 	bic.w	r2, r3, #16
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	031b      	lsls	r3, r3, #12
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f043 0307 	orr.w	r3, r3, #7
 8005ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr

08005ae2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b087      	sub	sp, #28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	431a      	orrs	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	609a      	str	r2, [r3, #8]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ba4 <TIM_ResetCallback+0x84>)
 8005b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <TIM_ResetCallback+0x88>)
 8005b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <TIM_ResetCallback+0x8c>)
 8005b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <TIM_ResetCallback+0x90>)
 8005b44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <TIM_ResetCallback+0x94>)
 8005b4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a19      	ldr	r2, [pc, #100]	; (8005bb8 <TIM_ResetCallback+0x98>)
 8005b54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <TIM_ResetCallback+0x9c>)
 8005b5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <TIM_ResetCallback+0xa0>)
 8005b64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <TIM_ResetCallback+0xa4>)
 8005b6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <TIM_ResetCallback+0xa8>)
 8005b74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a14      	ldr	r2, [pc, #80]	; (8005bcc <TIM_ResetCallback+0xac>)
 8005b7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <TIM_ResetCallback+0xb0>)
 8005b84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <TIM_ResetCallback+0xb4>)
 8005b8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <TIM_ResetCallback+0xb8>)
 8005b94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	08005877 	.word	0x08005877
 8005ba8:	08005889 	.word	0x08005889
 8005bac:	080058f5 	.word	0x080058f5
 8005bb0:	08005907 	.word	0x08005907
 8005bb4:	080058ad 	.word	0x080058ad
 8005bb8:	080058bf 	.word	0x080058bf
 8005bbc:	0800589b 	.word	0x0800589b
 8005bc0:	080058d1 	.word	0x080058d1
 8005bc4:	080058e3 	.word	0x080058e3
 8005bc8:	08005919 	.word	0x08005919
 8005bcc:	08005c99 	.word	0x08005c99
 8005bd0:	08005cab 	.word	0x08005cab
 8005bd4:	08005cbd 	.word	0x08005cbd
 8005bd8:	08005ccf 	.word	0x08005ccf

08005bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e04a      	b.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1e      	ldr	r2, [pc, #120]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d108      	bne.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a11      	ldr	r2, [pc, #68]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5c:	d10c      	bne.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr
 8005c94:	40012c00 	.word	0x40012c00

08005c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <LL_RCC_GetUSARTClockSource>:
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	041b      	lsls	r3, r3, #16
 8005cf8:	4313      	orrs	r3, r2
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <LL_RCC_GetLPUARTClockSource>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4013      	ands	r3, r2
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e042      	b.n	8005dba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fb fa36 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2224      	movs	r2, #36	; 0x24
 8005d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fb6f 	bl	8006448 <UART_SetConfig>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e022      	b.n	8005dba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fdd7 	bl	8006930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005da0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fe5d 	bl	8006a72 <UART_CheckIdleState>
 8005db8:	4603      	mov	r3, r0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b0ba      	sub	sp, #232	; 0xe8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005dee:	f640 030f 	movw	r3, #2063	; 0x80f
 8005df2:	4013      	ands	r3, r2
 8005df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d11b      	bne.n	8005e38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d015      	beq.n	8005e38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 82e3 	beq.w	80063f4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
      }
      return;
 8005e36:	e2dd      	b.n	80063f4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8123 	beq.w	8006088 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e46:	4b8d      	ldr	r3, [pc, #564]	; (800607c <HAL_UART_IRQHandler+0x2b8>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e52:	4b8b      	ldr	r3, [pc, #556]	; (8006080 <HAL_UART_IRQHandler+0x2bc>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 8116 	beq.w	8006088 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d011      	beq.n	8005e8c <HAL_UART_IRQHandler+0xc8>
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00b      	beq.n	8005e8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_UART_IRQHandler+0xf8>
 8005e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	f043 0204 	orr.w	r2, r3, #4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d011      	beq.n	8005eec <HAL_UART_IRQHandler+0x128>
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d017      	beq.n	8005f28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f08:	4b5c      	ldr	r3, [pc, #368]	; (800607c <HAL_UART_IRQHandler+0x2b8>)
 8005f0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2208      	movs	r2, #8
 8005f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f043 0208 	orr.w	r2, r3, #8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d012      	beq.n	8005f5a <HAL_UART_IRQHandler+0x196>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00c      	beq.n	8005f5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	f043 0220 	orr.w	r2, r3, #32
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8249 	beq.w	80063f8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d013      	beq.n	8005f9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d105      	bne.n	8005f8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d007      	beq.n	8005f9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	d005      	beq.n	8005fbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d054      	beq.n	8006068 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fe6d 	bl	8006c9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d146      	bne.n	8006060 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800600a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1d9      	bne.n	8005fd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006024:	2b00      	cmp	r3, #0
 8006026:	d017      	beq.n	8006058 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <HAL_UART_IRQHandler+0x2c0>)
 8006030:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006038:	4618      	mov	r0, r3
 800603a:	f7fb fb0a 	bl	8001652 <HAL_DMA_Abort_IT>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d019      	beq.n	8006078 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006052:	4610      	mov	r0, r2
 8006054:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006056:	e00f      	b.n	8006078 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9e0 	bl	800641e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605e:	e00b      	b.n	8006078 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f9dc 	bl	800641e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006066:	e007      	b.n	8006078 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9d8 	bl	800641e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006076:	e1bf      	b.n	80063f8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	bf00      	nop
    return;
 800607a:	e1bd      	b.n	80063f8 <HAL_UART_IRQHandler+0x634>
 800607c:	10000001 	.word	0x10000001
 8006080:	04000120 	.word	0x04000120
 8006084:	08006d69 	.word	0x08006d69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608c:	2b01      	cmp	r3, #1
 800608e:	f040 8153 	bne.w	8006338 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 814c 	beq.w	8006338 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8145 	beq.w	8006338 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2210      	movs	r2, #16
 80060b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	f040 80bb 	bne.w	800623c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 818f 	beq.w	80063fc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060e8:	429a      	cmp	r2, r3
 80060ea:	f080 8187 	bcs.w	80063fc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	f040 8087 	bne.w	800621a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006136:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800613a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006142:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800614e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1da      	bne.n	800610c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3308      	adds	r3, #8
 8006176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800617a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800617e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006182:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800618c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e1      	bne.n	8006156 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e3      	bne.n	8006192 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e8:	f023 0310 	bic.w	r3, r3, #16
 80061ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80061fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e4      	bne.n	80061d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006214:	4618      	mov	r0, r3
 8006216:	f7fb f9be 	bl	8001596 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800622c:	b29b      	uxth	r3, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	b29b      	uxth	r3, r3
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f8fb 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800623a:	e0df      	b.n	80063fc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006248:	b29b      	uxth	r3, r3
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80d1 	beq.w	8006400 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800625e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80cc 	beq.w	8006400 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800627c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800628a:	647b      	str	r3, [r7, #68]	; 0x44
 800628c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e4      	bne.n	8006268 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	623b      	str	r3, [r7, #32]
   return(result);
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3308      	adds	r3, #8
 80062c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062c6:	633a      	str	r2, [r7, #48]	; 0x30
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e1      	bne.n	800629e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0310 	bic.w	r3, r3, #16
 8006302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	69b9      	ldr	r1, [r7, #24]
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	617b      	str	r3, [r7, #20]
   return(result);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e4      	bne.n	80062ee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800632a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f87d 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006336:	e063      	b.n	8006400 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00e      	beq.n	8006362 <HAL_UART_IRQHandler+0x59e>
 8006344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fd45 	bl	8006dea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006360:	e051      	b.n	8006406 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d014      	beq.n	8006398 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800637a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d008      	beq.n	8006398 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800638a:	2b00      	cmp	r3, #0
 800638c:	d03a      	beq.n	8006404 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
    }
    return;
 8006396:	e035      	b.n	8006404 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d009      	beq.n	80063b8 <HAL_UART_IRQHandler+0x5f4>
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fcef 	bl	8006d94 <UART_EndTransmit_IT>
    return;
 80063b6:	e026      	b.n	8006406 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <HAL_UART_IRQHandler+0x614>
 80063c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fd1c 	bl	8006e0e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063d6:	e016      	b.n	8006406 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d010      	beq.n	8006406 <HAL_UART_IRQHandler+0x642>
 80063e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	da0c      	bge.n	8006406 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fd05 	bl	8006dfc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063f2:	e008      	b.n	8006406 <HAL_UART_IRQHandler+0x642>
      return;
 80063f4:	bf00      	nop
 80063f6:	e006      	b.n	8006406 <HAL_UART_IRQHandler+0x642>
    return;
 80063f8:	bf00      	nop
 80063fa:	e004      	b.n	8006406 <HAL_UART_IRQHandler+0x642>
      return;
 80063fc:	bf00      	nop
 80063fe:	e002      	b.n	8006406 <HAL_UART_IRQHandler+0x642>
      return;
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <HAL_UART_IRQHandler+0x642>
    return;
 8006404:	bf00      	nop
  }
}
 8006406:	37e8      	adds	r7, #232	; 0xe8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr
	...

08006448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800644c:	b08c      	sub	sp, #48	; 0x30
 800644e:	af00      	add	r7, sp, #0
 8006450:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	431a      	orrs	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	431a      	orrs	r2, r3
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	4313      	orrs	r3, r2
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b94      	ldr	r3, [pc, #592]	; (80066c8 <UART_SetConfig+0x280>)
 8006478:	4013      	ands	r3, r2
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006480:	430b      	orrs	r3, r1
 8006482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a89      	ldr	r2, [pc, #548]	; (80066cc <UART_SetConfig+0x284>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b0:	4313      	orrs	r3, r2
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80064be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	f023 010f 	bic.w	r1, r3, #15
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a7a      	ldr	r2, [pc, #488]	; (80066d0 <UART_SetConfig+0x288>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d127      	bne.n	800653c <UART_SetConfig+0xf4>
 80064ec:	2003      	movs	r0, #3
 80064ee:	f7ff fbf7 	bl	8005ce0 <LL_RCC_GetUSARTClockSource>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d81b      	bhi.n	8006534 <UART_SetConfig+0xec>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0xbc>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006515 	.word	0x08006515
 8006508:	08006525 	.word	0x08006525
 800650c:	0800651d 	.word	0x0800651d
 8006510:	0800652d 	.word	0x0800652d
 8006514:	2301      	movs	r3, #1
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651a:	e080      	b.n	800661e <UART_SetConfig+0x1d6>
 800651c:	2302      	movs	r3, #2
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006522:	e07c      	b.n	800661e <UART_SetConfig+0x1d6>
 8006524:	2304      	movs	r3, #4
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652a:	e078      	b.n	800661e <UART_SetConfig+0x1d6>
 800652c:	2308      	movs	r3, #8
 800652e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006532:	e074      	b.n	800661e <UART_SetConfig+0x1d6>
 8006534:	2310      	movs	r3, #16
 8006536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653a:	e070      	b.n	800661e <UART_SetConfig+0x1d6>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a64      	ldr	r2, [pc, #400]	; (80066d4 <UART_SetConfig+0x28c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d138      	bne.n	80065b8 <UART_SetConfig+0x170>
 8006546:	200c      	movs	r0, #12
 8006548:	f7ff fbca 	bl	8005ce0 <LL_RCC_GetUSARTClockSource>
 800654c:	4603      	mov	r3, r0
 800654e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006552:	2b0c      	cmp	r3, #12
 8006554:	d82c      	bhi.n	80065b0 <UART_SetConfig+0x168>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0x114>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	08006591 	.word	0x08006591
 8006560:	080065b1 	.word	0x080065b1
 8006564:	080065b1 	.word	0x080065b1
 8006568:	080065b1 	.word	0x080065b1
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080065b1 	.word	0x080065b1
 8006574:	080065b1 	.word	0x080065b1
 8006578:	080065b1 	.word	0x080065b1
 800657c:	08006599 	.word	0x08006599
 8006580:	080065b1 	.word	0x080065b1
 8006584:	080065b1 	.word	0x080065b1
 8006588:	080065b1 	.word	0x080065b1
 800658c:	080065a9 	.word	0x080065a9
 8006590:	2300      	movs	r3, #0
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e042      	b.n	800661e <UART_SetConfig+0x1d6>
 8006598:	2302      	movs	r3, #2
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e03e      	b.n	800661e <UART_SetConfig+0x1d6>
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a6:	e03a      	b.n	800661e <UART_SetConfig+0x1d6>
 80065a8:	2308      	movs	r3, #8
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e036      	b.n	800661e <UART_SetConfig+0x1d6>
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b6:	e032      	b.n	800661e <UART_SetConfig+0x1d6>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a43      	ldr	r2, [pc, #268]	; (80066cc <UART_SetConfig+0x284>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d12a      	bne.n	8006618 <UART_SetConfig+0x1d0>
 80065c2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80065c6:	f7ff fb9d 	bl	8005d04 <LL_RCC_GetLPUARTClockSource>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d0:	d01a      	beq.n	8006608 <UART_SetConfig+0x1c0>
 80065d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d6:	d81b      	bhi.n	8006610 <UART_SetConfig+0x1c8>
 80065d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065dc:	d00c      	beq.n	80065f8 <UART_SetConfig+0x1b0>
 80065de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e2:	d815      	bhi.n	8006610 <UART_SetConfig+0x1c8>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <UART_SetConfig+0x1a8>
 80065e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ec:	d008      	beq.n	8006600 <UART_SetConfig+0x1b8>
 80065ee:	e00f      	b.n	8006610 <UART_SetConfig+0x1c8>
 80065f0:	2300      	movs	r3, #0
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065f6:	e012      	b.n	800661e <UART_SetConfig+0x1d6>
 80065f8:	2302      	movs	r3, #2
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065fe:	e00e      	b.n	800661e <UART_SetConfig+0x1d6>
 8006600:	2304      	movs	r3, #4
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006606:	e00a      	b.n	800661e <UART_SetConfig+0x1d6>
 8006608:	2308      	movs	r3, #8
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660e:	e006      	b.n	800661e <UART_SetConfig+0x1d6>
 8006610:	2310      	movs	r3, #16
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006616:	e002      	b.n	800661e <UART_SetConfig+0x1d6>
 8006618:	2310      	movs	r3, #16
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2a      	ldr	r2, [pc, #168]	; (80066cc <UART_SetConfig+0x284>)
 8006624:	4293      	cmp	r3, r2
 8006626:	f040 80a4 	bne.w	8006772 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800662a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800662e:	2b08      	cmp	r3, #8
 8006630:	d823      	bhi.n	800667a <UART_SetConfig+0x232>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0x1f0>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	0800665d 	.word	0x0800665d
 800663c:	0800667b 	.word	0x0800667b
 8006640:	08006665 	.word	0x08006665
 8006644:	0800667b 	.word	0x0800667b
 8006648:	0800666b 	.word	0x0800666b
 800664c:	0800667b 	.word	0x0800667b
 8006650:	0800667b 	.word	0x0800667b
 8006654:	0800667b 	.word	0x0800667b
 8006658:	08006673 	.word	0x08006673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800665c:	f7fd ffa2 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8006660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006662:	e010      	b.n	8006686 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006664:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <UART_SetConfig+0x290>)
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006668:	e00d      	b.n	8006686 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666a:	f7fd fee7 	bl	800443c <HAL_RCC_GetSysClockFreq>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006670:	e009      	b.n	8006686 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006678:	e005      	b.n	8006686 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006684:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8137 	beq.w	80068fc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	4a12      	ldr	r2, [pc, #72]	; (80066dc <UART_SetConfig+0x294>)
 8006694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006698:	461a      	mov	r2, r3
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4413      	add	r3, r2
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d305      	bcc.n	80066be <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d910      	bls.n	80066e0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066c4:	e11a      	b.n	80068fc <UART_SetConfig+0x4b4>
 80066c6:	bf00      	nop
 80066c8:	cfff69f3 	.word	0xcfff69f3
 80066cc:	40008000 	.word	0x40008000
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40004400 	.word	0x40004400
 80066d8:	00f42400 	.word	0x00f42400
 80066dc:	0800714c 	.word	0x0800714c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	2200      	movs	r2, #0
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	60fa      	str	r2, [r7, #12]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	4a8e      	ldr	r2, [pc, #568]	; (8006928 <UART_SetConfig+0x4e0>)
 80066ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2200      	movs	r2, #0
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	607a      	str	r2, [r7, #4]
 80066fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006702:	f7f9 fd39 	bl	8000178 <__aeabi_uldivmod>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4610      	mov	r0, r2
 800670c:	4619      	mov	r1, r3
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	020b      	lsls	r3, r1, #8
 8006718:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800671c:	0202      	lsls	r2, r0, #8
 800671e:	6979      	ldr	r1, [r7, #20]
 8006720:	6849      	ldr	r1, [r1, #4]
 8006722:	0849      	lsrs	r1, r1, #1
 8006724:	2000      	movs	r0, #0
 8006726:	460c      	mov	r4, r1
 8006728:	4605      	mov	r5, r0
 800672a:	eb12 0804 	adds.w	r8, r2, r4
 800672e:	eb43 0905 	adc.w	r9, r3, r5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	469a      	mov	sl, r3
 800673a:	4693      	mov	fp, r2
 800673c:	4652      	mov	r2, sl
 800673e:	465b      	mov	r3, fp
 8006740:	4640      	mov	r0, r8
 8006742:	4649      	mov	r1, r9
 8006744:	f7f9 fd18 	bl	8000178 <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4613      	mov	r3, r2
 800674e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006756:	d308      	bcc.n	800676a <UART_SetConfig+0x322>
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675e:	d204      	bcs.n	800676a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a3a      	ldr	r2, [r7, #32]
 8006766:	60da      	str	r2, [r3, #12]
 8006768:	e0c8      	b.n	80068fc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006770:	e0c4      	b.n	80068fc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677a:	d167      	bne.n	800684c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800677c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006780:	2b08      	cmp	r3, #8
 8006782:	d828      	bhi.n	80067d6 <UART_SetConfig+0x38e>
 8006784:	a201      	add	r2, pc, #4	; (adr r2, 800678c <UART_SetConfig+0x344>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067c1 	.word	0x080067c1
 8006798:	080067d7 	.word	0x080067d7
 800679c:	080067c7 	.word	0x080067c7
 80067a0:	080067d7 	.word	0x080067d7
 80067a4:	080067d7 	.word	0x080067d7
 80067a8:	080067d7 	.word	0x080067d7
 80067ac:	080067cf 	.word	0x080067cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b0:	f7fd fef8 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 80067b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067b6:	e014      	b.n	80067e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b8:	f7fd ff06 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067be:	e010      	b.n	80067e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c0:	4b5a      	ldr	r3, [pc, #360]	; (800692c <UART_SetConfig+0x4e4>)
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067c4:	e00d      	b.n	80067e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c6:	f7fd fe39 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80067ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067cc:	e009      	b.n	80067e2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067d4:	e005      	b.n	80067e2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8089 	beq.w	80068fc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	4a4e      	ldr	r2, [pc, #312]	; (8006928 <UART_SetConfig+0x4e0>)
 80067f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f4:	461a      	mov	r2, r3
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067fc:	005a      	lsls	r2, r3, #1
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	441a      	add	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	fbb2 f3f3 	udiv	r3, r2, r3
 800680e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d916      	bls.n	8006844 <UART_SetConfig+0x3fc>
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d212      	bcs.n	8006844 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	b29b      	uxth	r3, r3
 8006822:	f023 030f 	bic.w	r3, r3, #15
 8006826:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	b29b      	uxth	r3, r3
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	b29a      	uxth	r2, r3
 8006834:	8bfb      	ldrh	r3, [r7, #30]
 8006836:	4313      	orrs	r3, r2
 8006838:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	8bfa      	ldrh	r2, [r7, #30]
 8006840:	60da      	str	r2, [r3, #12]
 8006842:	e05b      	b.n	80068fc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800684a:	e057      	b.n	80068fc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800684c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006850:	2b08      	cmp	r3, #8
 8006852:	d828      	bhi.n	80068a6 <UART_SetConfig+0x45e>
 8006854:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0x414>)
 8006856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685a:	bf00      	nop
 800685c:	08006881 	.word	0x08006881
 8006860:	08006889 	.word	0x08006889
 8006864:	08006891 	.word	0x08006891
 8006868:	080068a7 	.word	0x080068a7
 800686c:	08006897 	.word	0x08006897
 8006870:	080068a7 	.word	0x080068a7
 8006874:	080068a7 	.word	0x080068a7
 8006878:	080068a7 	.word	0x080068a7
 800687c:	0800689f 	.word	0x0800689f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006880:	f7fd fe90 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8006884:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006886:	e014      	b.n	80068b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006888:	f7fd fe9e 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 800688c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800688e:	e010      	b.n	80068b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006890:	4b26      	ldr	r3, [pc, #152]	; (800692c <UART_SetConfig+0x4e4>)
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006894:	e00d      	b.n	80068b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006896:	f7fd fdd1 	bl	800443c <HAL_RCC_GetSysClockFreq>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800689c:	e009      	b.n	80068b2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068a4:	e005      	b.n	80068b2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068b0:	bf00      	nop
    }

    if (pclk != 0U)
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d021      	beq.n	80068fc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	4a1a      	ldr	r2, [pc, #104]	; (8006928 <UART_SetConfig+0x4e0>)
 80068be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	441a      	add	r2, r3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	2b0f      	cmp	r3, #15
 80068e0:	d909      	bls.n	80068f6 <UART_SetConfig+0x4ae>
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e8:	d205      	bcs.n	80068f6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	e002      	b.n	80068fc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2201      	movs	r2, #1
 8006900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2201      	movs	r2, #1
 8006908:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2200      	movs	r2, #0
 8006910:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2200      	movs	r2, #0
 8006916:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006918:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800691c:	4618      	mov	r0, r3
 800691e:	3730      	adds	r7, #48	; 0x30
 8006920:	46bd      	mov	sp, r7
 8006922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006926:	bf00      	nop
 8006928:	0800714c 	.word	0x0800714c
 800692c:	00f42400 	.word	0x00f42400

08006930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01a      	beq.n	8006a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2e:	d10a      	bne.n	8006a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
  }
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af02      	add	r7, sp, #8
 8006a78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a82:	f7fa fa87 	bl	8000f94 <HAL_GetTick>
 8006a86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d10e      	bne.n	8006ab4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f832 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e028      	b.n	8006b06 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d10e      	bne.n	8006ae0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f81c 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e012      	b.n	8006b06 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b09c      	sub	sp, #112	; 0x70
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1e:	e0a9      	b.n	8006c74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b26:	f000 80a5 	beq.w	8006c74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2a:	f7fa fa33 	bl	8000f94 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d140      	bne.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b54:	667b      	str	r3, [r7, #100]	; 0x64
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e6      	bne.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	663b      	str	r3, [r7, #96]	; 0x60
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e069      	b.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d051      	beq.n	8006c74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bde:	d149      	bne.n	8006c74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c3c:	623a      	str	r2, [r7, #32]
 8006c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	69f9      	ldr	r1, [r7, #28]
 8006c42:	6a3a      	ldr	r2, [r7, #32]
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e5      	bne.n	8006c1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e010      	b.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	bf0c      	ite	eq
 8006c84:	2301      	moveq	r3, #1
 8006c86:	2300      	movne	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	f43f af46 	beq.w	8006b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3770      	adds	r7, #112	; 0x70
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b095      	sub	sp, #84	; 0x54
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e6      	bne.n	8006ca6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cee:	f023 0301 	bic.w	r3, r3, #1
 8006cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e3      	bne.n	8006cd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d118      	bne.n	8006d4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f023 0310 	bic.w	r3, r3, #16
 8006d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6979      	ldr	r1, [r7, #20]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	613b      	str	r3, [r7, #16]
   return(result);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e6      	bne.n	8006d18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d5e:	bf00      	nop
 8006d60:	3754      	adds	r7, #84	; 0x54
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fb49 	bl	800641e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e6      	bne.n	8006d9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff fb15 	bl	800640c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de2:	bf00      	nop
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr

08006dfc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr

08006e0e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e027      	b.n	8006e86 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2224      	movs	r2, #36	; 0x24
 8006e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0201 	bic.w	r2, r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e02d      	b.n	8006f04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2224      	movs	r2, #36	; 0x24
 8006eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f84f 	bl	8006f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d101      	bne.n	8006f24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e02d      	b.n	8006f80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2224      	movs	r2, #36	; 0x24
 8006f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0201 	bic.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f811 	bl	8006f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d108      	bne.n	8006faa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fa8:	e031      	b.n	800700e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006faa:	2308      	movs	r3, #8
 8006fac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fae:	2308      	movs	r3, #8
 8006fb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	0e5b      	lsrs	r3, r3, #25
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	0f5b      	lsrs	r3, r3, #29
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	7b3a      	ldrb	r2, [r7, #12]
 8006fd6:	4910      	ldr	r1, [pc, #64]	; (8007018 <UARTEx_SetNbDataToProcess+0x90>)
 8006fd8:	5c8a      	ldrb	r2, [r1, r2]
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fde:	7b3a      	ldrb	r2, [r7, #12]
 8006fe0:	490e      	ldr	r1, [pc, #56]	; (800701c <UARTEx_SetNbDataToProcess+0x94>)
 8006fe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	7b7a      	ldrb	r2, [r7, #13]
 8006ff4:	4908      	ldr	r1, [pc, #32]	; (8007018 <UARTEx_SetNbDataToProcess+0x90>)
 8006ff6:	5c8a      	ldrb	r2, [r1, r2]
 8006ff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ffc:	7b7a      	ldrb	r2, [r7, #13]
 8006ffe:	4907      	ldr	r1, [pc, #28]	; (800701c <UARTEx_SetNbDataToProcess+0x94>)
 8007000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007002:	fb93 f3f2 	sdiv	r3, r3, r2
 8007006:	b29a      	uxth	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr
 8007018:	08007164 	.word	0x08007164
 800701c:	0800716c 	.word	0x0800716c

08007020 <memset>:
 8007020:	4402      	add	r2, r0
 8007022:	4603      	mov	r3, r0
 8007024:	4293      	cmp	r3, r2
 8007026:	d100      	bne.n	800702a <memset+0xa>
 8007028:	4770      	bx	lr
 800702a:	f803 1b01 	strb.w	r1, [r3], #1
 800702e:	e7f9      	b.n	8007024 <memset+0x4>

08007030 <__libc_init_array>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	4d0d      	ldr	r5, [pc, #52]	; (8007068 <__libc_init_array+0x38>)
 8007034:	4c0d      	ldr	r4, [pc, #52]	; (800706c <__libc_init_array+0x3c>)
 8007036:	1b64      	subs	r4, r4, r5
 8007038:	10a4      	asrs	r4, r4, #2
 800703a:	2600      	movs	r6, #0
 800703c:	42a6      	cmp	r6, r4
 800703e:	d109      	bne.n	8007054 <__libc_init_array+0x24>
 8007040:	4d0b      	ldr	r5, [pc, #44]	; (8007070 <__libc_init_array+0x40>)
 8007042:	4c0c      	ldr	r4, [pc, #48]	; (8007074 <__libc_init_array+0x44>)
 8007044:	f000 f818 	bl	8007078 <_init>
 8007048:	1b64      	subs	r4, r4, r5
 800704a:	10a4      	asrs	r4, r4, #2
 800704c:	2600      	movs	r6, #0
 800704e:	42a6      	cmp	r6, r4
 8007050:	d105      	bne.n	800705e <__libc_init_array+0x2e>
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	f855 3b04 	ldr.w	r3, [r5], #4
 8007058:	4798      	blx	r3
 800705a:	3601      	adds	r6, #1
 800705c:	e7ee      	b.n	800703c <__libc_init_array+0xc>
 800705e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007062:	4798      	blx	r3
 8007064:	3601      	adds	r6, #1
 8007066:	e7f2      	b.n	800704e <__libc_init_array+0x1e>
 8007068:	0800717c 	.word	0x0800717c
 800706c:	0800717c 	.word	0x0800717c
 8007070:	0800717c 	.word	0x0800717c
 8007074:	08007180 	.word	0x08007180

08007078 <_init>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr

08007084 <_fini>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr
