
com_board_CM0PLUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b38  080200c0  080200c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08020bf8  08020bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020c88  08020c88  00018014  2**0
                  CONTENTS
  4 .ARM          00000000  08020c88  08020c88  00018014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08020c88  08020c88  00018014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020c88  08020c88  00010c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020c8c  08020c8c  00010c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20008000  08020c90  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20008014  08020ca4  00018014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200080a4  08020ca4  000180a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00018014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001803c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000503e  00000000  00000000  0001807f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014d2  00000000  00000000  0001d0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  0001e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055c  00000000  00000000  0001ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b169  00000000  00000000  0001f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007bea  00000000  00000000  0003a3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b07cc  00000000  00000000  00041f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001848  00000000  00000000  000f2764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f3fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080200c0 <__do_global_dtors_aux>:
 80200c0:	b510      	push	{r4, lr}
 80200c2:	4c06      	ldr	r4, [pc, #24]	; (80200dc <__do_global_dtors_aux+0x1c>)
 80200c4:	7823      	ldrb	r3, [r4, #0]
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d107      	bne.n	80200da <__do_global_dtors_aux+0x1a>
 80200ca:	4b05      	ldr	r3, [pc, #20]	; (80200e0 <__do_global_dtors_aux+0x20>)
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d002      	beq.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d0:	4804      	ldr	r0, [pc, #16]	; (80200e4 <__do_global_dtors_aux+0x24>)
 80200d2:	e000      	b.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d4:	bf00      	nop
 80200d6:	2301      	movs	r3, #1
 80200d8:	7023      	strb	r3, [r4, #0]
 80200da:	bd10      	pop	{r4, pc}
 80200dc:	20008014 	.word	0x20008014
 80200e0:	00000000 	.word	0x00000000
 80200e4:	08020be0 	.word	0x08020be0

080200e8 <frame_dummy>:
 80200e8:	4b04      	ldr	r3, [pc, #16]	; (80200fc <frame_dummy+0x14>)
 80200ea:	b510      	push	{r4, lr}
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d003      	beq.n	80200f8 <frame_dummy+0x10>
 80200f0:	4903      	ldr	r1, [pc, #12]	; (8020100 <frame_dummy+0x18>)
 80200f2:	4804      	ldr	r0, [pc, #16]	; (8020104 <frame_dummy+0x1c>)
 80200f4:	e000      	b.n	80200f8 <frame_dummy+0x10>
 80200f6:	bf00      	nop
 80200f8:	bd10      	pop	{r4, pc}
 80200fa:	46c0      	nop			; (mov r8, r8)
 80200fc:	00000000 	.word	0x00000000
 8020100:	20008018 	.word	0x20008018
 8020104:	08020be0 	.word	0x08020be0

08020108 <__udivsi3>:
 8020108:	2200      	movs	r2, #0
 802010a:	0843      	lsrs	r3, r0, #1
 802010c:	428b      	cmp	r3, r1
 802010e:	d374      	bcc.n	80201fa <__udivsi3+0xf2>
 8020110:	0903      	lsrs	r3, r0, #4
 8020112:	428b      	cmp	r3, r1
 8020114:	d35f      	bcc.n	80201d6 <__udivsi3+0xce>
 8020116:	0a03      	lsrs	r3, r0, #8
 8020118:	428b      	cmp	r3, r1
 802011a:	d344      	bcc.n	80201a6 <__udivsi3+0x9e>
 802011c:	0b03      	lsrs	r3, r0, #12
 802011e:	428b      	cmp	r3, r1
 8020120:	d328      	bcc.n	8020174 <__udivsi3+0x6c>
 8020122:	0c03      	lsrs	r3, r0, #16
 8020124:	428b      	cmp	r3, r1
 8020126:	d30d      	bcc.n	8020144 <__udivsi3+0x3c>
 8020128:	22ff      	movs	r2, #255	; 0xff
 802012a:	0209      	lsls	r1, r1, #8
 802012c:	ba12      	rev	r2, r2
 802012e:	0c03      	lsrs	r3, r0, #16
 8020130:	428b      	cmp	r3, r1
 8020132:	d302      	bcc.n	802013a <__udivsi3+0x32>
 8020134:	1212      	asrs	r2, r2, #8
 8020136:	0209      	lsls	r1, r1, #8
 8020138:	d065      	beq.n	8020206 <__udivsi3+0xfe>
 802013a:	0b03      	lsrs	r3, r0, #12
 802013c:	428b      	cmp	r3, r1
 802013e:	d319      	bcc.n	8020174 <__udivsi3+0x6c>
 8020140:	e000      	b.n	8020144 <__udivsi3+0x3c>
 8020142:	0a09      	lsrs	r1, r1, #8
 8020144:	0bc3      	lsrs	r3, r0, #15
 8020146:	428b      	cmp	r3, r1
 8020148:	d301      	bcc.n	802014e <__udivsi3+0x46>
 802014a:	03cb      	lsls	r3, r1, #15
 802014c:	1ac0      	subs	r0, r0, r3
 802014e:	4152      	adcs	r2, r2
 8020150:	0b83      	lsrs	r3, r0, #14
 8020152:	428b      	cmp	r3, r1
 8020154:	d301      	bcc.n	802015a <__udivsi3+0x52>
 8020156:	038b      	lsls	r3, r1, #14
 8020158:	1ac0      	subs	r0, r0, r3
 802015a:	4152      	adcs	r2, r2
 802015c:	0b43      	lsrs	r3, r0, #13
 802015e:	428b      	cmp	r3, r1
 8020160:	d301      	bcc.n	8020166 <__udivsi3+0x5e>
 8020162:	034b      	lsls	r3, r1, #13
 8020164:	1ac0      	subs	r0, r0, r3
 8020166:	4152      	adcs	r2, r2
 8020168:	0b03      	lsrs	r3, r0, #12
 802016a:	428b      	cmp	r3, r1
 802016c:	d301      	bcc.n	8020172 <__udivsi3+0x6a>
 802016e:	030b      	lsls	r3, r1, #12
 8020170:	1ac0      	subs	r0, r0, r3
 8020172:	4152      	adcs	r2, r2
 8020174:	0ac3      	lsrs	r3, r0, #11
 8020176:	428b      	cmp	r3, r1
 8020178:	d301      	bcc.n	802017e <__udivsi3+0x76>
 802017a:	02cb      	lsls	r3, r1, #11
 802017c:	1ac0      	subs	r0, r0, r3
 802017e:	4152      	adcs	r2, r2
 8020180:	0a83      	lsrs	r3, r0, #10
 8020182:	428b      	cmp	r3, r1
 8020184:	d301      	bcc.n	802018a <__udivsi3+0x82>
 8020186:	028b      	lsls	r3, r1, #10
 8020188:	1ac0      	subs	r0, r0, r3
 802018a:	4152      	adcs	r2, r2
 802018c:	0a43      	lsrs	r3, r0, #9
 802018e:	428b      	cmp	r3, r1
 8020190:	d301      	bcc.n	8020196 <__udivsi3+0x8e>
 8020192:	024b      	lsls	r3, r1, #9
 8020194:	1ac0      	subs	r0, r0, r3
 8020196:	4152      	adcs	r2, r2
 8020198:	0a03      	lsrs	r3, r0, #8
 802019a:	428b      	cmp	r3, r1
 802019c:	d301      	bcc.n	80201a2 <__udivsi3+0x9a>
 802019e:	020b      	lsls	r3, r1, #8
 80201a0:	1ac0      	subs	r0, r0, r3
 80201a2:	4152      	adcs	r2, r2
 80201a4:	d2cd      	bcs.n	8020142 <__udivsi3+0x3a>
 80201a6:	09c3      	lsrs	r3, r0, #7
 80201a8:	428b      	cmp	r3, r1
 80201aa:	d301      	bcc.n	80201b0 <__udivsi3+0xa8>
 80201ac:	01cb      	lsls	r3, r1, #7
 80201ae:	1ac0      	subs	r0, r0, r3
 80201b0:	4152      	adcs	r2, r2
 80201b2:	0983      	lsrs	r3, r0, #6
 80201b4:	428b      	cmp	r3, r1
 80201b6:	d301      	bcc.n	80201bc <__udivsi3+0xb4>
 80201b8:	018b      	lsls	r3, r1, #6
 80201ba:	1ac0      	subs	r0, r0, r3
 80201bc:	4152      	adcs	r2, r2
 80201be:	0943      	lsrs	r3, r0, #5
 80201c0:	428b      	cmp	r3, r1
 80201c2:	d301      	bcc.n	80201c8 <__udivsi3+0xc0>
 80201c4:	014b      	lsls	r3, r1, #5
 80201c6:	1ac0      	subs	r0, r0, r3
 80201c8:	4152      	adcs	r2, r2
 80201ca:	0903      	lsrs	r3, r0, #4
 80201cc:	428b      	cmp	r3, r1
 80201ce:	d301      	bcc.n	80201d4 <__udivsi3+0xcc>
 80201d0:	010b      	lsls	r3, r1, #4
 80201d2:	1ac0      	subs	r0, r0, r3
 80201d4:	4152      	adcs	r2, r2
 80201d6:	08c3      	lsrs	r3, r0, #3
 80201d8:	428b      	cmp	r3, r1
 80201da:	d301      	bcc.n	80201e0 <__udivsi3+0xd8>
 80201dc:	00cb      	lsls	r3, r1, #3
 80201de:	1ac0      	subs	r0, r0, r3
 80201e0:	4152      	adcs	r2, r2
 80201e2:	0883      	lsrs	r3, r0, #2
 80201e4:	428b      	cmp	r3, r1
 80201e6:	d301      	bcc.n	80201ec <__udivsi3+0xe4>
 80201e8:	008b      	lsls	r3, r1, #2
 80201ea:	1ac0      	subs	r0, r0, r3
 80201ec:	4152      	adcs	r2, r2
 80201ee:	0843      	lsrs	r3, r0, #1
 80201f0:	428b      	cmp	r3, r1
 80201f2:	d301      	bcc.n	80201f8 <__udivsi3+0xf0>
 80201f4:	004b      	lsls	r3, r1, #1
 80201f6:	1ac0      	subs	r0, r0, r3
 80201f8:	4152      	adcs	r2, r2
 80201fa:	1a41      	subs	r1, r0, r1
 80201fc:	d200      	bcs.n	8020200 <__udivsi3+0xf8>
 80201fe:	4601      	mov	r1, r0
 8020200:	4152      	adcs	r2, r2
 8020202:	4610      	mov	r0, r2
 8020204:	4770      	bx	lr
 8020206:	e7ff      	b.n	8020208 <__udivsi3+0x100>
 8020208:	b501      	push	{r0, lr}
 802020a:	2000      	movs	r0, #0
 802020c:	f000 f806 	bl	802021c <__aeabi_idiv0>
 8020210:	bd02      	pop	{r1, pc}
 8020212:	46c0      	nop			; (mov r8, r8)

08020214 <__aeabi_uidivmod>:
 8020214:	2900      	cmp	r1, #0
 8020216:	d0f7      	beq.n	8020208 <__udivsi3+0x100>
 8020218:	e776      	b.n	8020108 <__udivsi3>
 802021a:	4770      	bx	lr

0802021c <__aeabi_idiv0>:
 802021c:	4770      	bx	lr
 802021e:	46c0      	nop			; (mov r8, r8)

08020220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020220:	b580      	push	{r7, lr}
 8020222:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8020224:	46c0      	nop			; (mov r8, r8)
 8020226:	46bd      	mov	sp, r7
 8020228:	bd80      	pop	{r7, pc}

0802022a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802022a:	b580      	push	{r7, lr}
 802022c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802022e:	f000 f859 	bl	80202e4 <HAL_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8020232:	f000 fb59 	bl	80208e8 <MX_LoRaWAN_Process>
 8020236:	e7fc      	b.n	8020232 <main+0x8>

08020238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020238:	b580      	push	{r7, lr}
 802023a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802023c:	46c0      	nop			; (mov r8, r8)
 802023e:	46bd      	mov	sp, r7
 8020240:	bd80      	pop	{r7, pc}

08020242 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8020242:	b580      	push	{r7, lr}
 8020244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8020246:	e7fe      	b.n	8020246 <NMI_Handler+0x4>

08020248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020248:	b580      	push	{r7, lr}
 802024a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802024c:	e7fe      	b.n	802024c <HardFault_Handler+0x4>

0802024e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802024e:	b580      	push	{r7, lr}
 8020250:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8020252:	46c0      	nop			; (mov r8, r8)
 8020254:	46bd      	mov	sp, r7
 8020256:	bd80      	pop	{r7, pc}

08020258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020258:	b580      	push	{r7, lr}
 802025a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802025c:	46c0      	nop			; (mov r8, r8)
 802025e:	46bd      	mov	sp, r7
 8020260:	bd80      	pop	{r7, pc}

08020262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020262:	b580      	push	{r7, lr}
 8020264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020266:	f000 f8a3 	bl	80203b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802026a:	46c0      	nop			; (mov r8, r8)
 802026c:	46bd      	mov	sp, r7
 802026e:	bd80      	pop	{r7, pc}

08020270 <IPCC_C2_RX_C2_TX_IRQHandler>:

/**
  * @brief This function handles IPCC RX Occupied and TX Free Interrupt.
  */
void IPCC_C2_RX_C2_TX_IRQHandler(void)
{
 8020270:	b580      	push	{r7, lr}
 8020272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C2_RX_C2_TX_IRQn 0 */

  /* USER CODE END IPCC_C2_RX_C2_TX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8020274:	4b05      	ldr	r3, [pc, #20]	; (802028c <IPCC_C2_RX_C2_TX_IRQHandler+0x1c>)
 8020276:	0018      	movs	r0, r3
 8020278:	f000 f9b0 	bl	80205dc <HAL_IPCC_RX_IRQHandler>
  HAL_IPCC_TX_IRQHandler(&hipcc);
 802027c:	4b03      	ldr	r3, [pc, #12]	; (802028c <IPCC_C2_RX_C2_TX_IRQHandler+0x1c>)
 802027e:	0018      	movs	r0, r3
 8020280:	f000 f95c 	bl	802053c <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C2_RX_C2_TX_IRQn 1 */

  /* USER CODE END IPCC_C2_RX_C2_TX_IRQn 1 */
}
 8020284:	46c0      	nop			; (mov r8, r8)
 8020286:	46bd      	mov	sp, r7
 8020288:	bd80      	pop	{r7, pc}
 802028a:	46c0      	nop			; (mov r8, r8)
 802028c:	20008030 	.word	0x20008030

08020290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8020290:	480d      	ldr	r0, [pc, #52]	; (80202c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8020292:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8020294:	f7ff ffc4 	bl	8020220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8020298:	480c      	ldr	r0, [pc, #48]	; (80202cc <LoopForever+0x6>)
  ldr r1, =_edata
 802029a:	490d      	ldr	r1, [pc, #52]	; (80202d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 802029c:	4a0d      	ldr	r2, [pc, #52]	; (80202d4 <LoopForever+0xe>)
  movs r3, #0
 802029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80202a0:	e002      	b.n	80202a8 <LoopCopyDataInit>

080202a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80202a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80202a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80202a6:	3304      	adds	r3, #4

080202a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80202a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80202aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80202ac:	d3f9      	bcc.n	80202a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80202ae:	4a0a      	ldr	r2, [pc, #40]	; (80202d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80202b0:	4c0a      	ldr	r4, [pc, #40]	; (80202dc <LoopForever+0x16>)
  movs r3, #0
 80202b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80202b4:	e001      	b.n	80202ba <LoopFillZerobss>

080202b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80202b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80202b8:	3204      	adds	r2, #4

080202ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80202ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80202bc:	d3fb      	bcc.n	80202b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80202be:	f000 fc6b 	bl	8020b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80202c2:	f7ff ffb2 	bl	802022a <main>

080202c6 <LoopForever>:

LoopForever:
    b LoopForever
 80202c6:	e7fe      	b.n	80202c6 <LoopForever>
  ldr   r0, =_estack
 80202c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80202cc:	20008000 	.word	0x20008000
  ldr r1, =_edata
 80202d0:	20008014 	.word	0x20008014
  ldr r2, =_sidata
 80202d4:	08020c90 	.word	0x08020c90
  ldr r2, =_sbss
 80202d8:	20008014 	.word	0x20008014
  ldr r4, =_ebss
 80202dc:	200080a4 	.word	0x200080a4

080202e0 <ADC_COMP_DAC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80202e0:	e7fe      	b.n	80202e0 <ADC_COMP_DAC_IRQHandler>
	...

080202e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80202e4:	b580      	push	{r7, lr}
 80202e6:	b082      	sub	sp, #8
 80202e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80202ea:	1dfb      	adds	r3, r7, #7
 80202ec:	2200      	movs	r2, #0
 80202ee:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
#endif

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
 80202f0:	f000 fae2 	bl	80208b8 <HAL_RCC_GetHCLK2Freq>
 80202f4:	0002      	movs	r2, r0
 80202f6:	4b09      	ldr	r3, [pc, #36]	; (802031c <HAL_Init+0x38>)
 80202f8:	601a      	str	r2, [r3, #0]
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80202fa:	2003      	movs	r0, #3
 80202fc:	f000 f810 	bl	8020320 <HAL_InitTick>
 8020300:	1e03      	subs	r3, r0, #0
 8020302:	d003      	beq.n	802030c <HAL_Init+0x28>
  {
    status = HAL_ERROR;
 8020304:	1dfb      	adds	r3, r7, #7
 8020306:	2201      	movs	r2, #1
 8020308:	701a      	strb	r2, [r3, #0]
 802030a:	e001      	b.n	8020310 <HAL_Init+0x2c>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 802030c:	f7ff ff94 	bl	8020238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020310:	1dfb      	adds	r3, r7, #7
 8020312:	781b      	ldrb	r3, [r3, #0]
}
 8020314:	0018      	movs	r0, r3
 8020316:	46bd      	mov	sp, r7
 8020318:	b002      	add	sp, #8
 802031a:	bd80      	pop	{r7, pc}
 802031c:	20008000 	.word	0x20008000

08020320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020320:	b590      	push	{r4, r7, lr}
 8020322:	b085      	sub	sp, #20
 8020324:	af00      	add	r7, sp, #0
 8020326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020328:	230f      	movs	r3, #15
 802032a:	18fb      	adds	r3, r7, r3
 802032c:	2200      	movs	r2, #0
 802032e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020330:	4b1d      	ldr	r3, [pc, #116]	; (80203a8 <HAL_InitTick+0x88>)
 8020332:	781b      	ldrb	r3, [r3, #0]
 8020334:	2b00      	cmp	r3, #0
 8020336:	d02c      	beq.n	8020392 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020338:	f000 fabe 	bl	80208b8 <HAL_RCC_GetHCLK2Freq>
 802033c:	0004      	movs	r4, r0
 802033e:	4b1a      	ldr	r3, [pc, #104]	; (80203a8 <HAL_InitTick+0x88>)
 8020340:	781b      	ldrb	r3, [r3, #0]
 8020342:	0019      	movs	r1, r3
 8020344:	23fa      	movs	r3, #250	; 0xfa
 8020346:	0098      	lsls	r0, r3, #2
 8020348:	f7ff fede 	bl	8020108 <__udivsi3>
 802034c:	0003      	movs	r3, r0
 802034e:	0019      	movs	r1, r3
 8020350:	0020      	movs	r0, r4
 8020352:	f7ff fed9 	bl	8020108 <__udivsi3>
 8020356:	0003      	movs	r3, r0
 8020358:	0018      	movs	r0, r3
 802035a:	f000 f8e2 	bl	8020522 <HAL_SYSTICK_Config>
 802035e:	1e03      	subs	r3, r0, #0
 8020360:	d112      	bne.n	8020388 <HAL_InitTick+0x68>
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	2b03      	cmp	r3, #3
 8020366:	d80a      	bhi.n	802037e <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020368:	6879      	ldr	r1, [r7, #4]
 802036a:	2301      	movs	r3, #1
 802036c:	425b      	negs	r3, r3
 802036e:	2200      	movs	r2, #0
 8020370:	0018      	movs	r0, r3
 8020372:	f000 f8c1 	bl	80204f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020376:	4b0d      	ldr	r3, [pc, #52]	; (80203ac <HAL_InitTick+0x8c>)
 8020378:	687a      	ldr	r2, [r7, #4]
 802037a:	601a      	str	r2, [r3, #0]
 802037c:	e00d      	b.n	802039a <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
 802037e:	230f      	movs	r3, #15
 8020380:	18fb      	adds	r3, r7, r3
 8020382:	2201      	movs	r2, #1
 8020384:	701a      	strb	r2, [r3, #0]
 8020386:	e008      	b.n	802039a <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020388:	230f      	movs	r3, #15
 802038a:	18fb      	adds	r3, r7, r3
 802038c:	2201      	movs	r2, #1
 802038e:	701a      	strb	r2, [r3, #0]
 8020390:	e003      	b.n	802039a <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8020392:	230f      	movs	r3, #15
 8020394:	18fb      	adds	r3, r7, r3
 8020396:	2201      	movs	r2, #1
 8020398:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 802039a:	230f      	movs	r3, #15
 802039c:	18fb      	adds	r3, r7, r3
 802039e:	781b      	ldrb	r3, [r3, #0]
}
 80203a0:	0018      	movs	r0, r3
 80203a2:	46bd      	mov	sp, r7
 80203a4:	b005      	add	sp, #20
 80203a6:	bd90      	pop	{r4, r7, pc}
 80203a8:	20008008 	.word	0x20008008
 80203ac:	20008004 	.word	0x20008004

080203b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80203b0:	b580      	push	{r7, lr}
 80203b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80203b4:	4b05      	ldr	r3, [pc, #20]	; (80203cc <HAL_IncTick+0x1c>)
 80203b6:	781b      	ldrb	r3, [r3, #0]
 80203b8:	001a      	movs	r2, r3
 80203ba:	4b05      	ldr	r3, [pc, #20]	; (80203d0 <HAL_IncTick+0x20>)
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	18d2      	adds	r2, r2, r3
 80203c0:	4b03      	ldr	r3, [pc, #12]	; (80203d0 <HAL_IncTick+0x20>)
 80203c2:	601a      	str	r2, [r3, #0]
}
 80203c4:	46c0      	nop			; (mov r8, r8)
 80203c6:	46bd      	mov	sp, r7
 80203c8:	bd80      	pop	{r7, pc}
 80203ca:	46c0      	nop			; (mov r8, r8)
 80203cc:	20008008 	.word	0x20008008
 80203d0:	2000806c 	.word	0x2000806c

080203d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80203d4:	b590      	push	{r4, r7, lr}
 80203d6:	b083      	sub	sp, #12
 80203d8:	af00      	add	r7, sp, #0
 80203da:	0002      	movs	r2, r0
 80203dc:	6039      	str	r1, [r7, #0]
 80203de:	1dfb      	adds	r3, r7, #7
 80203e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80203e2:	1dfb      	adds	r3, r7, #7
 80203e4:	781b      	ldrb	r3, [r3, #0]
 80203e6:	2b7f      	cmp	r3, #127	; 0x7f
 80203e8:	d828      	bhi.n	802043c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80203ea:	4a2f      	ldr	r2, [pc, #188]	; (80204a8 <__NVIC_SetPriority+0xd4>)
 80203ec:	1dfb      	adds	r3, r7, #7
 80203ee:	781b      	ldrb	r3, [r3, #0]
 80203f0:	b25b      	sxtb	r3, r3
 80203f2:	089b      	lsrs	r3, r3, #2
 80203f4:	33c0      	adds	r3, #192	; 0xc0
 80203f6:	009b      	lsls	r3, r3, #2
 80203f8:	589b      	ldr	r3, [r3, r2]
 80203fa:	1dfa      	adds	r2, r7, #7
 80203fc:	7812      	ldrb	r2, [r2, #0]
 80203fe:	0011      	movs	r1, r2
 8020400:	2203      	movs	r2, #3
 8020402:	400a      	ands	r2, r1
 8020404:	00d2      	lsls	r2, r2, #3
 8020406:	21ff      	movs	r1, #255	; 0xff
 8020408:	4091      	lsls	r1, r2
 802040a:	000a      	movs	r2, r1
 802040c:	43d2      	mvns	r2, r2
 802040e:	401a      	ands	r2, r3
 8020410:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8020412:	683b      	ldr	r3, [r7, #0]
 8020414:	019b      	lsls	r3, r3, #6
 8020416:	22ff      	movs	r2, #255	; 0xff
 8020418:	401a      	ands	r2, r3
 802041a:	1dfb      	adds	r3, r7, #7
 802041c:	781b      	ldrb	r3, [r3, #0]
 802041e:	0018      	movs	r0, r3
 8020420:	2303      	movs	r3, #3
 8020422:	4003      	ands	r3, r0
 8020424:	00db      	lsls	r3, r3, #3
 8020426:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020428:	481f      	ldr	r0, [pc, #124]	; (80204a8 <__NVIC_SetPriority+0xd4>)
 802042a:	1dfb      	adds	r3, r7, #7
 802042c:	781b      	ldrb	r3, [r3, #0]
 802042e:	b25b      	sxtb	r3, r3
 8020430:	089b      	lsrs	r3, r3, #2
 8020432:	430a      	orrs	r2, r1
 8020434:	33c0      	adds	r3, #192	; 0xc0
 8020436:	009b      	lsls	r3, r3, #2
 8020438:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 802043a:	e031      	b.n	80204a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802043c:	4a1b      	ldr	r2, [pc, #108]	; (80204ac <__NVIC_SetPriority+0xd8>)
 802043e:	1dfb      	adds	r3, r7, #7
 8020440:	781b      	ldrb	r3, [r3, #0]
 8020442:	0019      	movs	r1, r3
 8020444:	230f      	movs	r3, #15
 8020446:	400b      	ands	r3, r1
 8020448:	3b08      	subs	r3, #8
 802044a:	089b      	lsrs	r3, r3, #2
 802044c:	3306      	adds	r3, #6
 802044e:	009b      	lsls	r3, r3, #2
 8020450:	18d3      	adds	r3, r2, r3
 8020452:	3304      	adds	r3, #4
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	1dfa      	adds	r2, r7, #7
 8020458:	7812      	ldrb	r2, [r2, #0]
 802045a:	0011      	movs	r1, r2
 802045c:	2203      	movs	r2, #3
 802045e:	400a      	ands	r2, r1
 8020460:	00d2      	lsls	r2, r2, #3
 8020462:	21ff      	movs	r1, #255	; 0xff
 8020464:	4091      	lsls	r1, r2
 8020466:	000a      	movs	r2, r1
 8020468:	43d2      	mvns	r2, r2
 802046a:	401a      	ands	r2, r3
 802046c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 802046e:	683b      	ldr	r3, [r7, #0]
 8020470:	019b      	lsls	r3, r3, #6
 8020472:	22ff      	movs	r2, #255	; 0xff
 8020474:	401a      	ands	r2, r3
 8020476:	1dfb      	adds	r3, r7, #7
 8020478:	781b      	ldrb	r3, [r3, #0]
 802047a:	0018      	movs	r0, r3
 802047c:	2303      	movs	r3, #3
 802047e:	4003      	ands	r3, r0
 8020480:	00db      	lsls	r3, r3, #3
 8020482:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020484:	4809      	ldr	r0, [pc, #36]	; (80204ac <__NVIC_SetPriority+0xd8>)
 8020486:	1dfb      	adds	r3, r7, #7
 8020488:	781b      	ldrb	r3, [r3, #0]
 802048a:	001c      	movs	r4, r3
 802048c:	230f      	movs	r3, #15
 802048e:	4023      	ands	r3, r4
 8020490:	3b08      	subs	r3, #8
 8020492:	089b      	lsrs	r3, r3, #2
 8020494:	430a      	orrs	r2, r1
 8020496:	3306      	adds	r3, #6
 8020498:	009b      	lsls	r3, r3, #2
 802049a:	18c3      	adds	r3, r0, r3
 802049c:	3304      	adds	r3, #4
 802049e:	601a      	str	r2, [r3, #0]
}
 80204a0:	46c0      	nop			; (mov r8, r8)
 80204a2:	46bd      	mov	sp, r7
 80204a4:	b003      	add	sp, #12
 80204a6:	bd90      	pop	{r4, r7, pc}
 80204a8:	e000e100 	.word	0xe000e100
 80204ac:	e000ed00 	.word	0xe000ed00

080204b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80204b0:	b580      	push	{r7, lr}
 80204b2:	b082      	sub	sp, #8
 80204b4:	af00      	add	r7, sp, #0
 80204b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	1e5a      	subs	r2, r3, #1
 80204bc:	2380      	movs	r3, #128	; 0x80
 80204be:	045b      	lsls	r3, r3, #17
 80204c0:	429a      	cmp	r2, r3
 80204c2:	d301      	bcc.n	80204c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80204c4:	2301      	movs	r3, #1
 80204c6:	e010      	b.n	80204ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80204c8:	4b0a      	ldr	r3, [pc, #40]	; (80204f4 <SysTick_Config+0x44>)
 80204ca:	687a      	ldr	r2, [r7, #4]
 80204cc:	3a01      	subs	r2, #1
 80204ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80204d0:	2301      	movs	r3, #1
 80204d2:	425b      	negs	r3, r3
 80204d4:	2103      	movs	r1, #3
 80204d6:	0018      	movs	r0, r3
 80204d8:	f7ff ff7c 	bl	80203d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80204dc:	4b05      	ldr	r3, [pc, #20]	; (80204f4 <SysTick_Config+0x44>)
 80204de:	2200      	movs	r2, #0
 80204e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80204e2:	4b04      	ldr	r3, [pc, #16]	; (80204f4 <SysTick_Config+0x44>)
 80204e4:	2207      	movs	r2, #7
 80204e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80204e8:	2300      	movs	r3, #0
}
 80204ea:	0018      	movs	r0, r3
 80204ec:	46bd      	mov	sp, r7
 80204ee:	b002      	add	sp, #8
 80204f0:	bd80      	pop	{r7, pc}
 80204f2:	46c0      	nop			; (mov r8, r8)
 80204f4:	e000e010 	.word	0xe000e010

080204f8 <HAL_NVIC_SetPriority>:
  *         with stm32wlxx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80204f8:	b580      	push	{r7, lr}
 80204fa:	b084      	sub	sp, #16
 80204fc:	af00      	add	r7, sp, #0
 80204fe:	60b9      	str	r1, [r7, #8]
 8020500:	607a      	str	r2, [r7, #4]
 8020502:	210f      	movs	r1, #15
 8020504:	187b      	adds	r3, r7, r1
 8020506:	1c02      	adds	r2, r0, #0
 8020508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 802050a:	68ba      	ldr	r2, [r7, #8]
 802050c:	187b      	adds	r3, r7, r1
 802050e:	781b      	ldrb	r3, [r3, #0]
 8020510:	b25b      	sxtb	r3, r3
 8020512:	0011      	movs	r1, r2
 8020514:	0018      	movs	r0, r3
 8020516:	f7ff ff5d 	bl	80203d4 <__NVIC_SetPriority>
}
 802051a:	46c0      	nop			; (mov r8, r8)
 802051c:	46bd      	mov	sp, r7
 802051e:	b004      	add	sp, #16
 8020520:	bd80      	pop	{r7, pc}

08020522 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020522:	b580      	push	{r7, lr}
 8020524:	b082      	sub	sp, #8
 8020526:	af00      	add	r7, sp, #0
 8020528:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	0018      	movs	r0, r3
 802052e:	f7ff ffbf 	bl	80204b0 <SysTick_Config>
 8020532:	0003      	movs	r3, r0
}
 8020534:	0018      	movs	r0, r3
 8020536:	46bd      	mov	sp, r7
 8020538:	b002      	add	sp, #8
 802053a:	bd80      	pop	{r7, pc}

0802053c <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 802053c:	b580      	push	{r7, lr}
 802053e:	b086      	sub	sp, #24
 8020540:	af00      	add	r7, sp, #0
 8020542:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8020544:	2300      	movs	r3, #0
 8020546:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM0PLUS)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
 8020548:	4b23      	ldr	r3, [pc, #140]	; (80205d8 <HAL_IPCC_TX_IRQHandler+0x9c>)
 802054a:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 802054c:	68fb      	ldr	r3, [r7, #12]
 802054e:	685b      	ldr	r3, [r3, #4]
 8020550:	43da      	mvns	r2, r3
 8020552:	23fc      	movs	r3, #252	; 0xfc
 8020554:	039b      	lsls	r3, r3, #14
 8020556:	4013      	ands	r3, r2
 8020558:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 802055a:	68fb      	ldr	r3, [r7, #12]
 802055c:	68db      	ldr	r3, [r3, #12]
 802055e:	041b      	lsls	r3, r3, #16
 8020560:	43da      	mvns	r2, r3
 8020562:	697b      	ldr	r3, [r7, #20]
 8020564:	4013      	ands	r3, r2
 8020566:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8020568:	e02d      	b.n	80205c6 <HAL_IPCC_TX_IRQHandler+0x8a>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 802056a:	693b      	ldr	r3, [r7, #16]
 802056c:	220f      	movs	r2, #15
 802056e:	4013      	ands	r3, r2
 8020570:	3310      	adds	r3, #16
 8020572:	2201      	movs	r2, #1
 8020574:	409a      	lsls	r2, r3
 8020576:	0013      	movs	r3, r2
 8020578:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 802057a:	697b      	ldr	r3, [r7, #20]
 802057c:	68ba      	ldr	r2, [r7, #8]
 802057e:	4013      	ands	r3, r2
 8020580:	d01e      	beq.n	80205c0 <HAL_IPCC_TX_IRQHandler+0x84>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	685a      	ldr	r2, [r3, #4]
 8020586:	68bb      	ldr	r3, [r7, #8]
 8020588:	431a      	orrs	r2, r3
 802058a:	68fb      	ldr	r3, [r7, #12]
 802058c:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 802058e:	687a      	ldr	r2, [r7, #4]
 8020590:	693b      	ldr	r3, [r7, #16]
 8020592:	3306      	adds	r3, #6
 8020594:	009b      	lsls	r3, r3, #2
 8020596:	18d3      	adds	r3, r2, r3
 8020598:	3304      	adds	r3, #4
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	2b00      	cmp	r3, #0
 802059e:	d00a      	beq.n	80205b6 <HAL_IPCC_TX_IRQHandler+0x7a>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 80205a0:	687a      	ldr	r2, [r7, #4]
 80205a2:	693b      	ldr	r3, [r7, #16]
 80205a4:	3306      	adds	r3, #6
 80205a6:	009b      	lsls	r3, r3, #2
 80205a8:	18d3      	adds	r3, r2, r3
 80205aa:	3304      	adds	r3, #4
 80205ac:	681b      	ldr	r3, [r3, #0]
 80205ae:	6939      	ldr	r1, [r7, #16]
 80205b0:	6878      	ldr	r0, [r7, #4]
 80205b2:	2200      	movs	r2, #0
 80205b4:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 80205b6:	68bb      	ldr	r3, [r7, #8]
 80205b8:	43da      	mvns	r2, r3
 80205ba:	697b      	ldr	r3, [r7, #20]
 80205bc:	4013      	ands	r3, r2
 80205be:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 80205c0:	693b      	ldr	r3, [r7, #16]
 80205c2:	3301      	adds	r3, #1
 80205c4:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80205c6:	697b      	ldr	r3, [r7, #20]
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d1ce      	bne.n	802056a <HAL_IPCC_TX_IRQHandler+0x2e>
  }
}
 80205cc:	46c0      	nop			; (mov r8, r8)
 80205ce:	46c0      	nop			; (mov r8, r8)
 80205d0:	46bd      	mov	sp, r7
 80205d2:	b006      	add	sp, #24
 80205d4:	bd80      	pop	{r7, pc}
 80205d6:	46c0      	nop			; (mov r8, r8)
 80205d8:	58000c10 	.word	0x58000c10

080205dc <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 80205dc:	b580      	push	{r7, lr}
 80205de:	b088      	sub	sp, #32
 80205e0:	af00      	add	r7, sp, #0
 80205e2:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 80205e4:	2300      	movs	r3, #0
 80205e6:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM0PLUS)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
 80205e8:	4b21      	ldr	r3, [pc, #132]	; (8020670 <HAL_IPCC_RX_IRQHandler+0x94>)
 80205ea:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
 80205ec:	4b21      	ldr	r3, [pc, #132]	; (8020674 <HAL_IPCC_RX_IRQHandler+0x98>)
 80205ee:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 80205f0:	697b      	ldr	r3, [r7, #20]
 80205f2:	685b      	ldr	r3, [r3, #4]
 80205f4:	43db      	mvns	r3, r3
 80205f6:	223f      	movs	r2, #63	; 0x3f
 80205f8:	4013      	ands	r3, r2
 80205fa:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 80205fc:	693b      	ldr	r3, [r7, #16]
 80205fe:	68da      	ldr	r2, [r3, #12]
 8020600:	69fb      	ldr	r3, [r7, #28]
 8020602:	4013      	ands	r3, r2
 8020604:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8020606:	e02a      	b.n	802065e <HAL_IPCC_RX_IRQHandler+0x82>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8020608:	69bb      	ldr	r3, [r7, #24]
 802060a:	220f      	movs	r2, #15
 802060c:	4013      	ands	r3, r2
 802060e:	2201      	movs	r2, #1
 8020610:	409a      	lsls	r2, r3
 8020612:	0013      	movs	r3, r2
 8020614:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8020616:	69fb      	ldr	r3, [r7, #28]
 8020618:	68fa      	ldr	r2, [r7, #12]
 802061a:	4013      	ands	r3, r2
 802061c:	d01c      	beq.n	8020658 <HAL_IPCC_RX_IRQHandler+0x7c>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 802061e:	697b      	ldr	r3, [r7, #20]
 8020620:	685a      	ldr	r2, [r3, #4]
 8020622:	68fb      	ldr	r3, [r7, #12]
 8020624:	431a      	orrs	r2, r3
 8020626:	697b      	ldr	r3, [r7, #20]
 8020628:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 802062a:	687a      	ldr	r2, [r7, #4]
 802062c:	69bb      	ldr	r3, [r7, #24]
 802062e:	009b      	lsls	r3, r3, #2
 8020630:	18d3      	adds	r3, r2, r3
 8020632:	3304      	adds	r3, #4
 8020634:	681b      	ldr	r3, [r3, #0]
 8020636:	2b00      	cmp	r3, #0
 8020638:	d009      	beq.n	802064e <HAL_IPCC_RX_IRQHandler+0x72>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 802063a:	687a      	ldr	r2, [r7, #4]
 802063c:	69bb      	ldr	r3, [r7, #24]
 802063e:	009b      	lsls	r3, r3, #2
 8020640:	18d3      	adds	r3, r2, r3
 8020642:	3304      	adds	r3, #4
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	69b9      	ldr	r1, [r7, #24]
 8020648:	6878      	ldr	r0, [r7, #4]
 802064a:	2201      	movs	r2, #1
 802064c:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	43da      	mvns	r2, r3
 8020652:	69fb      	ldr	r3, [r7, #28]
 8020654:	4013      	ands	r3, r2
 8020656:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8020658:	69bb      	ldr	r3, [r7, #24]
 802065a:	3301      	adds	r3, #1
 802065c:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 802065e:	69fb      	ldr	r3, [r7, #28]
 8020660:	2b00      	cmp	r3, #0
 8020662:	d1d1      	bne.n	8020608 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8020664:	46c0      	nop			; (mov r8, r8)
 8020666:	46c0      	nop			; (mov r8, r8)
 8020668:	46bd      	mov	sp, r7
 802066a:	b008      	add	sp, #32
 802066c:	bd80      	pop	{r7, pc}
 802066e:	46c0      	nop			; (mov r8, r8)
 8020670:	58000c10 	.word	0x58000c10
 8020674:	58000c00 	.word	0x58000c00

08020678 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8020678:	b580      	push	{r7, lr}
 802067a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 802067c:	23b0      	movs	r3, #176	; 0xb0
 802067e:	05db      	lsls	r3, r3, #23
 8020680:	681a      	ldr	r2, [r3, #0]
 8020682:	2380      	movs	r3, #128	; 0x80
 8020684:	035b      	lsls	r3, r3, #13
 8020686:	401a      	ands	r2, r3
 8020688:	2380      	movs	r3, #128	; 0x80
 802068a:	035b      	lsls	r3, r3, #13
 802068c:	429a      	cmp	r2, r3
 802068e:	d101      	bne.n	8020694 <LL_RCC_HSE_IsEnabledDiv2+0x1c>
 8020690:	2301      	movs	r3, #1
 8020692:	e000      	b.n	8020696 <LL_RCC_HSE_IsEnabledDiv2+0x1e>
 8020694:	2300      	movs	r3, #0
}
 8020696:	0018      	movs	r0, r3
 8020698:	46bd      	mov	sp, r7
 802069a:	bd80      	pop	{r7, pc}

0802069c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 802069c:	b580      	push	{r7, lr}
 802069e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80206a0:	23b0      	movs	r3, #176	; 0xb0
 80206a2:	05db      	lsls	r3, r3, #23
 80206a4:	681b      	ldr	r3, [r3, #0]
 80206a6:	2208      	movs	r2, #8
 80206a8:	4013      	ands	r3, r2
 80206aa:	2b08      	cmp	r3, #8
 80206ac:	d101      	bne.n	80206b2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80206ae:	2301      	movs	r3, #1
 80206b0:	e000      	b.n	80206b4 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80206b2:	2300      	movs	r3, #0
}
 80206b4:	0018      	movs	r0, r3
 80206b6:	46bd      	mov	sp, r7
 80206b8:	bd80      	pop	{r7, pc}

080206ba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80206ba:	b580      	push	{r7, lr}
 80206bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80206be:	23b0      	movs	r3, #176	; 0xb0
 80206c0:	05db      	lsls	r3, r3, #23
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	22f0      	movs	r2, #240	; 0xf0
 80206c6:	4013      	ands	r3, r2
}
 80206c8:	0018      	movs	r0, r3
 80206ca:	46bd      	mov	sp, r7
 80206cc:	bd80      	pop	{r7, pc}

080206ce <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80206ce:	b580      	push	{r7, lr}
 80206d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80206d2:	23b0      	movs	r3, #176	; 0xb0
 80206d4:	05db      	lsls	r3, r3, #23
 80206d6:	2294      	movs	r2, #148	; 0x94
 80206d8:	589a      	ldr	r2, [r3, r2]
 80206da:	23f0      	movs	r3, #240	; 0xf0
 80206dc:	011b      	lsls	r3, r3, #4
 80206de:	4013      	ands	r3, r2
}
 80206e0:	0018      	movs	r0, r3
 80206e2:	46bd      	mov	sp, r7
 80206e4:	bd80      	pop	{r7, pc}

080206e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80206e6:	b580      	push	{r7, lr}
 80206e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80206ea:	23b0      	movs	r3, #176	; 0xb0
 80206ec:	05db      	lsls	r3, r3, #23
 80206ee:	689b      	ldr	r3, [r3, #8]
 80206f0:	220c      	movs	r2, #12
 80206f2:	4013      	ands	r3, r2
}
 80206f4:	0018      	movs	r0, r3
 80206f6:	46bd      	mov	sp, r7
 80206f8:	bd80      	pop	{r7, pc}

080206fa <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80206fa:	b580      	push	{r7, lr}
 80206fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80206fe:	23b0      	movs	r3, #176	; 0xb0
 8020700:	05da      	lsls	r2, r3, #23
 8020702:	2384      	movs	r3, #132	; 0x84
 8020704:	005b      	lsls	r3, r3, #1
 8020706:	58d3      	ldr	r3, [r2, r3]
 8020708:	22f0      	movs	r2, #240	; 0xf0
 802070a:	4013      	ands	r3, r2
}
 802070c:	0018      	movs	r0, r3
 802070e:	46bd      	mov	sp, r7
 8020710:	bd80      	pop	{r7, pc}

08020712 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8020712:	b580      	push	{r7, lr}
 8020714:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8020716:	23b0      	movs	r3, #176	; 0xb0
 8020718:	05db      	lsls	r3, r3, #23
 802071a:	68db      	ldr	r3, [r3, #12]
 802071c:	0a1b      	lsrs	r3, r3, #8
 802071e:	227f      	movs	r2, #127	; 0x7f
 8020720:	4013      	ands	r3, r2
}
 8020722:	0018      	movs	r0, r3
 8020724:	46bd      	mov	sp, r7
 8020726:	bd80      	pop	{r7, pc}

08020728 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8020728:	b580      	push	{r7, lr}
 802072a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 802072c:	23b0      	movs	r3, #176	; 0xb0
 802072e:	05db      	lsls	r3, r3, #23
 8020730:	68db      	ldr	r3, [r3, #12]
 8020732:	0f5b      	lsrs	r3, r3, #29
 8020734:	075b      	lsls	r3, r3, #29
}
 8020736:	0018      	movs	r0, r3
 8020738:	46bd      	mov	sp, r7
 802073a:	bd80      	pop	{r7, pc}

0802073c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 802073c:	b580      	push	{r7, lr}
 802073e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8020740:	23b0      	movs	r3, #176	; 0xb0
 8020742:	05db      	lsls	r3, r3, #23
 8020744:	68db      	ldr	r3, [r3, #12]
 8020746:	2270      	movs	r2, #112	; 0x70
 8020748:	4013      	ands	r3, r2
}
 802074a:	0018      	movs	r0, r3
 802074c:	46bd      	mov	sp, r7
 802074e:	bd80      	pop	{r7, pc}

08020750 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8020750:	b580      	push	{r7, lr}
 8020752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8020754:	23b0      	movs	r3, #176	; 0xb0
 8020756:	05db      	lsls	r3, r3, #23
 8020758:	68db      	ldr	r3, [r3, #12]
 802075a:	2203      	movs	r2, #3
 802075c:	4013      	ands	r3, r2
}
 802075e:	0018      	movs	r0, r3
 8020760:	46bd      	mov	sp, r7
 8020762:	bd80      	pop	{r7, pc}

08020764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8020764:	b590      	push	{r4, r7, lr}
 8020766:	b087      	sub	sp, #28
 8020768:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 802076a:	2300      	movs	r3, #0
 802076c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 802076e:	2300      	movs	r3, #0
 8020770:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8020772:	f7ff ffb8 	bl	80206e6 <LL_RCC_GetSysClkSource>
 8020776:	0003      	movs	r3, r0
 8020778:	60bb      	str	r3, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 802077a:	f7ff ffe9 	bl	8020750 <LL_RCC_PLL_GetMainSource>
 802077e:	0003      	movs	r3, r0
 8020780:	607b      	str	r3, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8020782:	68bb      	ldr	r3, [r7, #8]
 8020784:	2b00      	cmp	r3, #0
 8020786:	d005      	beq.n	8020794 <HAL_RCC_GetSysClockFreq+0x30>
 8020788:	68bb      	ldr	r3, [r7, #8]
 802078a:	2b0c      	cmp	r3, #12
 802078c:	d138      	bne.n	8020800 <HAL_RCC_GetSysClockFreq+0x9c>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	2b01      	cmp	r3, #1
 8020792:	d135      	bne.n	8020800 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8020794:	f7ff ff82 	bl	802069c <LL_RCC_MSI_IsEnabledRangeSelect>
 8020798:	1e03      	subs	r3, r0, #0
 802079a:	d115      	bne.n	80207c8 <HAL_RCC_GetSysClockFreq+0x64>
 802079c:	f7ff ff7e 	bl	802069c <LL_RCC_MSI_IsEnabledRangeSelect>
 80207a0:	0003      	movs	r3, r0
 80207a2:	2b01      	cmp	r3, #1
 80207a4:	d106      	bne.n	80207b4 <HAL_RCC_GetSysClockFreq+0x50>
 80207a6:	f7ff ff88 	bl	80206ba <LL_RCC_MSI_GetRange>
 80207aa:	0003      	movs	r3, r0
 80207ac:	0a1b      	lsrs	r3, r3, #8
 80207ae:	220f      	movs	r2, #15
 80207b0:	4013      	ands	r3, r2
 80207b2:	e005      	b.n	80207c0 <HAL_RCC_GetSysClockFreq+0x5c>
 80207b4:	f7ff ff8b 	bl	80206ce <LL_RCC_MSI_GetRangeAfterStandby>
 80207b8:	0003      	movs	r3, r0
 80207ba:	0a1b      	lsrs	r3, r3, #8
 80207bc:	220f      	movs	r2, #15
 80207be:	4013      	ands	r3, r2
 80207c0:	4a3a      	ldr	r2, [pc, #232]	; (80208ac <HAL_RCC_GetSysClockFreq+0x148>)
 80207c2:	009b      	lsls	r3, r3, #2
 80207c4:	589b      	ldr	r3, [r3, r2]
 80207c6:	e014      	b.n	80207f2 <HAL_RCC_GetSysClockFreq+0x8e>
 80207c8:	f7ff ff68 	bl	802069c <LL_RCC_MSI_IsEnabledRangeSelect>
 80207cc:	0003      	movs	r3, r0
 80207ce:	2b01      	cmp	r3, #1
 80207d0:	d106      	bne.n	80207e0 <HAL_RCC_GetSysClockFreq+0x7c>
 80207d2:	f7ff ff72 	bl	80206ba <LL_RCC_MSI_GetRange>
 80207d6:	0003      	movs	r3, r0
 80207d8:	091b      	lsrs	r3, r3, #4
 80207da:	220f      	movs	r2, #15
 80207dc:	4013      	ands	r3, r2
 80207de:	e005      	b.n	80207ec <HAL_RCC_GetSysClockFreq+0x88>
 80207e0:	f7ff ff75 	bl	80206ce <LL_RCC_MSI_GetRangeAfterStandby>
 80207e4:	0003      	movs	r3, r0
 80207e6:	091b      	lsrs	r3, r3, #4
 80207e8:	220f      	movs	r2, #15
 80207ea:	4013      	ands	r3, r2
 80207ec:	4a2f      	ldr	r2, [pc, #188]	; (80208ac <HAL_RCC_GetSysClockFreq+0x148>)
 80207ee:	009b      	lsls	r3, r3, #2
 80207f0:	589b      	ldr	r3, [r3, r2]
 80207f2:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80207f4:	68bb      	ldr	r3, [r7, #8]
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d115      	bne.n	8020826 <HAL_RCC_GetSysClockFreq+0xc2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80207fa:	693b      	ldr	r3, [r7, #16]
 80207fc:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80207fe:	e012      	b.n	8020826 <HAL_RCC_GetSysClockFreq+0xc2>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8020800:	68bb      	ldr	r3, [r7, #8]
 8020802:	2b04      	cmp	r3, #4
 8020804:	d102      	bne.n	802080c <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8020806:	4b2a      	ldr	r3, [pc, #168]	; (80208b0 <HAL_RCC_GetSysClockFreq+0x14c>)
 8020808:	617b      	str	r3, [r7, #20]
 802080a:	e00c      	b.n	8020826 <HAL_RCC_GetSysClockFreq+0xc2>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 802080c:	68bb      	ldr	r3, [r7, #8]
 802080e:	2b08      	cmp	r3, #8
 8020810:	d109      	bne.n	8020826 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8020812:	f7ff ff31 	bl	8020678 <LL_RCC_HSE_IsEnabledDiv2>
 8020816:	0003      	movs	r3, r0
 8020818:	2b01      	cmp	r3, #1
 802081a:	d102      	bne.n	8020822 <HAL_RCC_GetSysClockFreq+0xbe>
    {
      sysclockfreq = HSE_VALUE / 2U;
 802081c:	4b24      	ldr	r3, [pc, #144]	; (80208b0 <HAL_RCC_GetSysClockFreq+0x14c>)
 802081e:	617b      	str	r3, [r7, #20]
 8020820:	e001      	b.n	8020826 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8020822:	4b24      	ldr	r3, [pc, #144]	; (80208b4 <HAL_RCC_GetSysClockFreq+0x150>)
 8020824:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8020826:	f7ff ff5e 	bl	80206e6 <LL_RCC_GetSysClkSource>
 802082a:	0003      	movs	r3, r0
 802082c:	2b0c      	cmp	r3, #12
 802082e:	d137      	bne.n	80208a0 <HAL_RCC_GetSysClockFreq+0x13c>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8020830:	f7ff ff8e 	bl	8020750 <LL_RCC_PLL_GetMainSource>
 8020834:	0003      	movs	r3, r0
 8020836:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	2b02      	cmp	r3, #2
 802083c:	d003      	beq.n	8020846 <HAL_RCC_GetSysClockFreq+0xe2>
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	2b03      	cmp	r3, #3
 8020842:	d003      	beq.n	802084c <HAL_RCC_GetSysClockFreq+0xe8>
 8020844:	e00d      	b.n	8020862 <HAL_RCC_GetSysClockFreq+0xfe>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8020846:	4b1a      	ldr	r3, [pc, #104]	; (80208b0 <HAL_RCC_GetSysClockFreq+0x14c>)
 8020848:	60fb      	str	r3, [r7, #12]
        break;
 802084a:	e00d      	b.n	8020868 <HAL_RCC_GetSysClockFreq+0x104>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 802084c:	f7ff ff14 	bl	8020678 <LL_RCC_HSE_IsEnabledDiv2>
 8020850:	0003      	movs	r3, r0
 8020852:	2b01      	cmp	r3, #1
 8020854:	d102      	bne.n	802085c <HAL_RCC_GetSysClockFreq+0xf8>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8020856:	4b16      	ldr	r3, [pc, #88]	; (80208b0 <HAL_RCC_GetSysClockFreq+0x14c>)
 8020858:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 802085a:	e005      	b.n	8020868 <HAL_RCC_GetSysClockFreq+0x104>
          pllinputfreq = HSE_VALUE;
 802085c:	4b15      	ldr	r3, [pc, #84]	; (80208b4 <HAL_RCC_GetSysClockFreq+0x150>)
 802085e:	60fb      	str	r3, [r7, #12]
        break;
 8020860:	e002      	b.n	8020868 <HAL_RCC_GetSysClockFreq+0x104>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8020862:	693b      	ldr	r3, [r7, #16]
 8020864:	60fb      	str	r3, [r7, #12]
        break;
 8020866:	46c0      	nop			; (mov r8, r8)
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8020868:	f7ff ff53 	bl	8020712 <LL_RCC_PLL_GetN>
 802086c:	0002      	movs	r2, r0
 802086e:	68fb      	ldr	r3, [r7, #12]
 8020870:	4353      	muls	r3, r2
 8020872:	001c      	movs	r4, r3
 8020874:	f7ff ff62 	bl	802073c <LL_RCC_PLL_GetDivider>
 8020878:	0003      	movs	r3, r0
 802087a:	091b      	lsrs	r3, r3, #4
 802087c:	3301      	adds	r3, #1
 802087e:	0019      	movs	r1, r3
 8020880:	0020      	movs	r0, r4
 8020882:	f7ff fc41 	bl	8020108 <__udivsi3>
 8020886:	0003      	movs	r3, r0
 8020888:	001c      	movs	r4, r3
 802088a:	f7ff ff4d 	bl	8020728 <LL_RCC_PLL_GetR>
 802088e:	0003      	movs	r3, r0
 8020890:	0f5b      	lsrs	r3, r3, #29
 8020892:	3301      	adds	r3, #1
 8020894:	0019      	movs	r1, r3
 8020896:	0020      	movs	r0, r4
 8020898:	f7ff fc36 	bl	8020108 <__udivsi3>
 802089c:	0003      	movs	r3, r0
 802089e:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80208a0:	697b      	ldr	r3, [r7, #20]
}
 80208a2:	0018      	movs	r0, r3
 80208a4:	46bd      	mov	sp, r7
 80208a6:	b007      	add	sp, #28
 80208a8:	bd90      	pop	{r4, r7, pc}
 80208aa:	46c0      	nop			; (mov r8, r8)
 80208ac:	08020c38 	.word	0x08020c38
 80208b0:	00f42400 	.word	0x00f42400
 80208b4:	01e84800 	.word	0x01e84800

080208b8 <HAL_RCC_GetHCLK2Freq>:
/**
  * @brief  Return the HCLK2 frequency.
  * @retval HCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
 80208b8:	b5b0      	push	{r4, r5, r7, lr}
 80208ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK2 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK2_FREQ(HAL_RCC_GetSysClockFreq(), LL_C2_RCC_GetAHBPrescaler())));
 80208bc:	f7ff ff52 	bl	8020764 <HAL_RCC_GetSysClockFreq>
 80208c0:	0004      	movs	r4, r0
 80208c2:	f7ff ff1a 	bl	80206fa <LL_C2_RCC_GetAHBPrescaler>
 80208c6:	0003      	movs	r3, r0
 80208c8:	091b      	lsrs	r3, r3, #4
 80208ca:	220f      	movs	r2, #15
 80208cc:	401a      	ands	r2, r3
 80208ce:	4b05      	ldr	r3, [pc, #20]	; (80208e4 <HAL_RCC_GetHCLK2Freq+0x2c>)
 80208d0:	0092      	lsls	r2, r2, #2
 80208d2:	58d3      	ldr	r3, [r2, r3]
 80208d4:	0019      	movs	r1, r3
 80208d6:	0020      	movs	r0, r4
 80208d8:	f7ff fc16 	bl	8020108 <__udivsi3>
 80208dc:	0003      	movs	r3, r0
}
 80208de:	0018      	movs	r0, r3
 80208e0:	46bd      	mov	sp, r7
 80208e2:	bdb0      	pop	{r4, r5, r7, pc}
 80208e4:	08020bf8 	.word	0x08020bf8

080208e8 <MX_LoRaWAN_Process>:

  /* USER CODE END MX_LoRaWAN_Init_2 */
}

void MX_LoRaWAN_Process(void)
{
 80208e8:	b580      	push	{r7, lr}
 80208ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80208ec:	2301      	movs	r3, #1
 80208ee:	425b      	negs	r3, r3
 80208f0:	0018      	movs	r0, r3
 80208f2:	f000 f803 	bl	80208fc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80208f6:	46c0      	nop			; (mov r8, r8)
 80208f8:	46bd      	mov	sp, r7
 80208fa:	bd80      	pop	{r7, pc}

080208fc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80208fc:	b580      	push	{r7, lr}
 80208fe:	b090      	sub	sp, #64	; 0x40
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8020904:	4b72      	ldr	r3, [pc, #456]	; (8020ad0 <UTIL_SEQ_Run+0x1d4>)
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 802090a:	4b71      	ldr	r3, [pc, #452]	; (8020ad0 <UTIL_SEQ_Run+0x1d4>)
 802090c:	681b      	ldr	r3, [r3, #0]
 802090e:	687a      	ldr	r2, [r7, #4]
 8020910:	401a      	ands	r2, r3
 8020912:	4b6f      	ldr	r3, [pc, #444]	; (8020ad0 <UTIL_SEQ_Run+0x1d4>)
 8020914:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8020916:	4b6f      	ldr	r3, [pc, #444]	; (8020ad4 <UTIL_SEQ_Run+0x1d8>)
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 802091c:	4b6e      	ldr	r3, [pc, #440]	; (8020ad8 <UTIL_SEQ_Run+0x1dc>)
 802091e:	681b      	ldr	r3, [r3, #0]
 8020920:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8020922:	4b6e      	ldr	r3, [pc, #440]	; (8020adc <UTIL_SEQ_Run+0x1e0>)
 8020924:	681b      	ldr	r3, [r3, #0]
 8020926:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8020928:	4b6d      	ldr	r3, [pc, #436]	; (8020ae0 <UTIL_SEQ_Run+0x1e4>)
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 802092e:	e090      	b.n	8020a52 <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
 8020930:	2300      	movs	r3, #0
 8020932:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8020934:	e002      	b.n	802093c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8020936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020938:	3301      	adds	r3, #1
 802093a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 802093c:	4b69      	ldr	r3, [pc, #420]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 802093e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020940:	00d2      	lsls	r2, r2, #3
 8020942:	58d3      	ldr	r3, [r2, r3]
 8020944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020946:	401a      	ands	r2, r3
 8020948:	4b61      	ldr	r3, [pc, #388]	; (8020ad0 <UTIL_SEQ_Run+0x1d4>)
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	4013      	ands	r3, r2
 802094e:	d0f2      	beq.n	8020936 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8020950:	4b64      	ldr	r3, [pc, #400]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 8020952:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020954:	00d2      	lsls	r2, r2, #3
 8020956:	58d3      	ldr	r3, [r2, r3]
 8020958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802095a:	401a      	ands	r2, r3
 802095c:	4b5c      	ldr	r3, [pc, #368]	; (8020ad0 <UTIL_SEQ_Run+0x1d4>)
 802095e:	681b      	ldr	r3, [r3, #0]
 8020960:	4013      	ands	r3, r2
 8020962:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8020964:	4a5f      	ldr	r2, [pc, #380]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 8020966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020968:	00db      	lsls	r3, r3, #3
 802096a:	18d3      	adds	r3, r2, r3
 802096c:	3304      	adds	r3, #4
 802096e:	681b      	ldr	r3, [r3, #0]
 8020970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020972:	4013      	ands	r3, r2
 8020974:	d107      	bne.n	8020986 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8020976:	4a5b      	ldr	r2, [pc, #364]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 8020978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802097a:	00db      	lsls	r3, r3, #3
 802097c:	18d3      	adds	r3, r2, r3
 802097e:	3304      	adds	r3, #4
 8020980:	2201      	movs	r2, #1
 8020982:	4252      	negs	r2, r2
 8020984:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8020986:	4a57      	ldr	r2, [pc, #348]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 8020988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802098a:	00db      	lsls	r3, r3, #3
 802098c:	18d3      	adds	r3, r2, r3
 802098e:	3304      	adds	r3, #4
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020994:	4013      	ands	r3, r2
 8020996:	0018      	movs	r0, r3
 8020998:	f000 f8ba 	bl	8020b10 <SEQ_BitPosition>
 802099c:	0003      	movs	r3, r0
 802099e:	001a      	movs	r2, r3
 80209a0:	4b51      	ldr	r3, [pc, #324]	; (8020ae8 <UTIL_SEQ_Run+0x1ec>)
 80209a2:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80209a4:	4a4f      	ldr	r2, [pc, #316]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 80209a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80209a8:	00db      	lsls	r3, r3, #3
 80209aa:	18d3      	adds	r3, r2, r3
 80209ac:	3304      	adds	r3, #4
 80209ae:	681a      	ldr	r2, [r3, #0]
 80209b0:	4b4d      	ldr	r3, [pc, #308]	; (8020ae8 <UTIL_SEQ_Run+0x1ec>)
 80209b2:	681b      	ldr	r3, [r3, #0]
 80209b4:	2101      	movs	r1, #1
 80209b6:	4099      	lsls	r1, r3
 80209b8:	000b      	movs	r3, r1
 80209ba:	43db      	mvns	r3, r3
 80209bc:	401a      	ands	r2, r3
 80209be:	4949      	ldr	r1, [pc, #292]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 80209c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80209c2:	00db      	lsls	r3, r3, #3
 80209c4:	18cb      	adds	r3, r1, r3
 80209c6:	3304      	adds	r3, #4
 80209c8:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80209ca:	f3ef 8310 	mrs	r3, PRIMASK
 80209ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80209d0:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80209d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80209d4:	b672      	cpsid	i
}
 80209d6:	46c0      	nop			; (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80209d8:	4b43      	ldr	r3, [pc, #268]	; (8020ae8 <UTIL_SEQ_Run+0x1ec>)
 80209da:	681b      	ldr	r3, [r3, #0]
 80209dc:	2201      	movs	r2, #1
 80209de:	409a      	lsls	r2, r3
 80209e0:	0013      	movs	r3, r2
 80209e2:	43da      	mvns	r2, r3
 80209e4:	4b3b      	ldr	r3, [pc, #236]	; (8020ad4 <UTIL_SEQ_Run+0x1d8>)
 80209e6:	681b      	ldr	r3, [r3, #0]
 80209e8:	401a      	ands	r2, r3
 80209ea:	4b3a      	ldr	r3, [pc, #232]	; (8020ad4 <UTIL_SEQ_Run+0x1d8>)
 80209ec:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80209ee:	2301      	movs	r3, #1
 80209f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80209f2:	e013      	b.n	8020a1c <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80209f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80209f6:	1e5a      	subs	r2, r3, #1
 80209f8:	4b3a      	ldr	r3, [pc, #232]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 80209fa:	00d2      	lsls	r2, r2, #3
 80209fc:	58d1      	ldr	r1, [r2, r3]
 80209fe:	4b3a      	ldr	r3, [pc, #232]	; (8020ae8 <UTIL_SEQ_Run+0x1ec>)
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	2201      	movs	r2, #1
 8020a04:	409a      	lsls	r2, r3
 8020a06:	0013      	movs	r3, r2
 8020a08:	43db      	mvns	r3, r3
 8020a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020a0c:	3a01      	subs	r2, #1
 8020a0e:	4019      	ands	r1, r3
 8020a10:	4b34      	ldr	r3, [pc, #208]	; (8020ae4 <UTIL_SEQ_Run+0x1e8>)
 8020a12:	00d2      	lsls	r2, r2, #3
 8020a14:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8020a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020a18:	3b01      	subs	r3, #1
 8020a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	d1e8      	bne.n	80209f4 <UTIL_SEQ_Run+0xf8>
 8020a22:	6a3b      	ldr	r3, [r7, #32]
 8020a24:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020a26:	697b      	ldr	r3, [r7, #20]
 8020a28:	f383 8810 	msr	PRIMASK, r3
}
 8020a2c:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8020a2e:	4b2e      	ldr	r3, [pc, #184]	; (8020ae8 <UTIL_SEQ_Run+0x1ec>)
 8020a30:	681a      	ldr	r2, [r3, #0]
 8020a32:	4b2e      	ldr	r3, [pc, #184]	; (8020aec <UTIL_SEQ_Run+0x1f0>)
 8020a34:	0092      	lsls	r2, r2, #2
 8020a36:	58d3      	ldr	r3, [r2, r3]
 8020a38:	4798      	blx	r3

    local_taskset = TaskSet;
 8020a3a:	4b26      	ldr	r3, [pc, #152]	; (8020ad4 <UTIL_SEQ_Run+0x1d8>)
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8020a40:	4b25      	ldr	r3, [pc, #148]	; (8020ad8 <UTIL_SEQ_Run+0x1dc>)
 8020a42:	681b      	ldr	r3, [r3, #0]
 8020a44:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8020a46:	4b25      	ldr	r3, [pc, #148]	; (8020adc <UTIL_SEQ_Run+0x1e0>)
 8020a48:	681b      	ldr	r3, [r3, #0]
 8020a4a:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8020a4c:	4b24      	ldr	r3, [pc, #144]	; (8020ae0 <UTIL_SEQ_Run+0x1e4>)
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8020a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020a56:	401a      	ands	r2, r3
 8020a58:	4b1d      	ldr	r3, [pc, #116]	; (8020ad0 <UTIL_SEQ_Run+0x1d4>)
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	4013      	ands	r3, r2
 8020a5e:	d004      	beq.n	8020a6a <UTIL_SEQ_Run+0x16e>
 8020a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020a64:	4013      	ands	r3, r2
 8020a66:	d100      	bne.n	8020a6a <UTIL_SEQ_Run+0x16e>
 8020a68:	e762      	b.n	8020930 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8020a6a:	4b1f      	ldr	r3, [pc, #124]	; (8020ae8 <UTIL_SEQ_Run+0x1ec>)
 8020a6c:	2201      	movs	r2, #1
 8020a6e:	4252      	negs	r2, r2
 8020a70:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8020a72:	f000 f842 	bl	8020afa <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020a76:	f3ef 8310 	mrs	r3, PRIMASK
 8020a7a:	613b      	str	r3, [r7, #16]
  return(result);
 8020a7c:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8020a7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8020a80:	b672      	cpsid	i
}
 8020a82:	46c0      	nop			; (mov r8, r8)
  local_taskset = TaskSet;
 8020a84:	4b13      	ldr	r3, [pc, #76]	; (8020ad4 <UTIL_SEQ_Run+0x1d8>)
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8020a8a:	4b13      	ldr	r3, [pc, #76]	; (8020ad8 <UTIL_SEQ_Run+0x1dc>)
 8020a8c:	681b      	ldr	r3, [r3, #0]
 8020a8e:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8020a90:	4b12      	ldr	r3, [pc, #72]	; (8020adc <UTIL_SEQ_Run+0x1e0>)
 8020a92:	681b      	ldr	r3, [r3, #0]
 8020a94:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8020a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020a9a:	401a      	ands	r2, r3
 8020a9c:	4b0c      	ldr	r3, [pc, #48]	; (8020ad0 <UTIL_SEQ_Run+0x1d4>)
 8020a9e:	681b      	ldr	r3, [r3, #0]
 8020aa0:	4013      	ands	r3, r2
 8020aa2:	d106      	bne.n	8020ab2 <UTIL_SEQ_Run+0x1b6>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8020aa4:	4b0e      	ldr	r3, [pc, #56]	; (8020ae0 <UTIL_SEQ_Run+0x1e4>)
 8020aa6:	681b      	ldr	r3, [r3, #0]
 8020aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020aaa:	4013      	ands	r3, r2
 8020aac:	d101      	bne.n	8020ab2 <UTIL_SEQ_Run+0x1b6>
    {
      UTIL_SEQ_Idle( );
 8020aae:	f000 f81f 	bl	8020af0 <UTIL_SEQ_Idle>
 8020ab2:	69fb      	ldr	r3, [r7, #28]
 8020ab4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020ab6:	68fb      	ldr	r3, [r7, #12]
 8020ab8:	f383 8810 	msr	PRIMASK, r3
}
 8020abc:	46c0      	nop			; (mov r8, r8)
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8020abe:	f000 f821 	bl	8020b04 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8020ac2:	4b03      	ldr	r3, [pc, #12]	; (8020ad0 <UTIL_SEQ_Run+0x1d4>)
 8020ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020ac6:	601a      	str	r2, [r3, #0]

  return;
 8020ac8:	46c0      	nop			; (mov r8, r8)
}
 8020aca:	46bd      	mov	sp, r7
 8020acc:	b010      	add	sp, #64	; 0x40
 8020ace:	bd80      	pop	{r7, pc}
 8020ad0:	20008010 	.word	0x20008010
 8020ad4:	20008070 	.word	0x20008070
 8020ad8:	20008074 	.word	0x20008074
 8020adc:	2000800c 	.word	0x2000800c
 8020ae0:	20008078 	.word	0x20008078
 8020ae4:	2000809c 	.word	0x2000809c
 8020ae8:	2000807c 	.word	0x2000807c
 8020aec:	20008080 	.word	0x20008080

08020af0 <UTIL_SEQ_Idle>:
  UTIL_SEQ_Run(~TaskId_bm);
  return;
}

__WEAK void UTIL_SEQ_Idle( void )
{
 8020af0:	b580      	push	{r7, lr}
 8020af2:	af00      	add	r7, sp, #0
  return;
 8020af4:	46c0      	nop			; (mov r8, r8)
}
 8020af6:	46bd      	mov	sp, r7
 8020af8:	bd80      	pop	{r7, pc}

08020afa <UTIL_SEQ_PreIdle>:

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8020afa:	b580      	push	{r7, lr}
 8020afc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8020afe:	46c0      	nop			; (mov r8, r8)
}
 8020b00:	46bd      	mov	sp, r7
 8020b02:	bd80      	pop	{r7, pc}

08020b04 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8020b04:	b580      	push	{r7, lr}
 8020b06:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8020b08:	46c0      	nop			; (mov r8, r8)
}
 8020b0a:	46bd      	mov	sp, r7
 8020b0c:	bd80      	pop	{r7, pc}
	...

08020b10 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8020b10:	b580      	push	{r7, lr}
 8020b12:	b084      	sub	sp, #16
 8020b14:	af00      	add	r7, sp, #0
 8020b16:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8020b18:	210f      	movs	r1, #15
 8020b1a:	187b      	adds	r3, r7, r1
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8020b24:	68bb      	ldr	r3, [r7, #8]
 8020b26:	0c1b      	lsrs	r3, r3, #16
 8020b28:	041b      	lsls	r3, r3, #16
 8020b2a:	d105      	bne.n	8020b38 <SEQ_BitPosition+0x28>
 8020b2c:	187b      	adds	r3, r7, r1
 8020b2e:	2210      	movs	r2, #16
 8020b30:	701a      	strb	r2, [r3, #0]
 8020b32:	68bb      	ldr	r3, [r7, #8]
 8020b34:	041b      	lsls	r3, r3, #16
 8020b36:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8020b38:	68bb      	ldr	r3, [r7, #8]
 8020b3a:	0e1b      	lsrs	r3, r3, #24
 8020b3c:	061b      	lsls	r3, r3, #24
 8020b3e:	d108      	bne.n	8020b52 <SEQ_BitPosition+0x42>
 8020b40:	220f      	movs	r2, #15
 8020b42:	18bb      	adds	r3, r7, r2
 8020b44:	18ba      	adds	r2, r7, r2
 8020b46:	7812      	ldrb	r2, [r2, #0]
 8020b48:	3208      	adds	r2, #8
 8020b4a:	701a      	strb	r2, [r3, #0]
 8020b4c:	68bb      	ldr	r3, [r7, #8]
 8020b4e:	021b      	lsls	r3, r3, #8
 8020b50:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8020b52:	68bb      	ldr	r3, [r7, #8]
 8020b54:	0f1b      	lsrs	r3, r3, #28
 8020b56:	071b      	lsls	r3, r3, #28
 8020b58:	d108      	bne.n	8020b6c <SEQ_BitPosition+0x5c>
 8020b5a:	220f      	movs	r2, #15
 8020b5c:	18bb      	adds	r3, r7, r2
 8020b5e:	18ba      	adds	r2, r7, r2
 8020b60:	7812      	ldrb	r2, [r2, #0]
 8020b62:	3204      	adds	r2, #4
 8020b64:	701a      	strb	r2, [r3, #0]
 8020b66:	68bb      	ldr	r3, [r7, #8]
 8020b68:	011b      	lsls	r3, r3, #4
 8020b6a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8020b6c:	68bb      	ldr	r3, [r7, #8]
 8020b6e:	0f1b      	lsrs	r3, r3, #28
 8020b70:	4a08      	ldr	r2, [pc, #32]	; (8020b94 <SEQ_BitPosition+0x84>)
 8020b72:	5cd1      	ldrb	r1, [r2, r3]
 8020b74:	200f      	movs	r0, #15
 8020b76:	183b      	adds	r3, r7, r0
 8020b78:	183a      	adds	r2, r7, r0
 8020b7a:	7812      	ldrb	r2, [r2, #0]
 8020b7c:	188a      	adds	r2, r1, r2
 8020b7e:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 8020b80:	183b      	adds	r3, r7, r0
 8020b82:	781b      	ldrb	r3, [r3, #0]
 8020b84:	221f      	movs	r2, #31
 8020b86:	1ad3      	subs	r3, r2, r3
 8020b88:	b2db      	uxtb	r3, r3
}
 8020b8a:	0018      	movs	r0, r3
 8020b8c:	46bd      	mov	sp, r7
 8020b8e:	b004      	add	sp, #16
 8020b90:	bd80      	pop	{r7, pc}
 8020b92:	46c0      	nop			; (mov r8, r8)
 8020b94:	08020c78 	.word	0x08020c78

08020b98 <__libc_init_array>:
 8020b98:	b570      	push	{r4, r5, r6, lr}
 8020b9a:	2600      	movs	r6, #0
 8020b9c:	4c0c      	ldr	r4, [pc, #48]	; (8020bd0 <__libc_init_array+0x38>)
 8020b9e:	4d0d      	ldr	r5, [pc, #52]	; (8020bd4 <__libc_init_array+0x3c>)
 8020ba0:	1b64      	subs	r4, r4, r5
 8020ba2:	10a4      	asrs	r4, r4, #2
 8020ba4:	42a6      	cmp	r6, r4
 8020ba6:	d109      	bne.n	8020bbc <__libc_init_array+0x24>
 8020ba8:	2600      	movs	r6, #0
 8020baa:	f000 f819 	bl	8020be0 <_init>
 8020bae:	4c0a      	ldr	r4, [pc, #40]	; (8020bd8 <__libc_init_array+0x40>)
 8020bb0:	4d0a      	ldr	r5, [pc, #40]	; (8020bdc <__libc_init_array+0x44>)
 8020bb2:	1b64      	subs	r4, r4, r5
 8020bb4:	10a4      	asrs	r4, r4, #2
 8020bb6:	42a6      	cmp	r6, r4
 8020bb8:	d105      	bne.n	8020bc6 <__libc_init_array+0x2e>
 8020bba:	bd70      	pop	{r4, r5, r6, pc}
 8020bbc:	00b3      	lsls	r3, r6, #2
 8020bbe:	58eb      	ldr	r3, [r5, r3]
 8020bc0:	4798      	blx	r3
 8020bc2:	3601      	adds	r6, #1
 8020bc4:	e7ee      	b.n	8020ba4 <__libc_init_array+0xc>
 8020bc6:	00b3      	lsls	r3, r6, #2
 8020bc8:	58eb      	ldr	r3, [r5, r3]
 8020bca:	4798      	blx	r3
 8020bcc:	3601      	adds	r6, #1
 8020bce:	e7f2      	b.n	8020bb6 <__libc_init_array+0x1e>
 8020bd0:	08020c88 	.word	0x08020c88
 8020bd4:	08020c88 	.word	0x08020c88
 8020bd8:	08020c8c 	.word	0x08020c8c
 8020bdc:	08020c88 	.word	0x08020c88

08020be0 <_init>:
 8020be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020be2:	46c0      	nop			; (mov r8, r8)
 8020be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020be6:	bc08      	pop	{r3}
 8020be8:	469e      	mov	lr, r3
 8020bea:	4770      	bx	lr

08020bec <_fini>:
 8020bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bee:	46c0      	nop			; (mov r8, r8)
 8020bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020bf2:	bc08      	pop	{r3}
 8020bf4:	469e      	mov	lr, r3
 8020bf6:	4770      	bx	lr
